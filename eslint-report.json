[{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\next.config.clean.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\next.config.fixed.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\next.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\postcss.config.mjs","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":1,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":6,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\quick-api-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\scripts\\check-admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\scripts\\check-db-schema.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\scripts\\check-db.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\scripts\\create-admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\scripts\\test-external-import.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\scripts\\update-admin-premium.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\setup-db-fixed.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\HomeContent.js","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":236,"column":11,"nodeType":"JSXOpeningElement","endLine":249,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useSession } from 'next-auth/react';\nimport Link from 'next/link';\nimport {\n  Plus,\n  ChefHat,\n  Loader2,\n  ArrowRight,\n  Utensils,\n  Sparkles,\n  Users,\n  Clock\n} from 'lucide-react';\n\nexport default function HomeContent() {\n  const { status } = useSession();\n\n  const [featuredRecipes, setFeaturedRecipes] = useState([]);\n  const [featuredError, setFeaturedError] = useState(null);\n\n  const categories = [\n    {\n      id: 'main course',\n      name: 'Main Course',\n      description: 'Hearty entrees for family dinners and gatherings.',\n      icon: <ChefHat className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n    },\n    {\n      id: 'dessert',\n      name: 'Desserts',\n      description: 'Sweet treats for every celebration and craving.',\n      icon: <Sparkles className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n    },\n    {\n      id: 'salad',\n      name: 'Salads',\n      description: 'Fresh and vibrant bowls packed with nutrients.',\n      icon: <Plus className=\"w-6 h-6 text-green-600 dark:text-green-400 rotate-45\" />\n    },\n    {\n      id: 'breakfast',\n      name: 'Breakfast',\n      description: 'Morning favorites to kick-start your day.',\n      icon: <Utensils className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n    }\n  ];\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const normalizeCommunityRecipe = (recipe) => ({\n      id: `community-${recipe.id}`,\n      title: recipe.title || 'Untitled Recipe',\n      image: recipe.image || '/placeholder-recipe.jpg',\n      readyInMinutes: recipe.readyInMinutes ?? null,\n      servings: recipe.servings ?? null,\n      sourceLabel: 'Community',\n      description: recipe.previewText || recipe.description || '',\n      href: `/recipes/${encodeURIComponent(recipe.slug || recipe.id)}?source=community`\n    });\n\n    const normalizeMealdbRecipe = (recipe) => {\n      const originalId = recipe.originalId || recipe.id;\n      return {\n        id: `mealdb-${originalId}`,\n        title: recipe.title || recipe.strMeal || 'Featured Recipe',\n        image: recipe.image || recipe.strMealThumb || '/placeholder-recipe.jpg',\n        readyInMinutes: recipe.readyInMinutes ?? null,\n        servings: recipe.servings ?? null,\n        sourceLabel: 'MealDB',\n        description: recipe.description || recipe.category || '',\n        href: originalId ? `/recipes/${encodeURIComponent(originalId)}?source=mealdb` : '/recipes'\n      };\n    };\n\n    const buildFeaturedList = (community, mealdb, max = 4) => {\n      const combined = [];\n      let communityIndex = 0;\n      let mealdbIndex = 0;\n\n      while (combined.length < max && (communityIndex < community.length || mealdbIndex < mealdb.length)) {\n        if (communityIndex < community.length) {\n          combined.push(community[communityIndex]);\n          communityIndex += 1;\n        }\n        if (combined.length >= max) break;\n        if (mealdbIndex < mealdb.length) {\n          combined.push(mealdb[mealdbIndex]);\n          mealdbIndex += 1;\n        }\n      }\n\n      while (combined.length < max && communityIndex < community.length) {\n        combined.push(community[communityIndex]);\n        communityIndex += 1;\n      }\n\n      while (combined.length < max && mealdbIndex < mealdb.length) {\n        combined.push(mealdb[mealdbIndex]);\n        mealdbIndex += 1;\n      }\n\n      return combined;\n    };\n\n    const fetchFeaturedRecipes = async () => {\n      setFeaturedError(null);\n\n      try {\n        const communityPromise = fetch('/api/recipes?limit=6&page=1');\n        const mealdbPromise = fetch('/api/external/recipes?source=mealdb&number=6');\n\n        const [communityResponse, mealdbResponse] = await Promise.all([communityPromise, mealdbPromise]);\n\n        let communityRecipes = [];\n        if (communityResponse.ok) {\n          const communityData = await communityResponse.json();\n          communityRecipes = Array.isArray(communityData?.recipes)\n            ? communityData.recipes.map(normalizeCommunityRecipe)\n            : [];\n        } else {\n          console.warn('Community recipes request failed:', communityResponse.status, communityResponse.statusText);\n        }\n\n        let mealdbRecipes = [];\n        if (mealdbResponse.ok) {\n          const mealdbData = await mealdbResponse.json();\n          const rawMealdbRecipes = Array.isArray(mealdbData?.recipes) ? mealdbData.recipes : [];\n          mealdbRecipes = rawMealdbRecipes.map(normalizeMealdbRecipe);\n        } else {\n          console.warn('MealDB recipes request failed:', mealdbResponse.status, mealdbResponse.statusText);\n        }\n\n        if (!communityResponse.ok && !mealdbResponse.ok) {\n          throw new Error('Unable to load featured recipes. Please try again later.');\n        }\n\n        const combinedFeatured = buildFeaturedList(communityRecipes, mealdbRecipes);\n\n        if (isMounted) {\n          setFeaturedRecipes(combinedFeatured);\n        }\n\n        if (isMounted && combinedFeatured.length === 0) {\n          setFeaturedError('No featured recipes are available right now.');\n        }\n      } catch (error) {\n        console.error('Error loading featured recipes:', error);\n        if (isMounted) {\n          setFeaturedRecipes([]);\n          setFeaturedError(error.message || 'Failed to load featured recipes.');\n        }\n      }\n    };\n\n    fetchFeaturedRecipes();\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  const FeaturedRecipeCard = ({ recipe }) => {\n    const [imageSrc, setImageSrc] = useState(recipe.image || '/placeholder-recipe.jpg');\n    const [imageLoaded, setImageLoaded] = useState(false);\n    const [imageError, setImageError] = useState(false);\n\n    useEffect(() => {\n      let isMounted = true;\n      let objectUrl = null;\n\n      const resolveImage = async () => {\n        const rawUrl = recipe.image?.toString() || '';\n        if (!rawUrl) {\n          if (isMounted) {\n            setImageSrc('/placeholder-recipe.jpg');\n            setImageLoaded(false);\n            setImageError(false);\n          }\n          return;\n        }\n\n        if (/^https?:/i.test(rawUrl) || /^data:/i.test(rawUrl)) {\n          if (isMounted) {\n            setImageSrc(rawUrl);\n            setImageLoaded(false);\n            setImageError(false);\n          }\n          return;\n        }\n\n        try {\n          const response = await fetch(rawUrl, { cache: 'no-store' });\n          if (!response.ok) {\n            throw new Error(`Failed to fetch featured recipe image (${response.status})`);\n          }\n          const blob = await response.blob();\n          objectUrl = URL.createObjectURL(blob);\n          if (isMounted) {\n            setImageSrc(objectUrl);\n            setImageLoaded(false);\n            setImageError(false);\n          }\n        } catch (error) {\n          console.error('Unable to resolve featured recipe image:', error);\n          if (isMounted) {\n            setImageSrc('/placeholder-recipe.jpg');\n            setImageLoaded(false);\n            setImageError(true);\n          }\n          if (objectUrl) {\n            URL.revokeObjectURL(objectUrl);\n            objectUrl = null;\n          }\n        }\n      };\n\n      resolveImage();\n\n      return () => {\n        isMounted = false;\n        if (objectUrl) {\n          URL.revokeObjectURL(objectUrl);\n        }\n      };\n    }, [recipe.image]);\n\n    return (\n      <Link\n        href={recipe.href}\n        className=\"group bg-white dark:bg-gray-800 rounded-xl overflow-hidden shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1 h-full flex flex-col\"\n      >\n        <div className=\"relative h-48 w-full flex-shrink-0\">\n          <img\n            src={imageSrc}\n            alt={recipe.title}\n            className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n            style={{ opacity: imageLoaded ? 1 : 0, transition: 'opacity 200ms ease-in-out' }}\n            onLoad={() => setImageLoaded(true)}\n            onError={() => {\n              if (!imageError) {\n                setImageSrc('/placeholder-recipe.jpg');\n                setImageLoaded(false);\n                setImageError(true);\n              }\n            }}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent to-black/50\" />\n          <div className=\"absolute top-3 left-3 px-3 py-1 rounded-full text-xs font-semibold bg-white/90 text-gray-800\">\n            {recipe.sourceLabel}\n          </div>\n        </div>\n        <div className=\"p-5 flex flex-col flex-1 w-full\">\n          <h3 className=\"text-lg font-bold text-gray-900 dark:text-white mb-2 line-clamp-2\">\n            {recipe.title}\n          </h3>\n          {recipe.description && (\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">\n              {recipe.description}\n            </p>\n          )}\n          <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400 gap-4 mb-4\">\n            {recipe.readyInMinutes ? (\n              <span className=\"flex items-center gap-1\">\n                <Clock className=\"w-4 h-4\" />\n                {recipe.readyInMinutes} min\n              </span>\n            ) : null}\n            {recipe.servings ? (\n              <span className=\"flex items-center gap-1\">\n                <Users className=\"w-4 h-4\" />\n                {recipe.servings} {recipe.servings === 1 ? 'serving' : 'servings'}\n              </span>\n            ) : null}\n          </div>\n          <span className=\"inline-flex items-center text-sm font-medium text-green-600 dark:text-green-400 mt-auto\">\n            View recipe\n            <ArrowRight className=\"ml-1 w-4 h-4 transition-transform group-hover:translate-x-1\" />\n          </span>\n        </div>\n      </Link>\n    );\n  };\n\n  if (status === 'loading') {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Loader2 className=\"w-12 h-12 text-green-600 dark:text-green-400 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"min-h-screen bg-white dark:bg-gray-900 pt-0 m-0\">\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-green-700 via-green-600 to-green-800 text-white pt-20 pb-24 md:pt-24 md:pb-32 overflow-hidden\">\n        <div className=\"absolute inset-0 opacity-5\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-green-800/20 to-green-600/20\"></div>\n        </div>\n        <div className=\"absolute -bottom-1 left-0 right-0 h-24 bg-gradient-to-t from-white dark:from-gray-900 to-transparent\"></div>\n\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-6\">\n            {/* Badge */}\n            <div className=\"inline-flex items-center bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full border border-white/20 mb-4\">\n              <Sparkles className=\"w-5 h-5 mr-2 text-yellow-300\" />\n              <span className=\"text-sm font-medium\">Discover your next favorite meal</span>\n            </div>\n\n            {/* Main heading */}\n            <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold leading-tight max-w-4xl mx-auto\">\n              Discover & Share{' '}\n              <span className=\"relative\">\n                <span className=\"relative z-10 bg-clip-text text-transparent bg-gradient-to-r from-yellow-300 to-yellow-200\">\n                  Amazing Recipes\n                </span>\n              </span>\n            </h1>\n\n            {/* Subheading */}\n            <p className=\"text-lg md:text-xl max-w-2xl mx-auto text-green-100/90 leading-relaxed\">\n              Find the perfect recipe for any occasion. Cook like a pro with our easy-to-follow recipes and cooking guides.\n            </p>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center pt-4\">\n              <Link\n                href=\"/recipes\"\n                className=\"relative inline-flex items-center justify-center overflow-hidden font-medium transition-all rounded-xl group px-8 py-4 text-lg text-green-700 bg-white hover:text-white\"\n              >\n                <span className=\"relative z-10 flex items-center gap-2\">\n                  <Utensils className=\"w-5 h-5\" />\n                  Explore Recipes\n                </span>\n                <span className=\"absolute bottom-0 left-0 w-0 h-0 transition-all duration-500 ease-out transform rounded-full bg-green-600 group-hover:w-64 group-hover:h-64 group-hover:-ml-2 group-hover:translate-x-full group-hover:translate-y-full\"></span>\n              </Link>\n              <Link\n                href=\"/community\"\n                className=\"relative inline-flex items-center justify-center overflow-hidden font-medium transition-all rounded-xl group px-8 py-4 text-lg text-white border-2 border-white/30 hover:border-transparent\"\n              >\n                <span className=\"relative z-10 flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  Join Community\n                </span>\n                <span className=\"absolute bottom-0 left-0 w-0 h-0 transition-all duration-500 ease-out transform rounded-full bg-white/10 group-hover:w-64 group-hover:h-64 group-hover:-ml-2 group-hover:translate-x-full group-hover:translate-y-full\"></span>\n              </Link>\n            </div>\n\n            {/* Stats */}\n            <div className=\"flex flex-wrap justify-center gap-8 pt-12\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-yellow-300\">500+</div>\n                <div className=\"text-green-100/80\">Recipes</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-yellow-300\">50+</div>\n                <div className=\"text-green-100/80\">Chefs</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-yellow-300\">10K+</div>\n                <div className=\"text-green-100/80\">Community Members</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Recipes Section */}\n      <section className=\"py-16 bg-white dark:bg-gray-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-10\">\n            <div>\n              <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Featured Recipes</h2>\n              <p className=\"text-gray-600 dark:text-gray-300 max-w-2xl\">\n                Handpicked dishes from the SavoryFlavors community and TheMealDB to jump-start your next meal idea.\n              </p>\n            </div>\n            <Link\n              href=\"/recipes\"\n              className=\"inline-flex items-center font-medium text-green-600 dark:text-green-400 hover:text-green-700\"\n            >\n              Browse all recipes\n              <ArrowRight className=\"ml-1 w-4 h-4\" />\n            </Link>\n          </div>\n\n          {featuredError ? (\n            <div className=\"bg-amber-50 dark:bg-amber-900/30 border border-amber-200 dark:border-amber-800 rounded-xl p-6 text-amber-800 dark:text-amber-200\">\n              {featuredError}\n            </div>\n          ) : featuredRecipes.length > 0 ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {featuredRecipes.map((recipe) => (\n                <FeaturedRecipeCard key={recipe.id} recipe={recipe} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-gray-50 dark:bg-gray-800 border border-dashed border-gray-200 dark:border-gray-700 rounded-xl p-10 text-center text-gray-600 dark:text-gray-300\">\n              Check back soon for featured recipes.\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Categories Section */}\n      <section className=\"py-16 bg-gray-50 dark:bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-3\">Browse by Category</h2>\n            <p className=\"text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n              Explore curated collections tailored to every craving and occasion.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-6\">\n            {categories.map((category) => (\n              <Link\n                key={category.id}\n                href={`/recipes?category=${category.id}`}\n                className=\"group bg-white dark:bg-gray-800 rounded-xl p-6 text-center transition-all duration-300 hover:shadow-lg hover:-translate-y-1\"\n              >\n                <div className=\"bg-green-50 dark:bg-green-900/30 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-3 group-hover:bg-green-100 dark:group-hover:bg-green-900/50 transition-colors\">\n                  {category.icon}\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">{category.name}</h3>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  {category.description}\n                </p>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Why Choose Us Section */}\n      <section className=\"py-16 bg-gray-50 dark:bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-extrabold text-gray-900 dark:text-white sm:text-4xl\">\n              Why Choose SavoryFlavors?\n            </h2>\n            <p className=\"mt-3 max-w-2xl mx-auto text-xl text-gray-600 dark:text-gray-300 sm:mt-4\">\n              We make cooking enjoyable and accessible for everyone\n            </p>\n          </div>\n          \n          <div className=\"mt-10\">\n            <div className=\"grid grid-cols-1 gap-10 sm:grid-cols-2 lg:grid-cols-3\">\n              {/* Feature 1 */}\n              <div className=\"bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300\">\n                <div className=\"bg-green-100 dark:bg-green-900/30 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <ChefHat className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Expert Recipes</h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  Handpicked recipes from professional chefs and home cooks around the world.\n                </p>\n              </div>\n              \n              {/* Feature 2 */}\n              <div className=\"bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300\">\n                <div className=\"bg-green-100 dark:bg-green-900/30 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Users className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Community Driven</h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  Join a community of food lovers, share your recipes, and get feedback.\n                </p>\n              </div>\n              \n              {/* Feature 3 */}\n              <div className=\"bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300\">\n                <div className=\"bg-green-100 dark:bg-green-900/30 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Sparkles className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Endless Inspiration</h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  Find new recipes based on your preferences, dietary needs, and ingredients you have.\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-16 text-center\">\n            <Link\n              href=\"/about\"\n              className=\"relative inline-flex items-center justify-center overflow-hidden font-medium transition-all rounded-xl group px-8 py-4 text-lg text-green-700 border-2 border-green-600 hover:text-white\"\n            >\n              <span className=\"relative z-10 flex items-center gap-2\">\n                Learn more about us\n              </span>\n              <span className=\"absolute bottom-0 left-0 w-0 h-0 transition-all duration-500 ease-out transform rounded-full bg-green-600 group-hover:w-full group-hover:h-full\"></span>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\about\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\actions\\subscription.server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\admin\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\admin\\analytics\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\admin\\recipes\\external\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\admin\\recipes\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\auth\\[...nextauth]\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\auth\\register\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\community\\posts\\[postId]\\comments\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\community\\posts\\[postId]\\image\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\community\\posts\\[postId]\\likes\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\community\\posts\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\debug-users\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\external\\recipes\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\favorites\\[...params]\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\favorites\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\meal-planner\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\mealdb\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\nutrition\\barcode\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\nutrition\\calorieninjas\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\nutrition\\lookup\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\nutrition\\meal-calculate\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\nutrition\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\nutrition\\search\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\nutrition\\test\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\payment\\paymongo\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\payment\\paymongo\\subscription-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\payment\\paymongo\\verify\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\placeholder\\[width]\\[height]\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\recipes\\[id]\\pages.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRecipe'. Either include it or remove the dependency array.","line":23,"column":6,"nodeType":"ArrayExpression","endLine":23,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRecipe, id, source]","fix":{"range":[682,694],"text":"[fetchRecipe, id, source]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useParams, useSearchParams } from 'next/navigation'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport { Star, Clock, Users, Heart, Share2, ChefHat, Utensils, Flame } from 'lucide-react'\n\nexport default function RecipeDetail() {\n  const params = useParams()\n  const searchParams = useSearchParams()\n  const { id } = params\n  const source = searchParams.get('source') || 'mealdb'\n\n  const [recipe, setRecipe] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [activeTab, setActiveTab] = useState('instructions')\n\n  useEffect(() => {\n    if (id) {\n      fetchRecipe()\n    }\n  }, [id, source])\n\n  const fetchRecipe = async () => {\n    setLoading(true)\n    try {\n      // Determine the correct source based on the ID format or provided source\n      let effectiveSource = source;\n      \n      // If source is not provided, try to determine it from the ID\n      if (!effectiveSource) {\n        // Spoonacular IDs are typically numeric, MealDB IDs are typically numeric but could be strings\n        effectiveSource = 'mealdb'; // Default to mealdb if we can't determine\n      }\n      \n      const response = await fetch(`/api/external/recipes?source=${effectiveSource}&id=${id}`)\n      if (!response.ok) {\n        throw new Error(`Failed to fetch recipe: ${response.status} ${response.statusText}`)\n      }\n      \n      const data = await response.json()\n      if (!data) {\n        throw new Error('No recipe data returned from API')\n      }\n      \n      setRecipe(data)\n    } catch (error) {\n      console.error('Error fetching recipe:', error)\n      // Set a fallback recipe with error message\n      setRecipe({\n        id,\n        title: 'Recipe Not Found',\n        error: error.message,\n        source: source || 'unknown',\n        isError: true\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const toggleFavorite = async () => {\n    // This would typically require user authentication\n    setRecipe({\n      ...recipe,\n      isFavorite: !recipe.isFavorite\n    })\n  }\n\n  if (loading && !recipe) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-olive-500\"></div>\n      </div>\n    )\n  }\n\n  if (recipe?.isError) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <div className=\"bg-red-50 border-l-4 border-red-400 p-4 mb-6\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"h-5 w-5 text-red-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-red-700\">\n                {recipe.error || 'Failed to load recipe. Please try again later.'}\n              </p>\n            </div>\n          </div>\n        </div>\n        <Link \n          href=\"/recipes\" \n          className=\"inline-flex items-center text-olive-600 hover:text-olive-800 font-medium\"\n        >\n          <svg className=\"w-5 h-5 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n          </svg>\n          Back to Recipes\n        </Link>\n      </div>\n    )\n  }\n\n  if (!recipe) {\n    return (\n      <div className=\"min-h-screen pt-20 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-olive-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading recipe...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!recipe) {\n    return (\n      <div className=\"min-h-screen pt-20 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Recipe not found</h1>\n          <Link href=\"/recipes\" className=\"text-olive-600 hover:text-olive-700\">\n            ← Back to recipes\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  const averageRating = recipe.reviews?.length > 0\n    ? recipe.reviews.reduce((sum, review) => sum + review.rating, 0) / recipe.reviews.length\n    : 0\n\n  return (\n    <div className=\"min-h-screen pt-20 bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Back button */}\n        <Link href=\"/recipes\" className=\"text-olive-600 hover:text-olive-700 mb-6 inline-block\">\n          ← Back to recipes\n        </Link>\n\n        <div className=\"bg-white rounded-xl shadow-lg overflow-hidden\">\n          {/* Recipe header */}\n          <div className=\"relative\">\n            <Image\n              src={recipe.image || '/api/placeholder/800/400'}\n              alt={recipe.title || 'Recipe image'}\n              width={800}\n              height={400}\n              className=\"w-full h-64 md:h-80 object-cover\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent\"></div>\n            <div className=\"absolute bottom-6 left-6 right-6 text-white\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <span className=\"bg-olive-600 px-3 py-1 rounded-full text-sm font-medium\">\n                  {recipe.category}\n                </span>\n                {recipe.cuisine && (\n                  <span className=\"bg-gray-900/50 px-3 py-1 rounded-full text-sm\">\n                    {recipe.cuisine}\n                  </span>\n                )}\n                <span className=\"bg-gray-900/50 px-3 py-1 rounded-full text-sm\">\n                  {source.toUpperCase()}\n                </span>\n              </div>\n              <h1 className=\"text-3xl md:text-4xl font-bold mb-2\">{recipe.title}</h1>\n              {recipe.description && (\n                <p className=\"text-lg text-gray-200\">{recipe.description}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Recipe meta info */}\n            <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\n              <div className=\"flex items-center gap-6\">\n                <div className=\"flex items-center gap-2\">\n                  <Star className=\"h-5 w-5 fill-yellow-400 text-yellow-400\" />\n                  <span className=\"font-semibold\">4.8</span>\n                  <span className=\"text-gray-600\">(120 reviews)</span>\n                </div>\n                {recipe.totalTime && (\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"h-5 w-5 text-gray-600\" />\n                    <span>{recipe.totalTime} minutes</span>\n                  </div>\n                )}\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5 text-gray-600\" />\n                  <span>4 servings</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={toggleFavorite}\n                  className=\"p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\n                >\n                  <Heart className={`h-5 w-5 ${recipe.isFavorite ? 'fill-red-500 text-red-500' : 'text-gray-600'}`} />\n                </button>\n                <button className=\"p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\">\n                  <Share2 className=\"h-5 w-5 text-gray-600\" />\n                </button>\n              </div>\n            </div>\n\n            {/* Tabs */}\n            <div className=\"border-b border-gray-200 mb-6\">\n              <nav className=\"flex space-x-8\">\n                <button\n                  onClick={() => setActiveTab('instructions')}\n                  className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                    activeTab === 'instructions'\n                      ? 'border-olive-600 text-olive-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  Instructions\n                </button>\n                <button\n                  onClick={() => setActiveTab('ingredients')}\n                  className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                    activeTab === 'ingredients'\n                      ? 'border-olive-600 text-olive-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  Ingredients\n                </button>\n                <button\n                  onClick={() => setActiveTab('nutrition')}\n                  className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                    activeTab === 'nutrition'\n                      ? 'border-olive-600 text-olive-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  Nutrition\n                </button>\n              </nav>\n            </div>\n\n            {/* Tab content */}\n            <div className=\"space-y-6\">\n              {activeTab === 'instructions' && (\n                <div>\n                  <h3 className=\"text-xl font-semibold mb-4\">Instructions</h3>\n                  <div className=\"prose max-w-none\">\n                    <div className=\"whitespace-pre-line text-gray-700 leading-relaxed\">\n                      {recipe.instructions || 'No instructions available.'}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'ingredients' && (\n                <div>\n                  <h3 className=\"text-xl font-semibold mb-4\">Ingredients</h3>\n                  <div className=\"grid gap-3\">\n                    {recipe.ingredients && recipe.ingredients.length > 0 ? (\n                      recipe.ingredients.map((ingredient, index) => (\n                        <div key={index} className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n                          <ChefHat className=\"h-5 w-5 text-olive-600\" />\n                          <div>\n                            <span className=\"font-medium\">\n                              {typeof ingredient === 'string'\n                                ? ingredient\n                                : ingredient.original || `${ingredient.name} ${ingredient.measure}`\n                              }\n                            </span>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <p className=\"text-gray-600\">No ingredients available for this recipe.</p>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'nutrition' && (\n                <div>\n                  <h3 className=\"text-xl font-semibold mb-4\">Nutrition Information</h3>\n                  {recipe.nutrition ? (\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                      <div className=\"bg-olive-50 p-4 rounded-lg text-center\">\n                        <Flame className=\"h-6 w-6 text-olive-600 mx-auto mb-2\" />\n                        <div className=\"text-2xl font-bold text-olive-600\">{recipe.nutrition.calories || recipe.calories || 'N/A'}</div>\n                        <div className=\"text-sm text-gray-600\">Calories</div>\n                      </div>\n                      {recipe.nutrition.protein && (\n                        <div className=\"bg-blue-50 p-4 rounded-lg text-center\">\n                          <Utensils className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\n                          <div className=\"text-2xl font-bold text-blue-600\">{recipe.nutrition.protein}g</div>\n                          <div className=\"text-sm text-gray-600\">Protein</div>\n                        </div>\n                      )}\n                      {recipe.nutrition.fat && (\n                        <div className=\"bg-yellow-50 p-4 rounded-lg text-center\">\n                          <div className=\"text-2xl font-bold text-yellow-600\">{recipe.nutrition.fat}g</div>\n                          <div className=\"text-sm text-gray-600\">Fat</div>\n                        </div>\n                      )}\n                      {recipe.nutrition.carbs && (\n                        <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n                          <div className=\"text-2xl font-bold text-green-600\">{recipe.nutrition.carbs}g</div>\n                          <div className=\"text-sm text-gray-600\">Carbs</div>\n                        </div>\n                      )}\n                      {recipe.nutrition.fiber && (\n                        <div className=\"bg-purple-50 p-4 rounded-lg text-center\">\n                          <div className=\"text-2xl font-bold text-purple-600\">{recipe.nutrition.fiber}g</div>\n                          <div className=\"text-sm text-gray-600\">Fiber</div>\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <p className=\"text-gray-600\">Nutrition information not available for this recipe.</p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Additional info for Edamam recipes */}\n            {source === 'edamam' && (\n              <div className=\"mt-8 pt-6 border-t border-gray-200\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {recipe.dietLabels && recipe.dietLabels.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Diet Labels</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {recipe.dietLabels.map((label, index) => (\n                          <span key={index} className=\"bg-green-100 text-green-800 px-2 py-1 rounded text-sm\">\n                            {label}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  {recipe.healthLabels && recipe.healthLabels.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Health Labels</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {recipe.healthLabels.slice(0, 5).map((label, index) => (\n                          <span key={index} className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm\">\n                            {label}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\recipes\\[id]\\purchase\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\recipes\\[id]\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\recipes\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\test-db\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\test\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\user\\subscription\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\api\\webhooks\\paymongo\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\auth\\error\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\auth\\forgot-password\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\auth\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\auth\\login\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\auth\\signup\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\community\\page.js","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":99,"column":15,"nodeType":"JSXOpeningElement","endLine":108,"endColumn":17},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":442,"column":17,"nodeType":"JSXOpeningElement","endLine":451,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":470,"column":13,"nodeType":"JSXOpeningElement","endLine":481,"endColumn":15},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-param-reassign').","line":556,"column":7,"severity":1,"nodeType":null,"fix":{"range":[19229,19274],"text":" "}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":892,"column":25,"nodeType":"JSXOpeningElement","endLine":901,"endColumn":27}],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":676,"column":17,"nodeType":"JSXOpeningElement","endLine":680,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useAuthModal } from '@/components/AuthProvider';\nimport Link from 'next/link';\nimport {\n  MoreHorizontal,\n  Heart,\n  MessageSquare,\n  Share2,\n  Bookmark,\n  ImagePlus,\n  X,\n  Loader2,\n} from 'lucide-react';\nimport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogClose\n} from '@/components/ui/dialog';\n\nconst FEED_LIMIT = 20;\nconst MAX_IMAGE_SIZE_BYTES = 5 * 1024 * 1024; // 5 MB\n\nconst trendingRecipes = [\n  { id: 1, name: 'Avocado Toast', likes: 1243, image: '/images/recipes/avocado-toast.jpg' },\n  { id: 2, name: 'Chocolate Lava Cake', likes: 987, image: '/images/recipes/chocolate-cake.jpg' },\n  { id: 3, name: 'Vegan Buddha Bowl', likes: 765, image: '/images/recipes/buddha-bowl.jpg' },\n];\n\nconst relativeTimeFormatter = new Intl.RelativeTimeFormat(undefined, { numeric: 'auto' });\n\nfunction formatTimeAgo(dateInput) {\n  if (!dateInput) {\n    return 'Just now';\n  }\n\n  const date = new Date(dateInput);\n  if (Number.isNaN(date.getTime())) {\n    return 'Just now';\n  }\n\n  const diffInSeconds = Math.round((date.getTime() - Date.now()) / 1000);\n  const divisions = [\n    { amount: 60, unit: 'second' },\n    { amount: 60, unit: 'minute' },\n    { amount: 24, unit: 'hour' },\n    { amount: 7, unit: 'day' },\n    { amount: 4.34524, unit: 'week' },\n    { amount: 12, unit: 'month' },\n    { amount: Number.POSITIVE_INFINITY, unit: 'year' },\n  ];\n\n  let duration = diffInSeconds;\n  for (const division of divisions) {\n    if (Math.abs(duration) < division.amount) {\n      return relativeTimeFormatter.format(Math.round(duration), division.unit);\n    }\n    duration /= division.amount;\n  }\n\n  return 'Just now';\n}\n\nasync function getErrorMessage(response) {\n  try {\n    const data = await response.json();\n    return data?.message || data?.error || null;\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction CommentList({ comments, isLoading, onLoadMore, hasMore, isLoadingMore }) {\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-300\">\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\n        <span>Loading comments…</span>\n      </div>\n    );\n  }\n\n  if (!comments.length) {\n    return <p className=\"text-sm text-gray-500 dark:text-gray-400\">Be the first to comment.</p>;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {comments.map((comment) => (\n        <div key={comment.id} className=\"flex space-x-3\">\n          <div className=\"h-9 w-9 rounded-full bg-gray-200 dark:bg-gray-700 overflow-hidden\">\n            {comment.author?.image ? (\n              <img\n                src={comment.author.image}\n                alt={comment.author?.name || 'Community member'}\n                className=\"h-full w-full object-cover\"\n                onError={(event) => {\n                  event.target.onerror = null;\n                  event.target.style.display = 'none';\n                  event.target.parentElement.innerHTML = `<div class=\\\"h-full w-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center text-white font-bold text-sm\\\">${(comment.author?.name || '?').charAt(0).toUpperCase()}</div>`;\n                }}\n              />\n            ) : (\n              <div className=\"h-full w-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center text-white font-bold text-sm\">\n                {(comment.author?.name || '?').charAt(0).toUpperCase()}\n              </div>\n            )}\n          </div>\n          <div className=\"flex-1 bg-gray-100 dark:bg-gray-800 rounded-2xl px-4 py-2\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm font-semibold text-gray-800 dark:text-gray-100\">\n                {comment.author?.name || 'Community member'}\n              </p>\n              <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                {formatTimeAgo(comment.createdAt)}\n              </span>\n            </div>\n            <p className=\"text-sm text-gray-700 dark:text-gray-200 whitespace-pre-wrap\">{comment.content}</p>\n          </div>\n        </div>\n      ))}\n      {hasMore ? (\n        <button\n          type=\"button\"\n          onClick={onLoadMore}\n          disabled={isLoadingMore}\n          className=\"text-sm font-medium text-green-600 hover:text-green-700 disabled:opacity-60 disabled:cursor-not-allowed\"\n        >\n          {isLoadingMore ? 'Loading more…' : 'Load more comments'}\n        </button>\n      ) : null}\n    </div>\n  );\n}\n\nfunction CommentComposer({ onSubmit, isSubmitting }) {\n  const { requireAuth } = useAuthModal();\n  const [value, setValue] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!requireAuth('add comments to community posts')) {\n      return;\n    }\n\n    const trimmed = value.trim();\n    if (!trimmed) {\n      setError('Please enter a comment.');\n      return;\n    }\n\n    onSubmit(trimmed, {\n      onSuccess: () => {\n        setValue('');\n        setError('');\n      },\n      onError: (message) => {\n        setError(message || 'Unable to post comment. Try again.');\n      },\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-2\">\n      <textarea\n        value={value}\n        onChange={(event) => {\n          setValue(event.target.value);\n          if (error) {\n            setError('');\n          }\n        }}\n        rows={2}\n        placeholder=\"Share your thoughts…\"\n        className=\"w-full resize-none rounded-2xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 px-3 py-2 text-sm text-gray-800 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-green-500\"\n        disabled={isSubmitting}\n      />\n      {error ? <p className=\"text-xs text-red-600 dark:text-red-400\">{error}</p> : null}\n      <div className=\"text-right\">\n        <button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"inline-flex items-center gap-2 rounded-full bg-green-600 px-4 py-1.5 text-sm font-medium text-white hover:bg-green-700 disabled:opacity-60 disabled:cursor-not-allowed\"\n        >\n          {isSubmitting && <Loader2 className=\"h-4 w-4 animate-spin\" />}\n          <span>{isSubmitting ? 'Posting…' : 'Comment'}</span>\n        </button>\n      </div>\n    </form>\n  );\n}\n\nfunction PostCard({ post, onPostUpdated }) {\n  const { requireAuth } = useAuthModal();\n  const authorName = post?.author?.name || 'Community member';\n  const authorImage = post?.author?.image || null;\n  const authorInitial = authorName.charAt(0).toUpperCase();\n  const timeAgo = formatTimeAgo(post?.createdAt);\n  const likeCount = Number.isFinite(post?.likeCount) ? Number(post.likeCount) : 0;\n  const commentsCount = Number.isFinite(post?.commentCount) ? Number(post.commentCount) : 0;\n  const sharesCount = Number.isFinite(post?.shareCount) ? Number(post?.shareCount) : 0;\n  const [resolvedImageSrc, setResolvedImageSrc] = useState(post?.imageUrl || '');\n  const [imageError, setImageError] = useState(false);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [isLiking, setIsLiking] = useState(false);\n  const [localLikeState, setLocalLikeState] = useState({\n    likeCount,\n    hasLiked: Boolean(post?.hasLiked),\n  });\n  const [isCommentsOpen, setIsCommentsOpen] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [commentsPage, setCommentsPage] = useState(1);\n  const [commentsPagination, setCommentsPagination] = useState({ total: commentsCount, pages: 1 });\n  const [commentsLoading, setCommentsLoading] = useState(false);\n  const [commentsLoadingMore, setCommentsLoadingMore] = useState(false);\n  const [commentSubmitting, setCommentSubmitting] = useState(false);\n\n  useEffect(() => {\n    let objectUrl = null;\n    let isMounted = true;\n\n    const loadImage = async () => {\n      const rawUrl = post?.imageUrl?.toString() || '';\n      if (!rawUrl) {\n        setResolvedImageSrc('');\n        setImageError(false);\n        setImageLoaded(false);\n        return;\n      }\n\n      // If the URL already looks like a data URL or absolute path, use it directly.\n      if (/^data:/i.test(rawUrl) || /^https?:/i.test(rawUrl)) {\n        setResolvedImageSrc(rawUrl);\n        setImageError(false);\n        setImageLoaded(false);\n        return;\n      }\n\n      try {\n        const response = await fetch(rawUrl, { cache: 'no-store' });\n        if (!response.ok) {\n          throw new Error(`Failed to fetch image (${response.status})`);\n        }\n        const blob = await response.blob();\n        objectUrl = URL.createObjectURL(blob);\n        if (isMounted) {\n          setResolvedImageSrc(objectUrl);\n          setImageError(false);\n          setImageLoaded(false);\n        }\n      } catch (error) {\n        console.error('Unable to resolve community post image:', error);\n        if (isMounted) {\n          setResolvedImageSrc('');\n          setImageError(true);\n          setImageLoaded(false);\n        }\n        if (objectUrl) {\n          URL.revokeObjectURL(objectUrl);\n          objectUrl = null;\n        }\n      }\n    };\n\n    loadImage();\n\n    return () => {\n      isMounted = false;\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl);\n      }\n    };\n  }, [post?.imageUrl]);\n\n  const refreshComments = useCallback(\n    async (pageToLoad = 1, append = false) => {\n      try {\n        if (!append) {\n          setCommentsLoading(true);\n        } else {\n          setCommentsLoadingMore(true);\n        }\n\n        const response = await fetch(`/api/community/posts/${post.id}/comments?page=${pageToLoad}`);\n        if (!response.ok) {\n          throw new Error('Failed to load comments');\n        }\n        const data = await response.json();\n        const loadedComments = Array.isArray(data?.comments) ? data.comments : [];\n        const pagination = data?.pagination || { page: pageToLoad, pages: 1, total: loadedComments.length };\n\n        setComments((previous) => (append ? [...previous, ...loadedComments] : loadedComments));\n        setCommentsPage(pagination.page || pageToLoad);\n        setCommentsPagination({ total: Number(pagination.total ?? loadedComments.length), pages: pagination.pages || 1 });\n      } catch (error) {\n        console.error('Failed to refresh comments:', error);\n      } finally {\n        setCommentsLoading(false);\n        setCommentsLoadingMore(false);\n      }\n    },\n    [post.id]\n  );\n\n  useEffect(() => {\n    if (!isCommentsOpen) {\n      return;\n    }\n    refreshComments(1, false);\n  }, [isCommentsOpen, refreshComments]);\n\n  useEffect(() => {\n    setLocalLikeState({\n      likeCount,\n      hasLiked: Boolean(post?.hasLiked),\n    });\n    setCommentsPagination((previous) => ({ ...previous, total: commentsCount }));\n  }, [post?.hasLiked, likeCount, commentsCount]);\n\n  const handleToggleLike = async () => {\n    if (!requireAuth('like posts and interact with community')) {\n      return;\n    }\n\n    if (isLiking) {\n      return;\n    }\n\n    setIsLiking(true);\n    const targetHasLiked = !localLikeState.hasLiked;\n    const optimistic = {\n      likeCount: Math.max(0, localLikeState.likeCount + (targetHasLiked ? 1 : -1)),\n      hasLiked: targetHasLiked,\n    };\n    setLocalLikeState(optimistic);\n\n    try {\n      const method = targetHasLiked ? 'POST' : 'DELETE';\n      const response = await fetch(`/api/community/posts/${post.id}/likes`, { method });\n      if (!response.ok) {\n        throw new Error('Failed to update like');\n      }\n      const data = await response.json();\n      setLocalLikeState({\n        likeCount: Number(data?.likeCount ?? optimistic.likeCount),\n        hasLiked: Boolean(data?.hasLiked ?? optimistic.hasLiked),\n      });\n      onPostUpdated?.(\n        post.id,\n        {\n          likeCount: Number(data?.likeCount ?? optimistic.likeCount),\n          hasLiked: Boolean(data?.hasLiked ?? optimistic.hasLiked),\n        },\n        'likes'\n      );\n    } catch (error) {\n      console.error('Failed to toggle like on post:', error);\n      setLocalLikeState({\n        likeCount,\n        hasLiked: Boolean(post?.hasLiked),\n      });\n    } finally {\n      setIsLiking(false);\n    }\n  };\n\n  const handleSubmitComment = async (content, callbacks) => {\n    if (!requireAuth('add comments to community posts')) {\n      return;\n    }\n\n    setCommentSubmitting(true);\n    try {\n      const response = await fetch(`/api/community/posts/${post.id}/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content }),\n      });\n\n      if (!response.ok) {\n        const payload = await getErrorMessage(response);\n        callbacks?.onError?.(payload || 'Failed to publish your comment. Please try again.');\n        return;\n      }\n\n      const data = await response.json();\n      if (data?.comment) {\n        setComments((previous) => [data.comment, ...previous]);\n        setCommentsPagination((previous) => ({ ...previous, total: Number(data?.counts?.total ?? previous.total + 1) }));\n        callbacks?.onSuccess?.();\n        onPostUpdated?.(\n          post.id,\n          {\n            commentCount: Number(data?.counts?.total ?? commentsCount + 1),\n          },\n          'comments'\n        );\n      }\n    } catch (error) {\n      console.error('Failed to submit comment:', error);\n      callbacks?.onError?.('Failed to publish your comment. Please try again later.');\n    } finally {\n      setCommentSubmitting(false);\n    }\n  };\n\n  const handleLoadMoreComments = () => {\n    if (commentsLoadingMore) {\n      return;\n    }\n    const nextPage = commentsPage + 1;\n    if (commentsPagination.pages && nextPage > commentsPagination.pages) {\n      return;\n    }\n    refreshComments(nextPage, true);\n  };\n\n  const hasMoreComments = useMemo(() => {\n    if (!commentsPagination.total) {\n      return false;\n    }\n    const loaded = comments.length;\n    return loaded < commentsPagination.total;\n  }, [comments.length, commentsPagination.total]);\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden mb-6 border border-gray-100 dark:border-gray-700\">\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"h-10 w-10 rounded-full bg-gray-200 dark:bg-gray-700 overflow-hidden\">\n              {authorImage ? (\n                <img\n                  src={authorImage}\n                  alt={authorName}\n                  className=\"h-full w-full object-cover\"\n                  onError={(e) => {\n                    e.target.onerror = null;\n                    e.target.style.display = 'none';\n                    e.target.parentElement.innerHTML = `<div class=\\\"h-full w-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center text-white font-bold text-sm\\\">${authorInitial}</div>`;\n                  }}\n                />\n              ) : (\n                <div className=\"h-full w-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center text-white font-bold text-sm\">\n                  {authorInitial}\n                </div>\n              )}\n            </div>\n            <div>\n              <h4 className=\"font-medium text-gray-900 dark:text-white\">{authorName}</h4>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">{timeAgo}</p>\n            </div>\n          </div>\n          <button className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-200\">\n            <MoreHorizontal className=\"h-5 w-5\" />\n          </button>\n        </div>\n        <p className=\"text-gray-800 dark:text-gray-100 mb-4 whitespace-pre-wrap\">{post?.content}</p>\n        {resolvedImageSrc && !imageError && (\n          <div className=\"rounded-lg overflow-hidden mb-4\">\n            <img\n              src={resolvedImageSrc}\n              alt=\"Post content\"\n              className=\"w-full h-64 object-cover hover:scale-105 transition-transform duration-300\"\n              style={{ opacity: imageLoaded ? 1 : 0, transition: 'opacity 200ms ease-in-out' }}\n              onError={(e) => {\n                e.target.onerror = null;\n                e.target.style.display = 'none';\n                setImageError(true);\n              }}\n              onLoad={() => setImageLoaded(true)}\n            />\n          </div>\n        )}\n        {imageError && (\n          <div className=\"rounded-lg overflow-hidden mb-4 bg-gray-200 dark:bg-gray-700 text-center text-sm text-gray-600 dark:text-gray-300 py-8\">\n            Image unavailable\n          </div>\n        )}\n        <div className=\"flex items-center justify-between text-gray-500 dark:text-gray-400 text-sm\">\n          <div className=\"flex space-x-4\">\n            <button\n              className={`flex items-center space-x-1 transition-colors ${localLikeState.hasLiked ? 'text-red-500' : 'hover:text-red-500'}`}\n              onClick={handleToggleLike}\n              disabled={isLiking}\n            >\n              <Heart className={`h-5 w-5 ${localLikeState.hasLiked ? 'fill-current' : ''}`} />\n              <span>{localLikeState.likeCount}</span>\n            </button>\n            <button\n              onClick={() => setIsCommentsOpen((previous) => !previous)}\n              className={`flex items-center space-x-1 transition-colors ${isCommentsOpen ? 'text-blue-500' : 'hover:text-blue-500'}`}\n            >\n              <MessageSquare className=\"h-5 w-5\" />\n              <span>{commentsCount}</span>\n            </button>\n            <button className=\"flex items-center space-x-1 hover:text-green-500\">\n              <Share2 className=\"h-5 w-5\" />\n              <span>{sharesCount}</span>\n            </button>\n          </div>\n          <button className=\"hover:text-yellow-500\">\n            <Bookmark className=\"h-5 w-5\" />\n          </button>\n        </div>\n        {isCommentsOpen ? (\n          <div className=\"border-t border-gray-100 dark:border-gray-700 pt-4 mt-4 space-y-4\">\n            <CommentComposer onSubmit={handleSubmitComment} isSubmitting={commentSubmitting} />\n            <CommentList\n              comments={comments}\n              isLoading={commentsLoading}\n              onLoadMore={handleLoadMoreComments}\n              hasMore={hasMoreComments}\n              isLoadingMore={commentsLoadingMore}\n            />\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default CommunityPage;\n\nfunction CreatePost({ onPostCreated }) {\n  const { requireAuth } = useAuthModal();\n  const [content, setContent] = useState('');\n  const [imageFile, setImageFile] = useState(null);\n  const [imagePreview, setImagePreview] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState('');\n  const fileInputRef = useRef(null);\n\n  useEffect(() => () => {\n    if (imagePreview) {\n      URL.revokeObjectURL(imagePreview);\n    }\n  }, [imagePreview]);\n\n  const resetImage = useCallback(() => {\n    if (imagePreview) {\n      URL.revokeObjectURL(imagePreview);\n    }\n    setImageFile(null);\n    setImagePreview('');\n    if (fileInputRef.current) {\n      // eslint-disable-next-line no-param-reassign\n      fileInputRef.current.value = '';\n    }\n  }, [imagePreview]);\n\n  const handleFileSelection = (event) => {\n    const file = event.target.files?.[0];\n    if (!file) {\n      return;\n    }\n\n    if (!file.type?.startsWith('image/')) {\n      setError('Only image files are supported.');\n      resetImage();\n      return;\n    }\n\n    if (file.size > MAX_IMAGE_SIZE_BYTES) {\n      setError('Image is too large. Please choose a file under 5 MB.');\n      resetImage();\n      return;\n    }\n\n    setError('');\n    const previewUrl = URL.createObjectURL(file);\n    if (imagePreview) {\n      URL.revokeObjectURL(imagePreview);\n    }\n    setImageFile(file);\n    setImagePreview(previewUrl);\n  };\n\n  const openFilePicker = () => {\n    if (!requireAuth('share images with the community')) {\n      return;\n    }\n    fileInputRef.current?.click();\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!requireAuth('share posts in the community')) {\n      return;\n    }\n\n    const trimmedContent = content.trim();\n\n    if (!trimmedContent) {\n      setError('Please share a message or recipe tip before posting.');\n      return;\n    }\n\n    setIsSubmitting(true);\n    setError('');\n\n    try {\n      const formData = new FormData();\n      formData.append('content', trimmedContent);\n      if (imageFile) {\n        formData.append('image', imageFile, imageFile.name);\n      }\n\n      const response = await fetch('/api/community/posts', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const message = await getErrorMessage(response);\n        setError(message || 'Failed to publish your post. Please try again.');\n        return;\n      }\n\n      const data = await response.json();\n      if (data?.post) {\n        onPostCreated?.(data.post);\n        setContent('');\n        resetImage();\n      }\n    } catch (submitError) {\n      console.error('Failed to create community post:', submitError);\n      setError('Failed to publish your post. Please check your connection and try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden mb-6 border border-gray-100 dark:border-gray-700\">\n      <form onSubmit={handleSubmit} className=\"p-4 space-y-4\">\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"image/*\"\n          className=\"hidden\"\n          onChange={handleFileSelection}\n          disabled={isSubmitting}\n        />\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"h-10 w-10 rounded-full bg-gradient-to-br from-green-400 to-green-600 text-white flex items-center justify-center font-semibold\">\n            SF\n          </div>\n          <div className=\"flex-1 space-y-3\">\n            <textarea\n              value={content}\n              onChange={(event) => {\n                setContent(event.target.value);\n                if (error) {\n                  setError('');\n                }\n              }}\n              rows={3}\n              placeholder=\"What's cooking? Share a kitchen win, tip, or new recipe...\"\n              className=\"w-full resize-none bg-gray-50 dark:bg-gray-700 rounded-2xl px-4 py-3 text-gray-800 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500\"\n              disabled={isSubmitting}\n            />\n            {imagePreview && (\n              <div className=\"relative w-full overflow-hidden rounded-xl border border-gray-200 dark:border-gray-700\">\n                {/* eslint-disable-next-line @next/next/no-img-element */}\n                <img\n                  src={imagePreview}\n                  alt=\"Selected upload preview\"\n                  className=\"w-full max-h-72 object-cover\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={resetImage}\n                  className=\"absolute top-2 right-2 inline-flex h-8 w-8 items-center justify-center rounded-full bg-black/60 text-white transition hover:bg-black/80\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {error && (\n          <p className=\"text-sm text-red-600 dark:text-red-400 px-1\">{error}</p>\n        )}\n\n        <div className=\"flex items-center justify-between border-t border-gray-100 dark:border-gray-700 pt-3\">\n          <button\n            type=\"button\"\n            onClick={openFilePicker}\n            className=\"inline-flex items-center gap-2 rounded-full px-3 py-1.5 text-sm font-medium text-gray-600 transition hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700\"\n            disabled={isSubmitting}\n          >\n            <ImagePlus className=\"h-4 w-4\" />\n            Add photo\n          </button>\n          <button\n            type=\"submit\"\n            className=\"bg-green-600 hover:bg-green-700 text-white px-5 py-2 rounded-full text-sm font-medium disabled:opacity-60 disabled:cursor-not-allowed\"\n            disabled={isSubmitting}\n          >\n            {isSubmitting ? 'Posting...' : 'Post'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nfunction CommunityPage() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [fetchError, setFetchError] = useState('');\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const loadPosts = useCallback(async (pageToLoad = 1, append = false) => {\n    try {\n      if (append) {\n        setIsLoadingMore(true);\n      } else {\n        setLoading(true);\n      }\n\n      setFetchError('');\n\n      const response = await fetch(`/api/community/posts?page=${pageToLoad}&limit=${FEED_LIMIT}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n        },\n        cache: 'no-store',\n      });\n\n      if (!response.ok) {\n        const message = await getErrorMessage(response);\n        throw new Error(message || 'Failed to load community posts');\n      }\n\n      const data = await response.json();\n      const loadedPosts = Array.isArray(data?.posts) ? data.posts : [];\n\n      setPosts((previous) => {\n        if (!append) {\n          return loadedPosts;\n        }\n\n        const existingIds = new Set(previous.map((item) => item.id));\n        const filtered = loadedPosts.filter((item) => !existingIds.has(item.id));\n        return [...previous, ...filtered];\n      });\n\n      const totalPages = Number.isFinite(data?.pagination?.pages) ? data.pagination.pages : 1;\n      setHasMore(pageToLoad < totalPages);\n      setPage(pageToLoad);\n    } catch (loadError) {\n      console.error('Failed to load community posts:', loadError);\n      setFetchError(loadError.message || 'Failed to load community posts');\n    } finally {\n      if (append) {\n        setIsLoadingMore(false);\n      } else {\n        setLoading(false);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    loadPosts(1, false);\n  }, [loadPosts]);\n\n  const handlePostCreated = useCallback((newPost) => {\n    if (!newPost) return;\n\n    setPosts((previous) => {\n      const withoutDuplicate = previous.filter((post) => post.id !== newPost.id);\n      return [newPost, ...withoutDuplicate];\n    });\n  }, []);\n\n  const handlePostUpdated = useCallback((postId, payload, type) => {\n    if (!postId || !payload) {\n      return;\n    }\n\n    setPosts((previous) =>\n      previous.map((post) => {\n        if (post.id !== postId) {\n          return post;\n        }\n\n        if (type === 'likes') {\n          return {\n            ...post,\n            likeCount: payload.likeCount,\n            hasLiked: payload.hasLiked,\n          };\n        }\n\n        if (type === 'comments') {\n          return {\n            ...post,\n            commentCount: payload.commentCount,\n          };\n        }\n\n        return {\n          ...post,\n          ...payload,\n        };\n      })\n    );\n  }, []);\n\n  const handleLoadMore = () => {\n    if (!hasMore || isLoadingMore) {\n      return;\n    }\n    loadPosts(page + 1, true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-8\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex flex-col md:flex-row gap-6\">\n          {/* Main content */}\n          <div className=\"md:w-2/3\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-6\">Community Feed</h1>\n\n            <CreatePost onPostCreated={handlePostCreated} />\n\n            {fetchError && (\n              <div className=\"mb-4 rounded-lg border border-red-200 bg-red-50 px-4 py-3 text-sm text-red-700 dark:border-red-900/50 dark:bg-red-950/60 dark:text-red-300\">\n                {fetchError}\n              </div>\n            )}\n\n            {loading ? (\n              <div className=\"rounded-xl border border-gray-100 bg-white px-4 py-6 text-center text-gray-600 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-300\">\n                Loading latest posts...\n              </div>\n            ) : posts.length === 0 ? (\n              <div className=\"rounded-xl border border-dashed border-gray-200 bg-white px-6 py-10 text-center text-gray-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-300\">\n                <h3 className=\"text-lg font-semibold text-gray-700 dark:text-gray-100\">No posts yet</h3>\n                <p className=\"mt-2 text-sm\">Be the first to share a culinary creation with the community!</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {posts.map((post) => (\n                  <PostCard key={post.id} post={post} onPostUpdated={handlePostUpdated} />\n                ))}\n              </div>\n            )}\n\n            {hasMore && !loading && (\n              <div className=\"mt-6 text-center\">\n                <button\n                  type=\"button\"\n                  onClick={handleLoadMore}\n                  className=\"inline-flex items-center justify-center rounded-full border border-olive-300 px-6 py-2 text-sm font-medium text-olive-700 transition hover:-translate-y-0.5 hover:border-olive-400 hover:bg-olive-50 dark:border-gray-700 dark:text-gray-200 dark:hover:border-gray-500 dark:hover:bg-gray-800 disabled:cursor-not-allowed disabled:opacity-60\"\n                  disabled={isLoadingMore}\n                >\n                  {isLoadingMore ? 'Loading more...' : 'Load more posts'}\n                </button>\n              </div>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"md:w-1/3 space-y-6\">\n            {/* Trending Recipes */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden border border-gray-100 dark:border-gray-700\">\n              <div className=\"p-4 border-b border-gray-100 dark:border-gray-700\">\n                <h3 className=\"font-semibold text-lg text-gray-900 dark:text-white\">Trending Recipes</h3>\n              </div>\n              <div className=\"divide-y divide-gray-100 dark:divide-gray-700\">\n                {trendingRecipes.map((recipe) => (\n                  <Link key={recipe.id} href={`/recipes/${recipe.id}`} className=\"block p-4 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"h-12 w-12 rounded-md overflow-hidden bg-gray-200 dark:bg-gray-600\">\n                        <img\n                          src={recipe.image}\n                          alt={recipe.name}\n                          className=\"h-full w-full object-cover\"\n                          onError={(e) => {\n                            e.target.onerror = null;\n                            e.target.style.display = 'none';\n                            e.target.parentElement.innerHTML = '<div class=\"h-full w-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center text-white font-bold text-xs\">' + recipe.name.charAt(0) + '</div>';\n                          }}\n                        />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 dark:text-white\">{recipe.name}</h4>\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400\">{recipe.likes} likes</p>\n                      </div>\n                    </div>\n                  </Link>\n                ))}\n              </div>\n            </div>\n            \n            {/* Suggested to Follow */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden border border-gray-100 dark:border-gray-700\">\n              <div className=\"p-4 border-b border-gray-100 dark:border-gray-700\">\n                <h3 className=\"font-semibold text-lg text-gray-900 dark:text-white\">Suggested Chefs</h3>\n              </div>\n              <div className=\"divide-y divide-gray-100 dark:divide-gray-700\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"p-4 flex items-center justify-between hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"h-10 w-10 rounded-full bg-gray-200 dark:bg-gray-600\"></div>\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 dark:text-white\">Chef Name {i}</h4>\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400\">@chefname{i}</p>\n                      </div>\n                    </div>\n                    <button className=\"text-sm font-medium text-green-600 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300\">\n                      Follow\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            {/* Community Guidelines */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden border border-gray-100 dark:border-gray-700 p-4 text-sm text-gray-600 dark:text-gray-300 space-y-2\">\n              <h3 className=\"font-semibold text-gray-900 dark:text-white mb-2\">Community Guidelines</h3>\n              <p>• Be respectful and kind to others</p>\n              <p>• Share your own original content</p>\n              <p>• Give credit when using others’ recipes</p>\n              <p>• No spam or self-promotion</p>\n              <p>• Report any inappropriate content</p>\n              <Dialog>\n                <DialogTrigger asChild>\n                  <button className=\"inline-block text-green-600 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300 text-sm mt-2\">\n                    Read full guidelines\n                  </button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700\">\n                  <DialogHeader>\n                    <DialogTitle>Community Guidelines</DialogTitle>\n                    <DialogDescription>\n                      Please review these principles to keep SavoryFlavors welcoming for everyone.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4 text-sm text-gray-700 dark:text-gray-200 leading-relaxed\">\n                    <section>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white mb-1\">1. Respect is non-negotiable</h4>\n                      <p>\n                        Treat every member with kindness. Harassment, hate speech, threats, or discriminatory language will not be tolerated and can result in removal from the community.\n                      </p>\n                    </section>\n                    <section>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white mb-1\">2. Share authentic, original work</h4>\n                      <p>\n                        Post recipes, photos, and tips that you created or have permission to share. If you adapt inspiration from elsewhere, credit the source so others can explore it too.\n                      </p>\n                    </section>\n                    <section>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white mb-1\">3. Celebrate constructive feedback</h4>\n                      <p>\n                        Support fellow cooks with thoughtful suggestions and encouragement. Critique should be helpful, never hurtful. Remember there is a person behind every post.\n                      </p>\n                    </section>\n                    <section>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white mb-1\">4. Keep promotions relevant</h4>\n                      <p>\n                        Occasional mentions of your blog or business are welcome when they add value to the conversation. Repeated self-promotion, affiliate links, or spam will be removed.\n                      </p>\n                    </section>\n                    <section>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white mb-1\">5. Protect everyone&rsquo;s safety</h4>\n                      <p>\n                        Avoid sharing sensitive personal information—yours or someone else&rsquo;s. Report suspicious activity, scams, or posts that could put community members at risk.\n                      </p>\n                    </section>\n                    <section>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white mb-1\">6. Follow the law</h4>\n                      <p>\n                        Illegal activities, including sharing copyrighted material without permission or encouraging unsafe practices, are strictly prohibited.\n                      </p>\n                    </section>\n                    <section>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white mb-1\">7. Help us improve</h4>\n                      <p>\n                        Moderators review reports daily but cannot see everything. Use the report button or contact support if you notice content that breaks these guidelines.\n                      </p>\n                    </section>\n                  </div>\n                  <DialogFooter className=\"justify-end\">\n                    <DialogClose asChild>\n                      <button className=\"rounded-md bg-olive-600 px-4 py-2 text-sm font-semibold text-white hover:bg-olive-700 transition-colors\">\n                        I understand\n                      </button>\n                    </DialogClose>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\cuisines\\page.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInitialData'. Either include it or remove the dependency array.","line":115,"column":6,"nodeType":"ArrayExpression","endLine":115,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchInitialData]","fix":{"range":[4110,4112],"text":"[fetchInitialData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'cuisines' and 'featuredCuisines'. Either include them or remove the dependency array.","line":224,"column":6,"nodeType":"ArrayExpression","endLine":224,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [loading, cuisines.length, cuisines, featuredCuisines]","fix":{"range":[7505,7531],"text":"[loading, cuisines.length, cuisines, featuredCuisines]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'featuredCuisines'. Either include it or remove the dependency array.","line":248,"column":6,"nodeType":"ArrayExpression","endLine":248,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [featuredCuisines, featuredCuisinesCounts]","fix":{"range":[8174,8198],"text":"[featuredCuisines, featuredCuisinesCounts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Globe, ChefHat, Clock, Users, Star, ArrowRight, Utensils } from 'lucide-react'\nimport Image from 'next/image'\nimport Link from 'next/link'\n\nexport default function Cuisines() {\n  const [cuisines, setCuisines] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [featuredCuisinesCounts, setFeaturedCuisinesCounts] = useState({})\n  const [allCuisinesCounts, setAllCuisinesCounts] = useState({})\n  const [countsLoading, setCountsLoading] = useState(false)\n\n  // Map cuisine name -> cuisine hero image in /public/images\n  const getCuisineImage = (name) => {\n    const map = {\n      'Italian': '/images/italian.png',\n      'Mexican': '/images/mexican.png',\n      'Chinese': '/images/china.png',\n      'Indian': '/images/indian.png',\n      'Japanese': '/images/japanese.png',\n      'Thai': '/images/thailand.png',\n    }\n    return map[name] || '/placeholder-recipe.jpg'\n  }\n\n  // Map cuisine (area) -> flag image in /public/images\n  const getCuisineFlagImage = (name) => {\n    const map = {\n      'American': '/images/USFlag.png',\n      'British': '/images/BritFlag.png',\n      'Canadian': '/images/CanFlag.png',\n      'Chinese': '/images/CHFlag.png',\n      'Croatian': '/images/CroatiaFlag.png',\n      'Dutch': '/images/DutchFlag.png',\n      'Egyptian': '/images/EgyptFlag.png',\n      'French': '/images/FrenchFlag.png',\n      'Greek': '/images/GreekFlag.png',\n      'Indian': '/images/IndianFlag.png',\n      'Irish': '/images/IrishFlag.png',\n      'Italian': '/images/ItalyFlag.png',\n      'Jamaican': '/images/JamaicaFlag.png',\n      'Japanese': '/images/JapFlag.png',\n      'Kenyan': '/images/KenyaFlag.png',\n      'Malaysian': '/images/MalayFlag.png',\n      'Mexican': '/images/MexicoFlag.png',\n      'Moroccan': '/images/MoroccanFlag.png',\n      'Polish': '/images/Polish.png',\n      'Portuguese': '/images/PortugueseFlag.png',\n      'Russian': '/images/RussianFlag.png',\n      'Spanish': '/images/SpanishFlag.png',\n      'Thai': '/images/ThaiFlag.png',\n      'Tunisian': '/images/TunisiaFlag.png',\n      'Turkish': '/images/TurksFlag.png',\n      'Vietnamese': '/images/VietnamFlag.png',\n      'Filipino': '/images/PHFlag.png',\n      // Newly added\n      'Ukrainian': '/images/UkraineFlag.png',\n      'Uruguayan': '/images/UruguayFlag.png',\n      // Fallback aliases if API returns country instead of demonym\n      'Ukraine': '/images/UkraineFlag.png',\n      'Uruguay': '/images/UruguayFlag.png',\n    }\n    return map[name] || null\n  }\n\n  const [featuredCuisines, setFeaturedCuisines] = useState([\n    {\n      name: 'Italian',\n      description: 'Pasta, pizza, and Mediterranean flavors',\n      color: 'bg-red-50 border-red-200',\n      textColor: 'text-red-700',\n      recipeCount: 'Loading...' // Will be updated with actual count\n    },\n    {\n      name: 'Mexican',\n      description: 'Spicy, vibrant, and full of flavor',\n      color: 'bg-green-50 border-green-200',\n      textColor: 'text-green-700',\n      recipeCount: 'Loading...' // Will be updated with actual count\n    },\n    {\n      name: 'Chinese',\n      description: 'Ancient techniques and diverse regional cuisines',\n      color: 'bg-yellow-50 border-yellow-200',\n      textColor: 'text-yellow-700',\n      recipeCount: 'Loading...' // Will be updated with actual count\n    },\n    {\n      name: 'Indian',\n      description: 'Aromatic spices and rich curries',\n      color: 'bg-orange-50 border-orange-200',\n      textColor: 'text-orange-700',\n      recipeCount: 'Loading...' // Will be updated with actual count\n    },\n    {\n      name: 'Japanese',\n      description: 'Fresh, delicate, and artfully presented',\n      color: 'bg-blue-50 border-blue-200',\n      textColor: 'text-blue-700',\n      recipeCount: 'Loading...' // Will be updated with actual count\n    },\n    {\n      name: 'Thai',\n      description: 'Sweet, sour, salty, and spicy harmony',\n      color: 'bg-purple-50 border-purple-200',\n      textColor: 'text-purple-700',\n      recipeCount: 'Loading...' // Will be updated with actual count\n    }\n  ])\n\n  useEffect(() => {\n    fetchInitialData()\n  }, [])\n\n  const fetchInitialData = async () => {\n    setLoading(true)\n    try {\n      // Fetch cuisines\n      const cuisinesResponse = await fetch('/api/mealdb?type=cuisines')\n      if (cuisinesResponse.ok) {\n        const cuisinesData = await cuisinesResponse.json()\n        setCuisines(cuisinesData)\n      } else {\n        // Fallback to mock data if API fails\n        console.warn('MealDB API failed, using fallback data')\n        setCuisines(getMockCuisines())\n      }\n    } catch (error) {\n      console.error('Error fetching cuisines data:', error)\n      // Use fallback data on any error\n      setCuisines(getMockCuisines())\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchMealDbCounts = async (names = [], validAreasSet = new Set()) => {\n    const uniqueNames = [...new Set(names.filter(Boolean))]\n    if (uniqueNames.length === 0) {\n      return {}\n    }\n\n    const counts = {}\n    const fetchTargets = []\n\n    uniqueNames.forEach((rawName) => {\n      const cuisineName = rawName.toString().trim()\n      if (!cuisineName) {\n        counts[cuisineName] = { mealdb: 0, total: 0 }\n        return\n      }\n\n      const lowerName = cuisineName.toLowerCase()\n      if (validAreasSet.size > 0 && !validAreasSet.has(lowerName)) {\n        counts[cuisineName] = { mealdb: 0, total: 0 }\n        return\n      }\n\n      fetchTargets.push({ cuisineName })\n    })\n\n    if (fetchTargets.length === 0) {\n      return counts\n    }\n\n    const results = await Promise.allSettled(\n      fetchTargets.map(async ({ cuisineName }) => {\n        const response = await fetch(`/api/mealdb?type=filterByArea&area=${encodeURIComponent(cuisineName)}`)\n        if (!response.ok) {\n          throw new Error(`MealDB responded with status ${response.status}`)\n        }\n        const data = await response.json()\n        return Array.isArray(data) ? data.length : Array.isArray(data?.meals) ? data.meals.length : 0\n      })\n    )\n\n    results.forEach((result, index) => {\n      const { cuisineName } = fetchTargets[index]\n      if (result.status === 'fulfilled') {\n        const mealCount = result.value ?? 0\n        counts[cuisineName] = {\n          mealdb: mealCount,\n          total: mealCount\n        }\n      } else {\n        const error = result.reason instanceof Error ? result.reason : null\n        console.warn(`Failed to fetch MealDB count for ${cuisineName}:`, error?.message || result.reason)\n        counts[cuisineName] = {\n          mealdb: 0,\n          total: 0\n        }\n      }\n    })\n\n    return counts\n  }\n\n  useEffect(() => {\n    if (!loading && cuisines.length > 0) {\n      const cuisineAreas = cuisines.map(cuisine => cuisine.strArea)\n      const mealDbAreasSet = new Set(cuisineAreas.map(area => area?.toString().toLowerCase()))\n      const featuredNames = featuredCuisines.map(cuisine => cuisine.name)\n\n      const loadCounts = async () => {\n        setCountsLoading(true)\n        try {\n          const [featuredCounts, allCounts] = await Promise.all([\n            fetchMealDbCounts(featuredNames, mealDbAreasSet),\n            fetchMealDbCounts(cuisineAreas, mealDbAreasSet)\n          ])\n          setFeaturedCuisinesCounts(featuredCounts)\n          setAllCuisinesCounts(allCounts)\n        } catch (error) {\n          console.warn('Failed to refresh MealDB cuisine counts:', error)\n        } finally {\n          setCountsLoading(false)\n        }\n      }\n\n      loadCounts()\n    }\n  }, [loading, cuisines.length])\n\n  useEffect(() => {\n    // Update featuredCuisines with actual counts\n    if (Object.keys(featuredCuisinesCounts).length > 0) {\n      const updatedCuisines = featuredCuisines.map(cuisine => {\n        const counts = featuredCuisinesCounts[cuisine.name]\n        if (counts) {\n          const { mealdb, total } = counts\n          let displayText = `${total} recipes`\n\n          if (mealdb > 0) {\n            displayText = `${mealdb} recipes`\n          }\n\n          return {\n            ...cuisine,\n            recipeCount: displayText\n          }\n        }\n        return cuisine\n      })\n      setFeaturedCuisines(updatedCuisines)\n    }\n  }, [featuredCuisinesCounts])\n\n  // Mock cuisines data as fallback\n  const getMockCuisines = () => {\n    return [\n      { strArea: 'Italian', strAreaCode: 'IT' },\n      { strArea: 'Mexican', strAreaCode: 'MX' },\n      { strArea: 'Chinese', strAreaCode: 'CN' },\n      { strArea: 'Indian', strAreaCode: 'IN' },\n      { strArea: 'Japanese', strAreaCode: 'JP' },\n      { strArea: 'Thai', strAreaCode: 'TH' },\n      { strArea: 'French', strAreaCode: 'FR' },\n      { strArea: 'Greek', strAreaCode: 'GR' },\n      { strArea: 'Spanish', strAreaCode: 'ES' },\n      { strArea: 'Turkish', strAreaCode: 'TR' },\n      { strArea: 'American', strAreaCode: 'US' },\n      { strArea: 'British', strAreaCode: 'GB' }\n    ]\n  }\n\n  // Legacy helper replaced with image-based flags (kept if needed elsewhere)\n  const getCuisineFlag = (cuisineName) => getCuisineFlagImage(cuisineName) || '🌍'\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen pt-20 flex items-center justify-center bg-gray-50 dark:bg-gray-950\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-olive-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-300\">Loading cuisines...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen pt-20 bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">World Cuisines</h1>\n          <p className=\"text-lg text-gray-600 dark:text-gray-300\">\n            Explore authentic recipes from around the globe\n          </p>\n        </div>\n\n        {/* Featured Cuisines */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">Featured Cuisines</h2>\n          {countsLoading && (\n            <div className=\"flex items-center justify-center mb-6 text-gray-600 dark:text-gray-300\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-olive-600 mr-2\"></div>\n              <span className=\"text-gray-600 dark:text-gray-300\">Loading recipe counts...</span>\n            </div>\n          )}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {featuredCuisines.map((cuisine) => (\n              <div\n                key={cuisine.name}\n                className={`bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow border-2 dark:border-gray-700 ${cuisine.color}`}\n              >\n                <div className=\"relative w-full h-48 bg-gray-200 dark:bg-gray-700 flex items-center justify-center\">\n                  <Image\n                    src={getCuisineImage(cuisine.name)}\n                    alt={`${cuisine.name} cuisine`}\n                    width={400}\n                    height={192}\n                    className=\"w-full h-48 object-cover hover:scale-105 transition-transform duration-300\"\n                    priority={cuisine.name === 'Italian'}\n                  />\n                  {getCuisineFlagImage(cuisine.name) && (\n                    <div className=\"absolute top-4 left-4 drop-shadow-lg\">\n                      <Image src={getCuisineFlagImage(cuisine.name)} alt={`${cuisine.name} flag`} width={36} height={24} className=\"rounded shadow-sm\" />\n                    </div>\n                  )}\n                  <div\n                    className={`absolute top-4 right-4 px-3 py-1 rounded-full text-sm font-medium text-gray-900 dark:text-gray-100 shadow-lg ${cuisine.color.replace('bg-', 'bg-').replace('border-', '')} dark:bg-gray-900/70`}\n                  >\n                    {cuisine.recipeCount}\n                  </div>\n                </div>\n\n                <div className=\"p-6\">\n                  <h3 className={`text-xl font-bold mb-2 ${cuisine.textColor} dark:text-gray-100`}>\n                    {cuisine.name} Cuisine\n                  </h3>\n                  <p className=\"text-gray-600 dark:text-gray-300 text-sm mb-4\">\n                    {cuisine.description}\n                  </p>\n                  <Link\n                    href={{\n                      pathname: '/recipes',\n                      query: {\n                        cuisine: cuisine.name,\n                        source: 'mealdb'\n                      }\n                    }}\n                    className={`inline-flex items-center gap-2 px-4 py-2 rounded-lg transition-all duration-300 ${cuisine.color} hover:opacity-90 text-white font-medium dark:bg-olive-600 dark:hover:bg-olive-500 dark:border-none`}\n                  >\n                    <ChefHat className=\"h-4 w-4\" />\n                    Explore Recipes\n                    <ArrowRight className=\"h-4 w-4\" />\n                  </Link>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* All Cuisines Grid */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">All Cuisines</h2>\n\n          {cuisines.length === 0 ? (\n            <div className=\"text-center py-16\">\n              <div className=\"text-gray-400 mb-4\">\n                <Globe className=\"h-16 w-16 mx-auto\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-600 dark:text-gray-300 mb-2\">No cuisines available</h3>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                Please check back later for more culinary inspiration.\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4\">\n              {cuisines.map((cuisine) => (\n                <Link\n                  key={cuisine.strArea}\n                  href={{\n                    pathname: '/recipes',\n                    query: {\n                      cuisine: cuisine.strArea,\n                      source: 'mealdb'\n                    }\n                  }}\n                  className=\"group\"\n                >\n                  <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4 hover:shadow-md transition-all group-hover:border-olive-300\">\n                    <div className=\"text-center\">\n                      <div className=\"mb-3 group-hover:scale-110 transition-transform flex items-center justify-center h-10\">\n                        {getCuisineFlagImage(cuisine.strArea) ? (\n                          <Image src={getCuisineFlagImage(cuisine.strArea)} alt={`${cuisine.strArea} flag`} width={40} height={28} className=\"rounded shadow-sm\" />\n                        ) : (\n                          <Globe className=\"h-6 w-6 text-gray-500 dark:text-gray-300\" />\n                        )}\n                      </div>\n                      <h3 className=\"font-semibold text-gray-900 dark:text-gray-100 group-hover:text-olive-600 transition-colors\">\n                        {cuisine.strArea}\n                      </h3>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\n                        {(() => {\n                          const counts = allCuisinesCounts[cuisine.strArea]\n                          const total = counts?.total || 0\n                          if (total > 0) {\n                            return `${total} recipes`\n                          }\n                          return 'Traditional dishes'\n                        })()}\n                      </p>\n                    </div>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"bg-gradient-to-r from-olive-600 to-olive-700 rounded-xl p-8 text-white text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Discover Your Next Favorite Dish</h2>\n          <p className=\"text-lg mb-6 opacity-90\">\n            Explore authentic recipes from {cuisines.length} different cuisines around the world\n            {Object.keys(allCuisinesCounts).length > 0 && (\n              <span className=\"block mt-2 text-sm\">\n                Total recipes available: {\n                  Object.values(allCuisinesCounts).reduce((total, counts) => total + (counts?.total || 0), 0)\n                } across {Object.values(allCuisinesCounts).filter(counts => counts?.total > 0).length} cuisines\n              </span>\n            )}\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link\n              href=\"/recipes\"\n              className=\"bg-white text-olive-600 px-6 py-3 rounded-lg hover:bg-gray-100 transition-colors font-semibold\"\n            >\n              Browse All Recipes\n            </Link>\n            <Link\n              href=\"/recipes/create\"\n              className=\"border-2 border-white text-white px-6 py-3 rounded-lg hover:bg-white hover:text-olive-600 transition-colors font-semibold\"\n            >\n              Share Your Recipe\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\debug-session\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\discover\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\favorites\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\fitsavory\\calendar\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\fitsavory\\foods\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\fitsavory\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\fitsavory\\meals\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\fitsavory\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\fitsavory\\plans\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\fitsavory\\upload\\page.js","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":485,"column":23,"nodeType":"JSXOpeningElement","endLine":489,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useMemo, useState } from 'react'\nimport {\n  Upload,\n  Save,\n  X,\n  Plus,\n  Trash2,\n  Camera,\n  FileText,\n  Calculator\n} from 'lucide-react'\n\nexport default function UploadRecipe() {\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    category: '',\n    cuisine: '',\n    prepTime: '',\n    cookTime: '',\n    servings: '',\n    difficulty: 'medium',\n    ingredients: [{ name: '', amount: '', unit: '' }],\n    instructions: [{ step: 1, instruction: '' }],\n    nutrition: {\n      calories: '',\n      protein: '',\n      carbs: '',\n      fat: '',\n      fiber: '',\n      sugar: ''\n    },\n    tags: [],\n    image: null\n  })\n  const [currentStep, setCurrentStep] = useState(1)\n  const [isCalculatingNutrition, setIsCalculatingNutrition] = useState(false)\n  const [calculationError, setCalculationError] = useState(null)\n  const [calculationResults, setCalculationResults] = useState(null)\n  const [imagePreview, setImagePreview] = useState(null)\n\n  const steps = [\n    { id: 1, name: 'Basic Info', icon: FileText },\n    { id: 2, name: 'Ingredients', icon: Plus },\n    { id: 3, name: 'Instructions', icon: FileText },\n    { id: 4, name: 'Nutrition', icon: Calculator },\n    { id: 5, name: 'Review', icon: Upload }\n  ]\n\n  const categories = [\n    'Breakfast', 'Lunch', 'Dinner', 'Snack', 'Dessert', 'Beverage', 'Appetizer', 'Main Course', 'Side Dish'\n  ]\n\n  const cuisines = [\n    'American', 'Italian', 'Mexican', 'Chinese', 'Japanese', 'Thai', 'Indian', 'French', 'Mediterranean', 'Other'\n  ]\n\n  const difficulties = [\n    { value: 'easy', label: 'Easy', description: '30 mins or less' },\n    { value: 'medium', label: 'Medium', description: '30-60 mins' },\n    { value: 'hard', label: 'Hard', description: '60+ mins' }\n  ]\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const handleIngredientChange = (index, field, value) => {\n    const updatedIngredients = [...formData.ingredients]\n    updatedIngredients[index] = {\n      ...updatedIngredients[index],\n      [field]: value\n    }\n    setFormData(prev => ({\n      ...prev,\n      ingredients: updatedIngredients\n    }))\n  }\n\n  const addIngredient = () => {\n    setFormData(prev => ({\n      ...prev,\n      ingredients: [...prev.ingredients, { name: '', amount: '', unit: '' }]\n    }))\n  }\n\n  const removeIngredient = (index) => {\n    if (formData.ingredients.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        ingredients: prev.ingredients.filter((_, i) => i !== index)\n      }))\n    }\n  }\n\n  const handleInstructionChange = (index, value) => {\n    const updatedInstructions = [...formData.instructions]\n    updatedInstructions[index] = {\n      step: index + 1,\n      instruction: value\n    }\n    setFormData(prev => ({\n      ...prev,\n      instructions: updatedInstructions\n    }))\n  }\n\n  const addInstruction = () => {\n    setFormData(prev => ({\n      ...prev,\n      instructions: [...prev.instructions, { step: prev.instructions.length + 1, instruction: '' }]\n    }))\n  }\n\n  const removeInstruction = (index) => {\n    if (formData.instructions.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        instructions: prev.instructions.filter((_, i) => i !== index).map((inst, i) => ({\n          ...inst,\n          step: i + 1\n        }))\n      }))\n    }\n  }\n\n  const handleNutritionChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      nutrition: {\n        ...prev.nutrition,\n        [field]: value\n      }\n    }))\n  }\n\n  const servingsCount = useMemo(() => {\n    const parsed = Number.parseFloat(formData.servings)\n    return Number.isFinite(parsed) && parsed > 0 ? parsed : 1\n  }, [formData.servings])\n\n  const buildCalorieNinjasQuery = () => {\n    const parts = formData.ingredients\n      .map((ingredient) => {\n        const name = ingredient?.name?.trim()\n        if (!name) return null\n\n        const amount = ingredient?.amount?.toString().trim()\n        const unit = ingredient?.unit?.toString().trim()\n\n        if (amount && unit) {\n          return `${amount} ${unit} ${name}`\n        }\n        if (amount) {\n          return `${amount} ${name}`\n        }\n        return name\n      })\n      .filter(Boolean)\n\n    return parts.join('\\n')\n  }\n\n  const handleAutoCalculateNutrition = async () => {\n    const query = buildCalorieNinjasQuery()\n\n    if (!query) {\n      setCalculationError('Add at least one ingredient with a name before auto-calculating nutrition.')\n      return\n    }\n\n    setIsCalculatingNutrition(true)\n    setCalculationError(null)\n\n    try {\n      const response = await fetch(`/api/nutrition/calorieninjas?query=${encodeURIComponent(query)}`)\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}))\n        throw new Error(errorData.error || 'Failed to calculate nutrition automatically.')\n      }\n\n      const data = await response.json()\n      const items = Array.isArray(data.items) ? data.items : data\n\n      if (!Array.isArray(items) || !items.length) {\n        throw new Error('No nutrition data returned for these ingredients.')\n      }\n\n      const totals = items.reduce(\n        (acc, item) => {\n          acc.calories += item.calories ?? 0\n          acc.protein += item.protein_g ?? 0\n          acc.carbs += item.carbohydrates_total_g ?? 0\n          acc.fat += item.fat_total_g ?? 0\n          acc.fiber += item.fiber_g ?? 0\n          acc.sugar += item.sugar_g ?? 0\n          return acc\n        },\n        { calories: 0, protein: 0, carbs: 0, fat: 0, fiber: 0, sugar: 0 }\n      )\n\n      const perServing = {\n        calories: Math.round(totals.calories / servingsCount),\n        protein: Number((totals.protein / servingsCount).toFixed(1)),\n        carbs: Number((totals.carbs / servingsCount).toFixed(1)),\n        fat: Number((totals.fat / servingsCount).toFixed(1)),\n        fiber: Number((totals.fiber / servingsCount).toFixed(1)),\n        sugar: Number((totals.sugar / servingsCount).toFixed(1))\n      }\n\n      setFormData((prev) => ({\n        ...prev,\n        nutrition: {\n          calories: perServing.calories.toString(),\n          protein: perServing.protein.toString(),\n          carbs: perServing.carbs.toString(),\n          fat: perServing.fat.toString(),\n          fiber: perServing.fiber.toString(),\n          sugar: perServing.sugar.toString()\n        }\n      }))\n\n      setCalculationResults({\n        query,\n        servings: servingsCount,\n        totals,\n        perServing,\n        items\n      })\n    } catch (error) {\n      console.error('CalorieNinjas calculation failed:', error)\n      setCalculationError(error.message || 'Unable to calculate nutrition automatically.')\n      setCalculationResults(null)\n    } finally {\n      setIsCalculatingNutrition(false)\n    }\n  }\n\n  useEffect(() => {\n    return () => {\n      if (imagePreview) {\n        URL.revokeObjectURL(imagePreview)\n      }\n    }\n  }, [imagePreview])\n\n  const handleImageUpload = (event) => {\n    const file = event.target.files[0]\n    if (file) {\n      if (imagePreview) {\n        URL.revokeObjectURL(imagePreview)\n      }\n\n      const previewUrl = URL.createObjectURL(file)\n\n      setFormData(prev => ({\n        ...prev,\n        image: file\n      }))\n\n      setImagePreview(previewUrl)\n    }\n  }\n\n  const handleRemoveImage = () => {\n    if (imagePreview) {\n      URL.revokeObjectURL(imagePreview)\n    }\n\n    setImagePreview(null)\n    setFormData(prev => ({\n      ...prev,\n      image: null\n    }))\n  }\n\n  const nextStep = () => {\n    if (currentStep < steps.length) {\n      setCurrentStep(currentStep + 1)\n    }\n  }\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1)\n    }\n  }\n\n  const isStepValid = () => {\n    switch (currentStep) {\n      case 1:\n        return formData.title && formData.description && formData.category && formData.cuisine\n      case 2:\n        return formData.ingredients.every(ing => ing.name && ing.amount)\n      case 3:\n        return formData.instructions.every(inst => inst.instruction)\n      case 4:\n        return formData.nutrition.calories && formData.nutrition.protein\n      default:\n        return true\n    }\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Upload Recipe</h1>\n        <p className=\"text-gray-600 mt-1\">Share your favorite recipes with nutrition information</p>\n      </div>\n\n      {/* Progress Steps */}\n      <div className=\"mb-8\">\n        <div className=\"flex justify-between items-center\">\n          {steps.map((step, index) => {\n            const Icon = step.icon\n            const isActive = currentStep === step.id\n            const isCompleted = currentStep > step.id\n\n            return (\n              <div key={step.id} className=\"flex flex-col items-center\">\n                <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                  isCompleted ? 'bg-green-500 text-white' :\n                  isActive ? 'bg-olive-600 text-white' :\n                  'bg-gray-200 text-gray-500'\n                }`}>\n                  {isCompleted ? (\n                    <span>✓</span>\n                  ) : (\n                    <Icon className=\"h-5 w-5\" />\n                  )}\n                </div>\n                <span className={`mt-2 text-xs font-medium ${\n                  isActive ? 'text-olive-600' : 'text-gray-500'\n                }`}>\n                  {step.name}\n                </span>\n              </div>\n            )\n          })}\n        </div>\n        <div className=\"mt-4 bg-gray-200 rounded-full h-2\">\n          <div\n            className=\"bg-olive-600 h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${(currentStep / steps.length) * 100}%` }}\n          ></div>\n        </div>\n      </div>\n\n      {/* Form Content */}\n      <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n        {currentStep === 1 && (\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Recipe Title *\n              </label>\n              <input\n                type=\"text\"\n                value={formData.title}\n                onChange={(e) => handleInputChange('title', e.target.value)}\n                placeholder=\"e.g., Grandma's Chocolate Chip Cookies\"\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Description *\n              </label>\n              <textarea\n                rows={4}\n                value={formData.description}\n                onChange={(e) => handleInputChange('description', e.target.value)}\n                placeholder=\"Describe your recipe, its origin, or why you love it...\"\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Category *\n                </label>\n                <select\n                  value={formData.category}\n                  onChange={(e) => handleInputChange('category', e.target.value)}\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                >\n                  <option value=\"\">Select Category</option>\n                  {categories.map(cat => (\n                    <option key={cat} value={cat}>{cat}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Cuisine *\n                </label>\n                <select\n                  value={formData.cuisine}\n                  onChange={(e) => handleInputChange('cuisine', e.target.value)}\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                >\n                  <option value=\"\">Select Cuisine</option>\n                  {cuisines.map(cuisine => (\n                    <option key={cuisine} value={cuisine}>{cuisine}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Difficulty\n                </label>\n                <select\n                  value={formData.difficulty}\n                  onChange={(e) => handleInputChange('difficulty', e.target.value)}\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                >\n                  {difficulties.map(diff => (\n                    <option key={diff.value} value={diff.value}>\n                      {diff.label} - {diff.description}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Prep Time (minutes)\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.prepTime}\n                  onChange={(e) => handleInputChange('prepTime', e.target.value)}\n                  placeholder=\"15\"\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Cook Time (minutes)\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.cookTime}\n                  onChange={(e) => handleInputChange('cookTime', e.target.value)}\n                  placeholder=\"30\"\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Servings\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.servings}\n                  onChange={(e) => handleInputChange('servings', e.target.value)}\n                  placeholder=\"4\"\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Recipe Image (Optional)\n              </label>\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n                <div className=\"flex flex-col items-center justify-center\">\n                  {imagePreview ? (\n                    <div className=\"w-full\">\n                      <img\n                        src={imagePreview}\n                        alt=\"Recipe preview\"\n                        className=\"mx-auto h-48 w-full max-w-md rounded-lg object-cover shadow-md\"\n                      />\n                    </div>\n                  ) : (\n                    <Camera className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                  )}\n                  <div className=\"text-sm text-gray-600\">\n                    <label\n                      htmlFor=\"file-upload\"\n                      className=\"relative cursor-pointer bg-white rounded-md font-medium text-olive-600 hover:text-olive-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-olive-500\"\n                    >\n                      <span>{imagePreview ? 'Choose another image' : 'Upload an image'}</span>\n                      <input\n                        id=\"file-upload\"\n                        name=\"file-upload\"\n                        type=\"file\"\n                        className=\"absolute inset-0 h-full w-full cursor-pointer opacity-0\"\n                        accept=\"image/*\"\n                        onChange={(e) => handleImageUpload(e)}\n                      />\n                    </label>\n                    {!imagePreview && <p className=\"pl-1\">or drag and drop</p>}\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    PNG, JPG, GIF up to 5MB (Recommended: 800x600px)\n                  </p>\n                  {imagePreview && (\n                    <div className=\"mt-4\">\n                      <button\n                        type=\"button\"\n                        onClick={handleRemoveImage}\n                        className=\"text-sm text-red-600 hover:text-red-800\"\n                      >\n                        Remove image\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <p className=\"mt-1 text-xs text-gray-500\">\n                A default image will be used if none is provided\n              </p>\n            </div>\n          </div>\n        )}\n\n        {currentStep === 2 && (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Ingredients</h3>\n            {formData.ingredients.map((ingredient, index) => (\n              <div key={index} className=\"flex gap-4 items-end\">\n                <div className=\"flex-1\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Ingredient Name *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={ingredient.name}\n                    onChange={(e) => handleIngredientChange(index, 'name', e.target.value)}\n                    placeholder=\"e.g., All-purpose flour\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                  />\n                </div>\n                <div className=\"w-24\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Amount *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={ingredient.amount}\n                    onChange={(e) => handleIngredientChange(index, 'amount', e.target.value)}\n                    placeholder=\"2\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                  />\n                </div>\n                <div className=\"w-20\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Unit\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={ingredient.unit}\n                    onChange={(e) => handleIngredientChange(index, 'unit', e.target.value)}\n                    placeholder=\"cups\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                  />\n                </div>\n                {formData.ingredients.length > 1 && (\n                  <button\n                    onClick={() => removeIngredient(index)}\n                    className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </button>\n                )}\n              </div>\n            ))}\n            <button\n              onClick={addIngredient}\n              className=\"w-full py-2 px-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-olive-500 hover:text-olive-600 transition-colors\"\n            >\n              <Plus className=\"h-4 w-4 inline mr-2\" />\n              Add Ingredient\n            </button>\n          </div>\n        )}\n\n        {currentStep === 3 && (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Instructions</h3>\n            {formData.instructions.map((instruction, index) => (\n              <div key={index} className=\"flex gap-4\">\n                <div className=\"flex-shrink-0 w-8 h-8 bg-olive-100 text-olive-800 rounded-full flex items-center justify-center text-sm font-medium\">\n                  {instruction.step}\n                </div>\n                <div className=\"flex-1\">\n                  <textarea\n                    rows={3}\n                    value={instruction.instruction}\n                    onChange={(e) => handleInstructionChange(index, e.target.value)}\n                    placeholder={`Step ${instruction.step}: Describe what to do...`}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                  />\n                </div>\n                {formData.instructions.length > 1 && (\n                  <button\n                    onClick={() => removeInstruction(index)}\n                    className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg self-start\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </button>\n                )}\n              </div>\n            ))}\n            <button\n              onClick={addInstruction}\n              className=\"w-full py-2 px-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-olive-500 hover:text-olive-600 transition-colors\"\n            >\n              <Plus className=\"h-4 w-4 inline mr-2\" />\n              Add Step\n            </button>\n          </div>\n        )}\n\n        {currentStep === 4 && (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Nutrition Information</h3>\n            <p className=\"text-gray-600\">\n              Enter nutrition per serving or use the CalorieNinjas auto-calculator. You can fine-tune the values manually afterwards.\n            </p>\n\n            <div className=\"flex flex-col gap-3 rounded-lg border border-dashed border-olive-200 bg-olive-50/40 p-4\">\n              <div className=\"flex flex-col gap-2 md:flex-row md:items-center md:justify-between\">\n                <div className=\"text-sm text-olive-700\">\n                  Uses your ingredient list (and servings) to estimate macros via CalorieNinjas.\n                </div>\n                <button\n                  type=\"button\"\n                  onClick={handleAutoCalculateNutrition}\n                  disabled={isCalculatingNutrition}\n                  className=\"inline-flex items-center gap-2 rounded-lg bg-olive-600 px-4 py-2 text-sm font-semibold text-white hover:bg-olive-700 disabled:cursor-not-allowed disabled:opacity-60\"\n                >\n                  <Calculator className=\"h-4 w-4\" />\n                  {isCalculatingNutrition ? 'Calculating…' : 'Auto-calculate nutrition'}\n                </button>\n              </div>\n\n              {calculationError ? (\n                <div className=\"rounded-md border border-rose-200 bg-rose-50 px-3 py-2 text-sm text-rose-600\">\n                  {calculationError}\n                </div>\n              ) : null}\n\n              {calculationResults ? (\n                <div className=\"space-y-2 text-sm text-olive-700\">\n                  <p className=\"font-medium\">\n                    Auto-calculated totals for {calculationResults.servings} serving{calculationResults.servings === 1 ? '' : 's'}:\n                  </p>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 text-olive-800\">\n                    <span>Calories: {Math.round(calculationResults.totals.calories)} total</span>\n                    <span>Protein: {calculationResults.totals.protein.toFixed(1)} g</span>\n                    <span>Carbs: {calculationResults.totals.carbs.toFixed(1)} g</span>\n                    <span>Fat: {calculationResults.totals.fat.toFixed(1)} g</span>\n                    <span>Fiber: {calculationResults.totals.fiber.toFixed(1)} g</span>\n                    <span>Sugar: {calculationResults.totals.sugar.toFixed(1)} g</span>\n                  </div>\n                  <p className=\"text-xs text-olive-500\">\n                    Values shown in the form are per serving. Adjust manually if needed.\n                  </p>\n                </div>\n              ) : null}\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Calories *\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.nutrition.calories}\n                  onChange={(e) => handleNutritionChange('calories', e.target.value)}\n                  placeholder=\"250\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Protein (g) *\n                </label>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={formData.nutrition.protein}\n                  onChange={(e) => handleNutritionChange('protein', e.target.value)}\n                  placeholder=\"12.5\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Carbohydrates (g)\n                </label>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={formData.nutrition.carbs}\n                  onChange={(e) => handleNutritionChange('carbs', e.target.value)}\n                  placeholder=\"35.2\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Fat (g)\n                </label>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={formData.nutrition.fat}\n                  onChange={(e) => handleNutritionChange('fat', e.target.value)}\n                  placeholder=\"8.7\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Fiber (g)\n                </label>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={formData.nutrition.fiber}\n                  onChange={(e) => handleNutritionChange('fiber', e.target.value)}\n                  placeholder=\"3.2\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Sugar (g)\n                </label>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={formData.nutrition.sugar}\n                  onChange={(e) => handleNutritionChange('sugar', e.target.value)}\n                  placeholder=\"15.1\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {currentStep === 5 && (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Review Your Recipe</h3>\n            <div className=\"bg-gray-50 p-6 rounded-lg\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">{formData.title}</h4>\n              <p className=\"text-gray-600 mb-4\">{formData.description}</p>\n\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-gray-500\">Category:</span>\n                  <p className=\"font-medium\">{formData.category}</p>\n                </div>\n                <div>\n                  <span className=\"text-gray-500\">Cuisine:</span>\n                  <p className=\"font-medium\">{formData.cuisine}</p>\n                </div>\n                <div>\n                  <span className=\"text-gray-500\">Prep Time:</span>\n                  <p className=\"font-medium\">{formData.prepTime} min</p>\n                </div>\n                <div>\n                  <span className=\"text-gray-500\">Servings:</span>\n                  <p className=\"font-medium\">{formData.servings}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Navigation Buttons */}\n      <div className=\"flex justify-between mt-8\">\n        <button\n          onClick={prevStep}\n          disabled={currentStep === 1}\n          className={`px-6 py-2 rounded-lg ${\n            currentStep === 1\n              ? 'bg-gray-200 text-gray-400 cursor-not-allowed'\n              : 'bg-gray-600 text-white hover:bg-gray-700'\n          }`}\n        >\n          Previous\n        </button>\n\n        <div className=\"flex space-x-3\">\n          {currentStep < steps.length ? (\n            <button\n              onClick={nextStep}\n              disabled={!isStepValid()}\n              className={`px-6 py-2 rounded-lg ${\n                isStepValid()\n                  ? 'bg-olive-600 text-white hover:bg-olive-700'\n                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n              }`}\n            >\n              Next\n            </button>\n          ) : (\n            <button className=\"bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 flex items-center space-x-2\">\n              <Save className=\"h-4 w-4\" />\n              <span>Save Recipe</span>\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\pricing\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\profile\\page.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'purchasedRecipes'. Either include it or remove the dependency array.","line":292,"column":6,"nodeType":"ArrayExpression","endLine":292,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [favorites, personalRecipes, purchasedRecipes]","fix":{"range":[9631,9659],"text":"[favorites, personalRecipes, purchasedRecipes]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Target' is not defined.","line":389,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":389,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":393,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":393,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TrendingUp' is not defined.","line":397,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":397,"endColumn":30}],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":114,"column":15,"nodeType":"JSXOpeningElement","endLine":122,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":463,"column":21,"nodeType":"JSXOpeningElement","endLine":470,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { useSession } from 'next-auth/react';\nimport {\n  Activity,\n  Bookmark,\n  ChevronRight,\n  Crown,\n  Heart,\n  MessageSquare,\n  Pencil,\n  Settings,\n  ShieldCheck,\n  Sparkles,\n  Utensils,\n} from 'lucide-react';\n\nimport { useFavorites } from '@/context/FavoritesContext';\nimport { isAuthDisabled, useMockableSession } from '@/lib/auth-utils';\n\nconst managementActions = [\n  {\n    key: 'edit-profile',\n    title: 'Edit profile',\n    description: 'Update your display name, avatar, and bio.',\n    icon: Pencil,\n  },\n  {\n    key: 'account-security',\n    title: 'Account security',\n    description: 'Manage password, two-factor authentication, and devices.',\n    icon: ShieldCheck,\n  },\n  {\n    key: 'preferences',\n    title: 'Preferences',\n    description: 'Control notifications, dietary preferences, and privacy.',\n    icon: Settings,\n  },\n];\n\nfunction formatActivityDate(dateString) {\n  if (!dateString) return 'Recently';\n  const parsed = new Date(dateString);\n  if (Number.isNaN(parsed.getTime())) return 'Recently';\n  return parsed.toLocaleDateString(undefined, {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n  });\n}\n\nfunction ProfileHeader({ session }) {\n  const userName = session?.user?.name ?? 'SavoryFlavors Member';\n  const initials = userName\n    .split(' ')\n    .map((part) => part.charAt(0).toUpperCase())\n    .slice(0, 2)\n    .join('');\n    \n  const [subscription, setSubscription] = useState(null);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n    const checkSubscription = async () => {\n      try {\n        const response = await fetch('/api/user/subscription');\n        const data = await response.json();\n        if (response.ok) {\n          setSubscription(data.status === 'active' ? data : null);\n        }\n      } catch (error) {\n        console.error('Error checking subscription:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    if (session) {\n      checkSubscription();\n    }\n  }, [session]);\n\n  return (\n    <div className=\"relative overflow-hidden rounded-3xl bg-gradient-to-br from-olive-600 to-emerald-500 text-white\">\n      <div className=\"absolute inset-0 opacity-30\">\n        <svg className=\"h-full w-full\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\">\n          <defs>\n            <linearGradient id=\"profile-grid-gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n              <stop offset=\"0%\" stopColor=\"rgba(255,255,255,0.35)\" />\n              <stop offset=\"100%\" stopColor=\"rgba(255,255,255,0)\" />\n            </linearGradient>\n          </defs>\n          <rect width=\"100%\" height=\"100%\" fill=\"url(#profile-grid-gradient)\" />\n          <g stroke=\"rgba(255,255,255,0.15)\" strokeWidth=\"1\">\n            {Array.from({ length: 12 }).map((_, index) => (\n              <line key={`h-${index}`} x1=\"0\" y1={`${index * 60}`} x2=\"100%\" y2={`${index * 60}`} />\n            ))}\n            {Array.from({ length: 12 }).map((_, index) => (\n              <line key={`v-${index}`} x1={`${index * 60}`} y1=\"0\" x2={`${index * 60}`} y2=\"100%\" />\n            ))}\n          </g>\n        </svg>\n      </div>\n\n      <div className=\"relative flex flex-col gap-6 p-8 md:flex-row md:items-end md:justify-between md:p-12\">\n        <div className=\"flex items-center gap-6\">\n          <div className=\"relative h-24 w-24 rounded-full border-4 border-white/40 bg-white/10 shadow-xl\">\n            {session?.user?.image ? (\n              // eslint-disable-next-line @next/next/no-img-element\n              <img\n                src={session.user.image}\n                alt={userName}\n                className=\"h-full w-full rounded-full object-cover\"\n                onError={(event) => {\n                  event.currentTarget.style.display = 'none';\n                  event.currentTarget.nextElementSibling.style.display = 'flex';\n                }}\n              />\n            ) : null}\n            <div className={`absolute inset-0 ${session?.user?.image ? 'hidden' : 'flex'} items-center justify-center rounded-full bg-white/20 text-3xl font-semibold`}> \n              {initials || 'SF'}\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex items-center gap-2\">\n              <p className=\"text-sm uppercase tracking-wider text-white/75\">Member profile</p>\n              {!loading && subscription && (\n                <span className=\"inline-flex items-center gap-1 rounded-full bg-gradient-to-r from-amber-400 to-yellow-500 px-2.5 py-0.5 text-xs font-medium text-amber-900\">\n                  <Sparkles className=\"h-3 w-3\" />\n                  Premium\n                </span>\n              )}\n            </div>\n            <h1 className=\"mt-2 text-3xl font-semibold md:text-4xl\">\n              {userName}\n            </h1>\n            <p className=\"mt-2 text-white/80\">{session?.user?.email ?? 'No email on file'}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function ProfilePage() {\n  const { data: session, status } = useMockableSession(useSession);\n  const router = useRouter();\n  const { favorites = [], removeFromFavorites, loading: favoritesLoading } = useFavorites();\n  const [mounted, setMounted] = useState(false);\n  const [personalRecipes, setPersonalRecipes] = useState([]);\n  const [loadingPersonalRecipes, setLoadingPersonalRecipes] = useState(false);\n  const [purchasedRecipes, setPurchasedRecipes] = useState([]);\n  const [loadingPurchasedRecipes, setLoadingPurchasedRecipes] = useState(false);\n  const [showAllPurchased, setShowAllPurchased] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    if (!mounted) return;\n    if (!session?.user) {\n      setPersonalRecipes([]);\n      setPurchasedRecipes([]);\n      setShowAllPurchased(false);\n      return;\n    }\n\n    const loadRecipes = async () => {\n      setLoadingPersonalRecipes(true);\n      setLoadingPurchasedRecipes(true);\n\n      try {\n        const response = await fetch('/api/recipes?mine=true');\n        if (!response.ok) {\n          console.warn('Failed to load personal recipes from API', await response.text());\n          setPersonalRecipes([]);\n        } else {\n          const data = await response.json();\n          const recipes = Array.isArray(data.recipes) ? data.recipes : [];\n          setPersonalRecipes(recipes);\n        }\n      } catch (error) {\n        console.error('Failed to load personal recipes from API', error);\n        setPersonalRecipes([]);\n      } finally {\n        setLoadingPersonalRecipes(false);\n      }\n\n      try {\n        const response = await fetch('/api/recipes?purchased=true');\n        if (!response.ok) {\n          console.warn('Failed to load purchased recipes from API', await response.text());\n          setPurchasedRecipes([]);\n        } else {\n          const data = await response.json();\n          const recipes = Array.isArray(data.recipes) ? data.recipes : [];\n          setPurchasedRecipes(recipes);\n          setShowAllPurchased((previous) => (recipes.length <= 4 ? false : previous));\n        }\n      } catch (error) {\n        console.error('Failed to load purchased recipes from API', error);\n        setPurchasedRecipes([]);\n      } finally {\n        setLoadingPurchasedRecipes(false);\n      }\n    };\n\n    loadRecipes();\n  }, [mounted, session]);\n\n  useEffect(() => {\n    if (!mounted) return;\n    if (!isAuthDisabled && status === 'unauthenticated') {\n      router.push('/auth/login?callbackUrl=/profile');\n    }\n  }, [mounted, router, status]);\n\n  const communityPosts = useMemo(() => {\n    if (!session) return [];\n\n    return [\n      {\n        id: 'community-post-1',\n        title: 'My go-to weeknight pasta',\n        createdAt: '2 days ago',\n        likes: 42,\n        comments: 7,\n        excerpt: 'A quick, comforting pasta dish ready in under 20 minutes with pantry staples.',\n        coverImage: '/images/community/pasta.jpg',\n      },\n      {\n        id: 'community-post-2',\n        title: '5 ingredient breakfast tacos',\n        createdAt: '1 week ago',\n        likes: 31,\n        comments: 4,\n        excerpt: 'Soft tortillas, fluffy eggs, crispy potatoes, and a bright salsa verde.',\n        coverImage: '/images/community/beef-wellington.jpg',\n      },\n    ];\n  }, [session]);\n\n  const activities = useMemo(() => {\n    const items = [];\n\n    favorites.slice(0, 4).forEach((recipe) => {\n      items.push({\n        id: `favorite-${recipe.id}`,\n        title: 'Saved to favorites',\n        description: recipe.title ?? 'Untitled recipe',\n        time: formatActivityDate(recipe.dateAdded),\n      });\n    });\n\n    personalRecipes.slice(0, 4).forEach((recipe) => {\n      items.push({\n        id: `personal-${recipe.id}`,\n        title: 'Created a new recipe',\n        description: recipe.title ?? 'Untitled recipe',\n        time: formatActivityDate(recipe.createdAt),\n      });\n    });\n\n    purchasedRecipes.slice(0, 4).forEach((recipe) => {\n      items.push({\n        id: `purchased-${recipe.purchaseId || recipe.id}`,\n        title: 'Purchased a premium recipe',\n        description: recipe.title ?? 'Untitled recipe',\n        time: formatActivityDate(recipe.purchasedAt || recipe.createdAt),\n      });\n    });\n\n    if (!items.length) {\n      return [\n        {\n          id: 'empty-activity',\n          title: 'No recent activity yet',\n          description: 'Start saving recipes or add your own creations to see them here.',\n          time: '—',\n          isEmpty: true,\n        },\n      ];\n    }\n\n    return items.slice(0, 6);\n  }, [favorites, personalRecipes]);\n\n  const stats = useMemo(\n    () => [\n      {\n        key: 'favorites',\n        label: 'Favorite recipes',\n        value: favorites.length,\n        description: 'Recipes you loved the most',\n        icon: Heart,\n        accent: 'bg-rose-100 text-rose-600 dark:bg-rose-500/10 dark:text-rose-300',\n      },\n      {\n        key: 'personal',\n        label: 'Personal recipes',\n        value: personalRecipes.length,\n        description: 'Creations stored on this device',\n        icon: Utensils,\n        accent: 'bg-amber-100 text-amber-600 dark:bg-amber-500/10 dark:text-amber-300',\n      },\n      {\n        key: 'purchased',\n        label: 'Purchased recipes',\n        value: purchasedRecipes.length,\n        description: 'Premium recipes you now own',\n        icon: Crown,\n        accent: 'bg-emerald-100 text-emerald-600 dark:bg-emerald-500/10 dark:text-emerald-300',\n      },\n      {\n        key: 'community',\n        label: 'Community posts',\n        value: communityPosts.length,\n        description: 'Shared with fellow food lovers',\n        icon: Activity,\n        accent: 'bg-sky-100 text-sky-600 dark:bg-sky-500/10 dark:text-sky-300',\n      },\n    ],\n    [favorites.length, personalRecipes.length, purchasedRecipes.length, communityPosts.length],\n  );\n\n  const visiblePurchasedRecipes = useMemo(\n    () => (showAllPurchased ? purchasedRecipes : purchasedRecipes.slice(0, 4)),\n    [purchasedRecipes, showAllPurchased],\n  );\n\n  if (!mounted || status === 'loading' || favoritesLoading || loadingPersonalRecipes || loadingPurchasedRecipes) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"h-12 w-12 animate-spin rounded-full border-2 border-olive-500 border-t-transparent\" />\n      </div>\n    );\n  }\n\n  if (!session && !isAuthDisabled) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-16 pt-10 dark:bg-gray-950\">\n      <div className=\"mx-auto flex w-full max-w-7xl flex-col gap-10 px-4 sm:px-6 lg:px-8\">\n        <ProfileHeader session={session} />\n\n        <section>\n          <h2 className=\"text-xl font-semibold text-olive-900 dark:text-gray-100\">At a glance</h2>\n          <p className=\"mt-1 text-sm text-olive-600 dark:text-gray-400\">\n            Keep track of your culinary footprint across SavoryFlavors.\n          </p>\n          <div className=\"mt-6 grid gap-4 sm:grid-cols-2 xl:grid-cols-3\">\n            {stats.map((stat) => (\n              <div\n                key={stat.key}\n                className=\"rounded-2xl bg-white p-6 shadow-sm ring-1 ring-olive-100/60 transition hover:-translate-y-0.5 hover:shadow-md dark:bg-gray-900 dark:ring-gray-800\"\n              >\n                <div className={`mb-4 inline-flex rounded-full ${stat.accent} p-3`}>{<stat.icon className=\"h-5 w-5\" />}</div>\n                <p className=\"text-sm font-medium uppercase tracking-wide text-olive-500 dark:text-gray-400\">\n                  {stat.label}\n                </p>\n                <p className=\"mt-3 text-3xl font-semibold text-olive-900 dark:text-gray-100\">{stat.value}</p>\n                <p className=\"mt-2 text-sm text-olive-600 dark:text-gray-400\">{stat.description}</p>\n              </div>\n            ))}\n          </div>\n        </section>\n\n        <section className=\"rounded-3xl bg-white p-8 shadow-sm ring-1 ring-olive-100/60 dark:bg-gray-900 dark:ring-gray-800\">\n          <div className=\"flex flex-col gap-6 lg:flex-row lg:items-center lg:justify-between\">\n            <div className=\"max-w-xl space-y-3\">\n              <div className=\"inline-flex items-center gap-2 rounded-full bg-olive-100 px-3 py-1 text-xs font-semibold text-olive-700 dark:bg-olive-500/10 dark:text-olive-300\">\n                <Sparkles className=\"h-3 w-3\" />\n                FitSavory\n              </div>\n              <h2 className=\"text-2xl font-semibold text-olive-900 dark:text-gray-100\">Your personalized nutrition hub</h2>\n              <p className=\"text-sm text-olive-600 dark:text-gray-400\">\n                Generate adaptive meal plans, track macros, and visualize weekly progress with FitSavory. Use this shortcut to jump back into your dashboard any time.\n              </p>\n              <ul className=\"space-y-2 text-sm text-olive-600 dark:text-gray-400\">\n                <li className=\"flex items-center gap-2\">\n                  <Target className=\"h-4 w-4 text-olive-500\" />\n                  Dynamic macro presets and custom targets\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4 text-olive-500\" />\n                  Day-by-day meal breakdowns and snapshots\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4 text-olive-500\" />\n                  Weekly overview charts to monitor progress\n                </li>\n              </ul>\n            </div>\n\n            <div className=\"flex flex-col gap-4 rounded-2xl bg-soft-50 p-6 shadow-inner dark:bg-gray-800/60\">\n              <div>\n                <p className=\"text-sm font-medium text-olive-700 dark:text-gray-200\">Current status</p>\n                <p className=\"mt-1 text-lg font-semibold text-olive-900 dark:text-gray-100\">\n                  {session ? 'Signed in and ready' : 'Sign in to access FitSavory'}\n                </p>\n              </div>\n              <div className=\"rounded-xl border border-dashed border-olive-200 bg-white/70 p-4 text-sm text-olive-600 dark:border-gray-700 dark:bg-gray-900/80 dark:text-gray-300\">\n                No active meal plan detected. Generate a new one to sync it with your profile overview.\n              </div>\n              <div className=\"flex flex-wrap items-center gap-3\">\n                <Link\n                  href=\"/fitsavory\"\n                  className=\"inline-flex items-center gap-2 rounded-lg bg-olive-600 px-4 py-2 text-sm font-semibold text-white transition hover:bg-olive-700\"\n                >\n                  Open FitSavory dashboard\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Link>\n                <p className=\"text-xs text-olive-500 dark:text-gray-400\">\n                  Need a plan? Adjust your targets and generate one inside FitSavory.\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-semibold text-olive-900 dark:text-gray-100\">Saved favorites</h2>\n              <p className=\"mt-1 text-sm text-olive-600 dark:text-gray-400\">\n                A quick look at recipes you loved recently.\n              </p>\n            </div>\n            <Link\n              href=\"/favorites\"\n              className=\"inline-flex items-center gap-1 rounded-full bg-olive-600 px-4 py-2 text-sm font-medium text-white transition hover:bg-olive-700\"\n            >\n              View all\n              <ChevronRight className=\"h-4 w-4\" />\n            </Link>\n          </div>\n\n          {favorites.length === 0 ? (\n            <div className=\"mt-6 rounded-2xl border border-dashed border-olive-200 bg-white/60 p-8 text-center dark:border-gray-800 dark:bg-gray-900/60\">\n              <Heart className=\"mx-auto h-10 w-10 text-olive-400\" />\n              <p className=\"mt-4 text-lg font-medium text-olive-900 dark:text-gray-100\">No favorites just yet</p>\n              <p className=\"mt-2 text-sm text-olive-600 dark:text-gray-400\">\n                Explore the recipe library and tap the heart icon to save dishes for later.\n              </p>\n            </div>\n          ) : (\n            <div className=\"mt-6 grid gap-4 md:grid-cols-2 xl:grid-cols-3\">\n              {favorites.slice(0, 3).map((recipe) => (\n                <article\n                  key={recipe.id}\n                  className=\"group flex h-full flex-col rounded-2xl bg-white shadow-sm ring-1 ring-olive-100/60 transition hover:-translate-y-1 hover:shadow-lg dark:bg-gray-900 dark:ring-gray-800\"\n                >\n                  <div className=\"relative h-48 overflow-hidden rounded-t-2xl bg-olive-100\">\n                    {/* eslint-disable-next-line @next/next/no-img-element */}\n                    <img\n                      src={recipe.image || '/placeholder-recipe.jpg'}\n                      alt={recipe.title}\n                      className=\"h-full w-full object-cover transition duration-500 group-hover:scale-105\"\n                      onError={(event) => {\n                        event.currentTarget.src = '/placeholder-recipe.jpg';\n                      }}\n                    />\n                  </div>\n                  <div className=\"flex flex-1 flex-col gap-4 p-5\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-olive-900 dark:text-gray-100\">{recipe.title}</h3>\n                      <p className=\"mt-2 text-sm text-olive-600 dark:text-gray-400 line-clamp-2\">\n                        {recipe.description || 'No description provided yet.'}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm text-olive-500 dark:text-gray-400\">\n                      <span>{formatActivityDate(recipe.dateAdded)}</span>\n                      <button\n                        type=\"button\"\n                        onClick={() => removeFromFavorites(recipe.id)}\n                        className=\"inline-flex items-center gap-1 rounded-full bg-rose-100 px-3 py-1 font-medium text-rose-600 transition hover:bg-rose-200 dark:bg-rose-500/10 dark:text-rose-300 dark:hover:bg-rose-500/20\"\n                      >\n                        <Heart className=\"h-4 w-4\" />\n                        Remove\n                      </button>\n                    </div>\n                  </div>\n                </article>\n              ))}\n            </div>\n          )}\n        </section>\n\n        <section className=\"grid gap-8 lg:grid-cols-[1.2fr_1fr]\">\n          <div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-xl font-semibold text-olive-900 dark:text-gray-100\">Personal recipe box</h2>\n                <p className=\"mt-1 text-sm text-olive-600 dark:text-gray-400\">\n                  Recipes you have created in SavoryFlavors.\n                </p>\n              </div>\n            </div>\n\n            {personalRecipes.length === 0 ? (\n              <div className=\"mt-6 rounded-2xl border border-dashed border-olive-200 bg-white/60 p-8 text-center dark:border-gray-800 dark:bg-gray-900/60\">\n                <Utensils className=\"mx-auto h-10 w-10 text-olive-400\" />\n                <p className=\"mt-4 text-lg font-medium text-olive-900 dark:text-gray-100\">No personal recipes yet</p>\n                <p className=\"mt-2 text-sm text-olive-600 dark:text-gray-400\">\n                  Create a recipe to see it appear in your personal collection.\n                </p>\n              </div>\n            ) : (\n              <div className=\"mt-6 grid gap-4 md:grid-cols-2\">\n                {personalRecipes.slice(0, 4).map((recipe) => (\n                  <article\n                    key={recipe.id}\n                    className=\"flex h-full flex-col rounded-2xl bg-white p-5 shadow-sm ring-1 ring-olive-100/60 transition hover:-translate-y-1 hover:shadow-lg dark:bg-gray-900 dark:ring-gray-800\"\n                  >\n                    <div className=\"flex items-start justify-between gap-3\">\n                      <div>\n                        <p className=\"text-xs uppercase tracking-wide text-olive-500 dark:text-gray-400\">\n                          Personal recipe\n                        </p>\n                        <h3 className=\"mt-2 text-lg font-semibold text-olive-900 dark:text-gray-100\">\n                          {recipe.title || 'Untitled recipe'}\n                        </h3>\n                      </div>\n                      <Bookmark className=\"h-5 w-5 text-olive-400 dark:text-gray-500\" />\n                    </div>\n\n                    <p className=\"mt-3 text-sm text-olive-600 dark:text-gray-400 line-clamp-3\">\n                      {recipe.description || 'No description provided yet.'}\n                    </p>\n\n                    <div className=\"mt-4 flex items-center justify-between text-sm text-olive-500 dark:text-gray-400\">\n                      <span>{formatActivityDate(recipe.createdAt)}</span>\n                      <Link\n                        href={`/recipes/${encodeURIComponent(recipe.slug || recipe.id)}?source=community`}\n                        className=\"inline-flex items-center gap-1 rounded-full bg-olive-100 px-3 py-1 font-medium text-olive-700 transition hover:bg-olive-200 dark:bg-olive-500/10 dark:text-olive-300 dark:hover:bg-olive-500/20\"\n                      >\n                        View\n                        <ChevronRight className=\"h-4 w-4\" />\n                      </Link>\n                    </div>\n                  </article>\n                ))}\n              </div>\n            )}\n\n            <div className=\"mt-10\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-olive-900 dark:text-gray-100\">Purchased recipe library</h2>\n                  <p className=\"mt-1 text-sm text-olive-600 dark:text-gray-400\">\n                    Premium recipes you&apos;ve unlocked from other creators.\n                  </p>\n                </div>\n                {purchasedRecipes.length > 4 ? (\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowAllPurchased((previous) => !previous)}\n                    className=\"inline-flex items-center gap-1 rounded-full border border-olive-300 px-4 py-2 text-sm font-medium text-olive-700 transition hover:bg-olive-100 dark:border-gray-700 dark:text-gray-200 dark:hover:bg-gray-800\"\n                  >\n                    {showAllPurchased ? 'View less' : 'View all'}\n                    <ChevronRight className={`h-4 w-4 transition-transform ${showAllPurchased ? 'rotate-90' : ''}`} />\n                  </button>\n                ) : null}\n              </div>\n\n              {purchasedRecipes.length === 0 ? (\n                <div className=\"mt-6 rounded-2xl border border-dashed border-olive-200 bg-white/60 p-8 text-center dark:border-gray-800 dark:bg-gray-900/60\">\n                  <Crown className=\"mx-auto h-10 w-10 text-olive-400\" />\n                  <p className=\"mt-4 text-lg font-medium text-olive-900 dark:text-gray-100\">No purchases yet</p>\n                  <p className=\"mt-2 text-sm text-olive-600 dark:text-gray-400\">\n                    Browse the marketplace and buy premium recipes to see them here.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"mt-6 grid gap-4 md:grid-cols-2\">\n                  {visiblePurchasedRecipes.map((recipe) => (\n                    <article\n                      key={recipe.purchaseId || recipe.id}\n                      className=\"flex h-full flex-col rounded-2xl bg-white p-5 shadow-sm ring-1 ring-olive-100/60 transition hover:-translate-y-1 hover:shadow-lg dark:bg-gray-900 dark:ring-gray-800\"\n                    >\n                      <div className=\"flex items-start justify-between gap-3\">\n                        <div>\n                          <p className=\"text-xs uppercase tracking-wide text-olive-500 dark:text-gray-400\">\n                            Purchased recipe\n                          </p>\n                          <h3 className=\"mt-2 text-lg font-semibold text-olive-900 dark:text-gray-100\">\n                            {recipe.title || 'Untitled recipe'}\n                          </h3>\n                        </div>\n                        <Sparkles className=\"h-5 w-5 text-olive-400 dark:text-gray-500\" />\n                      </div>\n\n                      <p className=\"mt-3 text-sm text-olive-600 dark:text-gray-400 line-clamp-3\">\n                        {recipe.description || 'No description provided yet.'}\n                      </p>\n\n                      <div className=\"mt-4 flex items-center justify-between text-sm text-olive-500 dark:text-gray-400\">\n                        <span>{formatActivityDate(recipe.purchasedAt || recipe.createdAt)}</span>\n                        <Link\n                          href={`/recipes/${encodeURIComponent(recipe.slug || recipe.id)}?source=purchased`}\n                          className=\"inline-flex items-center gap-1 rounded-full bg-olive-100 px-3 py-1 font-medium text-olive-700 transition hover:bg-olive-200 dark:bg-olive-500/10 dark:text-olive-300 dark:hover:bg-olive-500/20\"\n                        >\n                          View\n                          <ChevronRight className=\"h-4 w-4\" />\n                        </Link>\n                      </div>\n                    </article>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex flex-col gap-8\">\n            <div className=\"rounded-3xl bg-white p-6 shadow-sm ring-1 ring-olive-100/60 dark:bg-gray-900 dark:ring-gray-800\">\n              <h3 className=\"text-lg font-semibold text-olive-900 dark:text-gray-100\">Recent activity</h3>\n              <p className=\"mt-1 text-sm text-olive-600 dark:text-gray-400\">\n                Automatic highlights based on your favorites and personal recipes.\n              </p>\n              <ul className=\"mt-5 space-y-4\">\n                {activities.map((item) => (\n                  <li key={item.id} className=\"flex gap-3 rounded-xl bg-olive-50/60 p-3 dark:bg-gray-800/80\">\n                    <div className=\"mt-1 shrink-0 rounded-full bg-olive-200 p-2 text-olive-700 dark:bg-olive-500/20 dark:text-olive-200\">\n                      <Activity className=\"h-4 w-4\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-semibold text-olive-900 dark:text-gray-100\">{item.title}</p>\n                      <p className=\"text-sm text-olive-600 dark:text-gray-400\">{item.description}</p>\n                      <p className=\"mt-1 text-xs uppercase tracking-wide text-olive-500 dark:text-gray-500\">\n                        {item.time}\n                      </p>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"rounded-3xl bg-white p-6 shadow-sm ring-1 ring-olive-100/60 dark:bg-gray-900 dark:ring-gray-800\">\n              <h3 className=\"text-lg font-semibold text-olive-900 dark:text-gray-100\">Profile management</h3>\n              <p className=\"mt-1 text-sm text-olive-600 dark:text-gray-400\">\n                Coming soon — connect these shortcuts to your account settings.\n              </p>\n              <ul className=\"mt-5 space-y-3\">\n                {managementActions.map((action) => (\n                  <li key={action.key}>\n                    <button\n                      type=\"button\"\n                      className=\"flex w-full items-center justify-between gap-4 rounded-2xl bg-olive-50/60 p-4 text-left transition hover:bg-olive-100 dark:bg-gray-800/80 dark:hover:bg-gray-800\"\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"rounded-full bg-olive-200 p-2 text-olive-700 dark:bg-olive-500/20 dark:text-olive-200\">\n                          <action.icon className=\"h-4 w-4\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-olive-900 dark:text-gray-100\">{action.title}</p>\n                          <p className=\"text-sm text-olive-600 dark:text-gray-400\">{action.description}</p>\n                        </div>\n                      </div>\n                      <ChevronRight className=\"h-5 w-5 text-olive-400\" />\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </section>\n\n        <section>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-semibold text-olive-900 dark:text-gray-100\">Community contributions</h2>\n              <p className=\"mt-1 text-sm text-olive-600 dark:text-gray-400\">\n                Posts you&apos;ve shared with everyone. Data shown here is placeholder content until the\n                community backend is connected.\n              </p>\n            </div>\n            <Link\n              href=\"/community\"\n              className=\"inline-flex items-center gap-1 rounded-full border border-olive-300 px-4 py-2 text-sm font-medium text-olive-700 transition hover:bg-olive-100 dark:border-gray-700 dark:text-gray-200 dark:hover:bg-gray-800\"\n            >\n              Visit community\n              <ChevronRight className=\"h-4 w-4\" />\n            </Link>\n          </div>\n\n          {communityPosts.length === 0 ? (\n            <div className=\"mt-6 rounded-2xl border border-dashed border-olive-200 bg-white/60 p-8 text-center dark:border-gray-800 dark:bg-gray-900/60\">\n              <MessageSquare className=\"mx-auto h-10 w-10 text-olive-400\" />\n              <p className=\"mt-4 text-lg font-medium text-olive-900 dark:text-gray-100\">No community posts yet</p>\n              <p className=\"mt-2 text-sm text-olive-600 dark:text-gray-400\">\n                Share your culinary adventures with the community to see them highlighted here.\n              </p>\n            </div>\n          ) : (\n            <div className=\"mt-6 grid gap-4 md:grid-cols-2\">\n              {communityPosts.map((post) => (\n                <article\n                  key={post.id}\n                  className=\"flex h-full flex-col rounded-2xl bg-white p-6 shadow-sm ring-1 ring-olive-100/60 transition hover:-translate-y-1 hover:shadow-lg dark:bg-gray-900 dark:ring-gray-800\"\n                >\n                  <div className=\"flex items-start justify-between gap-3\">\n                    <div>\n                      <p className=\"text-xs uppercase tracking-wide text-olive-500 dark:text-gray-400\">Community post</p>\n                      <h3 className=\"mt-2 text-lg font-semibold text-olive-900 dark:text-gray-100\">{post.title}</h3>\n                    </div>\n                    <span className=\"rounded-full bg-olive-100 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-olive-700 dark:bg-olive-500/10 dark:text-olive-200\">\n                      {post.createdAt}\n                    </span>\n                  </div>\n                  <p className=\"mt-3 text-sm text-olive-600 dark:text-gray-400 line-clamp-3\">{post.excerpt}</p>\n                  <div className=\"mt-4 flex items-center gap-4 text-sm text-olive-500 dark:text-gray-400\">\n                    <span className=\"inline-flex items-center gap-1\">\n                      <Heart className=\"h-4 w-4\" />\n                      {post.likes}\n                    </span>\n                    <span className=\"inline-flex items-center gap-1\">\n                      <MessageSquare className=\"h-4 w-4\" />\n                      {post.comments}\n                    </span>\n                  </div>\n                </article>\n              ))}\n            </div>\n          )}\n        </section>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\recipes\\[id]\\page.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRecipe'. Either include it or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRecipe, id, sourceParam]","fix":{"range":[787,804],"text":"[fetchRecipe, id, sourceParam]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useAuthModal } from '@/components/AuthProvider';\nimport { useState, useEffect } from 'react';\nimport { useParams, useSearchParams } from 'next/navigation';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Heart, Share2, Clock, Users, ChefHat, Flame, Utensils } from 'lucide-react';\n\nexport default function RecipeDetail() {\n  const params = useParams()\n  const searchParams = useSearchParams()\n  const { id } = params\n  const sourceParam = searchParams.get('source')\n  const { requireAuth } = useAuthModal()\n\n  const [recipe, setRecipe] = useState(null)\n  const [activeTab, setActiveTab] = useState('instructions')\n  const [resolvedSource, setResolvedSource] = useState(null)\n\n  useEffect(() => {\n    if (id) {\n      fetchRecipe()\n    }\n  }, [id, sourceParam])\n\n  const fetchRecipe = async () => {\n    try {\n      const normalizedSource = sourceParam?.toLowerCase()\n      const initialSources = []\n\n      if (normalizedSource) {\n        initialSources.push(normalizedSource)\n      } else {\n        const looksNumeric = Number.isFinite(Number.parseInt(id, 10))\n        if (!looksNumeric) {\n          initialSources.push('community')\n        }\n        initialSources.push('mealdb', 'edamam', 'community')\n      }\n\n      const sourcesToTry = [...new Set(initialSources)]\n      console.log('🔍 Fetching recipe with ID:', id, 'Sources to try:', sourcesToTry)\n\n      let lastError = null\n      for (const attemptSource of sourcesToTry) {\n        try {\n          const response = await fetch(`/api/recipes/${encodeURIComponent(id)}?source=${attemptSource}`)\n          if (!response.ok) {\n            lastError = {\n              status: response.status,\n              statusText: response.statusText,\n              body: await response.text()\n            }\n            console.warn('⚠️ Failed fetching recipe from source', attemptSource, lastError)\n            continue\n          }\n\n          const data = await response.json()\n          if (!data) {\n            lastError = { status: response.status, statusText: 'Empty payload' }\n            continue\n          }\n\n          const resolved = {\n            ...data,\n            source: data.source || attemptSource\n          }\n\n          console.log('✅ Recipe data received from', attemptSource, resolved)\n          setRecipe(resolved)\n          setResolvedSource(resolved.source)\n          return\n        } catch (innerError) {\n          console.error('❌ Error while trying source', attemptSource, innerError)\n          lastError = { statusText: innerError.message }\n        }\n      }\n\n      const triedSources = sourcesToTry.join(', ')\n      throw new Error(\n        lastError\n          ? `Failed to fetch recipe after trying sources (${triedSources}): ${lastError.status || ''} ${lastError.statusText || ''}`\n          : `Failed to fetch recipe after trying sources (${triedSources})`\n      )\n    } catch (error) {\n      console.error('❌ Error fetching recipe:', error)\n      // Set a fallback recipe with error message\n      setRecipe({\n        id,\n        title: 'Recipe Not Found',\n        error: error.message,\n        source: resolvedSource || sourceParam || 'unknown',\n        isError: true\n      })\n    }\n  }\n\n  const toggleFavorite = async () => {\n    // This would typically require user authentication\n    setRecipe({\n      ...recipe,\n      isFavorite: !recipe.isFavorite\n    })\n  }\n\n  // If recipe is not yet loaded, show a minimal placeholder or nothing\n  if (!recipe) {\n    return (\n      <div className=\"min-h-screen pt-20 bg-gray-50 text-gray-900 transition-colors duration-300 dark:bg-gray-900 dark:text-gray-100\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Link href=\"/recipes\" className=\"text-olive-600 hover:text-olive-700 dark:text-olive-400 dark:hover:text-olive-300 mb-6 inline-block\">\n            ← Back to recipes\n          </Link>\n          <div className=\"bg-white rounded-xl shadow-lg overflow-hidden transition-colors duration-300 dark:bg-gray-900 dark:shadow-black/40\">\n            <div className=\"p-6\">\n              <p className=\"text-gray-600 dark:text-gray-300\">🔍 Fetching recipe...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (recipe?.isError) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6 text-gray-900 transition-colors duration-300 dark:text-gray-100\">\n        <div className=\"bg-red-50 border-l-4 border-red-400 p-4 mb-6 dark:bg-red-950/40 dark:border-red-500\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"h-5 w-5 text-red-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-red-700 dark:text-red-200\">\n                {recipe.error || 'Failed to load recipe. Please try again later.'}\n              </p>\n            </div>\n          </div>\n        </div>\n        <Link \n          href=\"/recipes\" \n          className=\"inline-flex items-center text-olive-600 hover:text-olive-800 dark:text-olive-400 dark:hover:text-olive-300 font-medium\"\n        >\n          <svg className=\"w-5 h-5 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n          </svg>\n          Back to Recipes\n        </Link>\n      </div>\n    )\n  }\n\n  const viewSource = (recipe?.source || resolvedSource || sourceParam || 'community').toLowerCase()\n\n  console.log('📋 Recipe data for display:', {\n    id: recipe.id,\n    title: recipe.title,\n    source: recipe.source,\n    hasInstructions: !!recipe.instructions,\n    instructionsLength: recipe.instructions?.length || 0,\n    hasIngredients: !!recipe.ingredients,\n    ingredientsCount: recipe.ingredients?.length || 0,\n    hasNutrition: !!recipe.nutrition,\n    hasImage: !!recipe.image,\n    category: recipe.category,\n    cuisine: recipe.cuisine,\n    readyInMinutes: recipe.readyInMinutes,\n    servings: recipe.servings\n  })\n\n  return (\n    <div className=\"min-h-screen pt-20 bg-gray-50 text-gray-900 transition-colors duration-300 dark:bg-gray-900 dark:text-gray-100\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Back button */}\n        <Link href=\"/recipes\" className=\"text-olive-600 hover:text-olive-700 dark:text-olive-400 dark:hover:text-olive-300 mb-6 inline-block\">\n          ← Back to recipes\n        </Link>\n\n        <div className=\"bg-white rounded-xl shadow-lg overflow-hidden transition-colors duration-300 dark:bg-gray-900 dark:shadow-black/40\">\n          {/* Recipe header */}\n          <div className=\"relative\">\n            <Image\n              src={recipe.image || 'https://via.placeholder.com/800x400?text=Recipe+Image'}\n              alt={recipe.title || 'Recipe image'}\n              width={800}\n              height={400}\n              className=\"w-full h-64 md:h-80 object-cover\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent\"></div>\n            <div className=\"absolute bottom-6 left-6 right-6 text-white\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <span className=\"bg-olive-600 px-3 py-1 rounded-full text-sm font-medium\">\n                  {recipe.category}\n                </span>\n                {recipe.cuisine && (\n                  <span className=\"bg-gray-900/50 px-3 py-1 rounded-full text-sm\">\n                    {recipe.cuisine}\n                  </span>\n                )}\n                <span className=\"bg-gray-900/50 px-3 py-1 rounded-full text-sm\">\n                  {viewSource.toUpperCase()}\n                </span>\n              </div>\n              <h1 className=\"text-3xl md:text-4xl font-bold mb-2\">{recipe.title}</h1>\n              {recipe.description && (\n                <p className=\"text-lg text-gray-200\">{recipe.description}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Recipe meta info */}\n            <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\n              <div className=\"flex items-center gap-6\">\n                {recipe.readyInMinutes && recipe.readyInMinutes > 0 && (\n                  <div className=\"flex items-center gap-2 text-gray-800 dark:text-gray-100\">\n                    <Clock className=\"h-5 w-5 text-olive-600\" />\n                    <span>{recipe.readyInMinutes} minutes</span>\n                  </div>\n                )}\n                {recipe.servings && recipe.servings > 0 && (\n                  <div className=\"flex items-center gap-2 text-gray-800 dark:text-gray-100\">\n                    <Users className=\"h-5 w-5 text-olive-600\" />\n                    <span>{recipe.servings} servings</span>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={() => {\n                    if (requireAuth('save recipes to favorites')) {\n                      toggleFavorite();\n                    }\n                  }}\n                  className=\"p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-gray-800 dark:border-gray-600 dark:bg-gray-800 dark:hover:bg-gray-700 dark:text-gray-100\"\n                >\n                  <Heart className={`h-5 w-5 ${recipe.isFavorite ? 'fill-red-500 text-red-500 dark:text-red-400 dark:fill-red-400' : 'text-gray-600 hover:text-red-500 dark:text-gray-300 dark:hover:text-red-400'}`} />\n                </button>\n                <button className=\"p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-gray-800 dark:border-gray-600 dark:bg-gray-800 dark:hover:bg-gray-700 dark:text-gray-100\">\n                  <Share2 className=\"h-5 w-5 text-gray-600 hover:text-olive-600 dark:text-gray-300 dark:hover:text-olive-300\" />\n                </button>\n              </div>\n            </div>\n\n            {/* Tabs */}\n            <div className=\"border-b border-gray-200 dark:border-gray-700 mb-6\">\n              <nav className=\"flex space-x-8\">\n                <button\n                  onClick={() => setActiveTab('instructions')}\n                  className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${\n                    activeTab === 'instructions'\n                      ? 'border-olive-600 text-olive-700 dark:text-olive-300 font-semibold'\n                      : 'border-transparent text-gray-600 hover:text-olive-600 hover:border-gray-300 dark:text-gray-400 dark:hover:text-olive-300 dark:hover:border-gray-600'\n                  }`}\n                >\n                  Instructions\n                </button>\n                <button\n                  onClick={() => setActiveTab('ingredients')}\n                  className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${\n                    activeTab === 'ingredients'\n                      ? 'border-olive-600 text-olive-700 dark:text-olive-300 font-semibold'\n                      : 'border-transparent text-gray-600 hover:text-olive-600 hover:border-gray-300 dark:text-gray-400 dark:hover:text-olive-300 dark:hover:border-gray-600'\n                  }`}\n                >\n                  Ingredients\n                </button>\n                <button\n                  onClick={() => setActiveTab('nutrition')}\n                  className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${\n                    activeTab === 'nutrition'\n                      ? 'border-olive-600 text-olive-700 dark:text-olive-300 font-semibold'\n                      : 'border-transparent text-gray-600 hover:text-olive-600 hover:border-gray-300 dark:text-gray-400 dark:hover:text-olive-300 dark:hover:border-gray-600'\n                  }`}\n                >\n                  Nutrition\n                </button>\n              </nav>\n            </div>\n\n            {/* Tab content */}\n            <div className=\"space-y-6\">\n              {activeTab === 'instructions' && (\n                <div>\n                  <h3 className=\"text-xl font-semibold mb-4\">Instructions</h3>\n                  <div className=\"prose max-w-none\">\n                    <div className=\"whitespace-pre-line text-gray-800 dark:text-gray-100 leading-relaxed\">\n                      {recipe.instructions && recipe.instructions !== 'No instructions available' && recipe.instructions.length > 0\n                        ? recipe.instructions\n                        : (\n                          <div className=\"bg-blue-50 border-l-4 border-blue-400 p-4 dark:bg-blue-900/30 dark:border-blue-500\">\n                            <div className=\"flex\">\n                              <div className=\"flex-shrink-0\">\n                                <svg className=\"h-5 w-5 text-blue-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                  <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n                                </svg>\n                              </div>\n                              <div className=\"ml-3\">\n                                <p className=\"text-sm text-blue-700 dark:text-blue-200\">\n                                  <strong>Note:</strong> This recipe from {recipe.source} provides ingredients and nutrition information, but detailed cooking instructions may not be available. You can use the ingredients list as a guide to prepare this dish.\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        )\n                      }\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'ingredients' && (\n                <div>\n                  <h3 className=\"text-xl font-semibold mb-4\">Ingredients</h3>\n                  <div className=\"grid gap-3\">\n                    {recipe.ingredients && recipe.ingredients.length > 0 ? (\n                      recipe.ingredients.map((ingredient, index) => (\n                        <div key={index} className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg dark:bg-gray-800\">\n                          <ChefHat className=\"h-5 w-5 text-olive-600\" />\n                          <div>\n                            <span className=\"font-medium text-gray-900 dark:text-gray-100\">\n                              {typeof ingredient === 'string'\n                                ? ingredient\n                                : ingredient.original || `${ingredient.name} ${ingredient.measure || ''}`.trim()\n                              }\n                            </span>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4 dark:bg-yellow-900/30 dark:border-yellow-500\">\n                        <div className=\"flex\">\n                          <div className=\"flex-shrink-0\">\n                            <svg className=\"h-5 w-5 text-yellow-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                              <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                            </svg>\n                          </div>\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm text-yellow-700 dark:text-yellow-200\">\n                              <strong>Ingredients not available:</strong> This recipe from {recipe.source} may not have detailed ingredient information. The recipe title and nutrition data are available to help you identify this dish.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'nutrition' && (\n                <div>\n                  <h3 className=\"text-xl font-semibold mb-4\">Nutrition Information</h3>\n                  {recipe.nutrition && (recipe.nutrition.calories > 0 || recipe.nutrition.protein > 0 || recipe.nutrition.fat > 0 || recipe.nutrition.carbs > 0) ? (\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                      <div className=\"bg-olive-50 p-4 rounded-lg text-center dark:bg-olive-900/30\">\n                        <Flame className=\"h-6 w-6 text-olive-600 mx-auto mb-2\" />\n                        <div className=\"text-2xl font-bold text-olive-600 dark:text-olive-300\">{recipe.nutrition.calories > 0 ? Math.round(recipe.nutrition.calories) : 'N/A'}</div>\n                        <div className=\"text-sm text-black dark:text-gray-100\">Calories</div>\n                      </div>\n                      {recipe.nutrition.protein > 0 && (\n                        <div className=\"bg-blue-50 p-4 rounded-lg text-center dark:bg-blue-900/30\">\n                          <Utensils className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\n                          <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-300\">{Math.round(recipe.nutrition.protein)}g</div>\n                          <div className=\"text-sm text-black dark:text-gray-100\">Protein</div>\n                        </div>\n                      )}\n                      {recipe.nutrition.fat > 0 && (\n                        <div className=\"bg-yellow-50 p-4 rounded-lg text-center dark:bg-yellow-900/30\">\n                          <div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-300\">{Math.round(recipe.nutrition.fat)}g</div>\n                          <div className=\"text-sm text-black dark:text-gray-100\">Fat</div>\n                        </div>\n                      )}\n                      {recipe.nutrition.carbs > 0 && (\n                        <div className=\"bg-green-50 p-4 rounded-lg text-center dark:bg-green-900/30\">\n                          <div className=\"text-2xl font-bold text-green-600 dark:text-green-300\">{Math.round(recipe.nutrition.carbs)}g</div>\n                          <div className=\"text-sm text-black dark:text-gray-100\">Carbs</div>\n                        </div>\n                      )}\n                      {recipe.nutrition.fiber > 0 && (\n                        <div className=\"bg-purple-50 p-4 rounded-lg text-center dark:bg-purple-900/30\">\n                          <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-300\">{Math.round(recipe.nutrition.fiber)}g</div>\n                          <div className=\"text-sm text-black dark:text-gray-100\">Fiber</div>\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"bg-orange-50 border-l-4 border-orange-400 p-4 dark:bg-orange-900/30 dark:border-orange-500\">\n                      <div className=\"flex\">\n                        <div className=\"flex-shrink-0\">\n                          <svg className=\"h-5 w-5 text-orange-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                            <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                          </svg>\n                        </div>\n                        <div className=\"ml-3\">\n                          <p className=\"text-sm text-orange-700 dark:text-orange-200\">\n                            <strong>Nutrition data not available:</strong> This recipe from {recipe.source} may not have detailed nutrition information. However, you can still view the recipe title and other available details.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Additional info for Edamam recipes */}\n            {viewSource === 'edamam' && (\n              <div className=\"mt-8 pt-6 border-t border-gray-200 dark:border-gray-700\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {recipe.dietLabels && recipe.dietLabels.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-2\">Diet Labels</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {recipe.dietLabels.map((label, index) => (\n                          <span key={index} className=\"bg-green-100 text-green-800 px-2 py-1 rounded text-sm dark:bg-green-900/40 dark:text-green-200\">\n                            {label}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  {recipe.healthLabels && recipe.healthLabels.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-2\">Health Labels</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {recipe.healthLabels.slice(0, 8).map((label, index) => (\n                          <span key={index} className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm dark:bg-blue-900/40 dark:text-blue-200\">\n                            {label}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Original recipe source link */}\n                {recipe.url && (\n                  <div className=\"mt-6 pt-4 border-t border-gray-100 dark:border-gray-700\">\n                    <div className=\"bg-gray-50 p-4 rounded-lg dark:bg-gray-800\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"flex-shrink-0\">\n                          <svg className=\"h-5 w-5 text-gray-700 dark:text-gray-200 mt-0.5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                            <path fillRule=\"evenodd\" d=\"M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z\" clipRule=\"evenodd\" />\n                          </svg>\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-2\">Original Recipe Source</h4>\n                          <p className=\"text-sm text-black dark:text-gray-100 mb-3\">\n                            This recipe is sourced from {recipe.source || 'Edamam'}. For complete cooking instructions and methods, please visit the original recipe page.\n                          </p>\n                          <a\n                            href={recipe.url}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"inline-flex items-center gap-2 bg-olive-600 text-white px-4 py-2 rounded-lg hover:bg-olive-700 dark:hover:bg-olive-500 transition-colors font-medium\"\n                          >\n                            <svg className=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                              <path d=\"M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z\" />\n                            </svg>\n                            View Full Recipe Instructions\n                          </a>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\recipes\\create\\page.js","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":386,"column":23,"nodeType":"JSXOpeningElement","endLine":413,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useRef, useEffect } from 'react'\nimport { ArrowDown, ArrowLeft, ArrowUp, Plus, X } from 'lucide-react'\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\n\nexport default function CreateRecipe() {\n  const router = useRouter()\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    instructions: '',\n    prepTime: '',\n    cookTime: '',\n    servings: '',\n    difficulty: 'easy',\n    category: 'main-course',\n    cuisine: 'american',\n    ingredients: [{ name: '', amount: '', unit: '' }],\n    instructionSteps: [{ title: '', description: '' }],\n    price: '',\n    previewText: '',\n    nutrition: {\n      calories: '',\n      protein: '',\n      carbs: '',\n      fats: '',\n      fiber: '',\n      sugar: '',\n      sodium: '',\n      cholesterol: '',\n      isAutoCalculated: true\n    }\n  })\n  const DEFAULT_PREVIEW_SIZE = { width: 256, height: 160 }\n\n  const [imageFile, setImageFile] = useState(null)\n  const [imagePreview, setImagePreview] = useState(null)\n  const [imageLoaded, setImageLoaded] = useState(false)\n  const [imageSize, setImageSize] = useState(DEFAULT_PREVIEW_SIZE)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [hasPremiumAccess, setHasPremiumAccess] = useState(false)\n  const fileInputRef = useRef(null)\n\n  useEffect(() => {\n    let isMounted = true\n\n    const fetchSubscription = async () => {\n      try {\n        const response = await fetch('/api/user/subscription', { cache: 'no-store' })\n        if (!response.ok) {\n          if (isMounted) {\n            setHasPremiumAccess(false)\n            setFormData(prev => ({ ...prev, price: '', previewText: '' }))\n          }\n          return\n        }\n\n        const data = await response.json()\n        const planName = data?.plan?.name || data?.planName || ''\n        const status = data?.status || data?.subscription?.status || ''\n        const hasSubscription =\n          status?.toLowerCase() === 'active' ||\n          data?.hasSubscription === true ||\n          planName?.toLowerCase().includes('premium')\n\n        if (isMounted) {\n          setHasPremiumAccess(hasSubscription)\n          if (!hasSubscription) {\n            setFormData(prev => ({ ...prev, price: '', previewText: '' }))\n          }\n        }\n      } catch (error) {\n        console.error('Failed to fetch subscription:', error)\n        if (isMounted) {\n          setHasPremiumAccess(false)\n          setFormData(prev => ({ ...prev, price: '', previewText: '' }))\n        }\n      }\n    }\n\n    fetchSubscription()\n\n    return () => {\n      isMounted = false\n    }\n  }, [])\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    if (isSubmitting) return\n\n    try {\n      setIsSubmitting(true)\n      const payload = new FormData()\n      payload.append('title', formData.title)\n      payload.append('description', formData.description)\n      const instructionLines = buildInstructionLines(formData.instructionSteps)\n      payload.append('instructions', instructionLines.length ? instructionLines.join('\\n') : formData.instructions)\n      payload.append('prepTime', formData.prepTime)\n      payload.append('cookTime', formData.cookTime)\n      payload.append('servings', formData.servings)\n      payload.append('difficulty', formData.difficulty)\n      payload.append('category', formData.category)\n      payload.append('cuisine', formData.cuisine)\n      payload.append('ingredients', JSON.stringify(formData.ingredients))\n      payload.append('nutrition', JSON.stringify({\n        calories: normalizeNumberField(formData.nutrition.calories),\n        protein: normalizeNumberField(formData.nutrition.protein),\n        carbs: normalizeNumberField(formData.nutrition.carbs),\n        fats: normalizeNumberField(formData.nutrition.fats),\n        fiber: normalizeNumberField(formData.nutrition.fiber),\n        sugar: normalizeNumberField(formData.nutrition.sugar),\n        sodium: normalizeNumberField(formData.nutrition.sodium),\n        cholesterol: normalizeNumberField(formData.nutrition.cholesterol),\n        isAutoCalculated: Boolean(formData.nutrition.isAutoCalculated)\n      }))\n      if (hasPremiumAccess && formData.price !== '') {\n        payload.append('price', formData.price)\n      }\n      if (hasPremiumAccess && formData.previewText.trim() !== '') {\n        payload.append('previewText', formData.previewText.trim())\n      }\n\n      if (imageFile) {\n        payload.append('image', imageFile)\n      }\n\n      const response = await fetch('/api/recipes', {\n        method: 'POST',\n        body: payload\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Failed to create recipe' }))\n        throw new Error(errorData.error || 'Failed to create recipe')\n      }\n\n      router.push('/recipes')\n    } catch (error) {\n      console.error('Error submitting recipe:', error)\n      alert(error.message || 'Failed to create recipe. Please try again.')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const buildInstructionLines = (steps) =>\n    steps\n      .map((step, index) => {\n        const title = step?.title?.trim() || ''\n        const description = step?.description?.trim() || ''\n        if (!title && !description) return ''\n        const titlePart = title ? `${title}: ` : ''\n        const body = description || ''\n        return `${index + 1}. ${titlePart}${body}`.trim()\n      })\n      .filter(Boolean)\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }))\n  }\n\n  const handleNutritionChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      nutrition: {\n        ...prev.nutrition,\n        [field]: value\n      }\n    }))\n  }\n\n  const handleNutritionToggle = (field, checked) => {\n    setFormData(prev => ({\n      ...prev,\n      nutrition: {\n        ...prev.nutrition,\n        [field]: checked\n      }\n    }))\n  }\n\n  const normalizeNumberField = (value) => {\n    if (value === '' || value === null || value === undefined) {\n      return null\n    }\n    const parsed = parseFloat(value)\n    return Number.isFinite(parsed) ? parsed : null\n  }\n\n  const syncInstructionSteps = (steps) => {\n    const normalized = steps.length ? steps : [{ title: '', description: '' }]\n    const instructionLines = buildInstructionLines(normalized)\n    setFormData(prev => ({\n      ...prev,\n      instructionSteps: normalized,\n      instructions: instructionLines.join('\\n')\n    }))\n  }\n\n  const addInstructionStep = () => {\n    syncInstructionSteps([...formData.instructionSteps, { title: '', description: '' }])\n  }\n\n  const updateInstructionStep = (index, field, value) => {\n    const steps = formData.instructionSteps.map((step, i) =>\n      i === index ? { ...step, [field]: value } : step\n    )\n    syncInstructionSteps(steps)\n  }\n\n  const removeInstructionStep = (index) => {\n    if (formData.instructionSteps.length === 1) {\n      syncInstructionSteps([{ title: '', description: '' }])\n      return\n    }\n    const steps = formData.instructionSteps.filter((_, i) => i !== index)\n    syncInstructionSteps(steps)\n  }\n\n  const moveInstructionStep = (index, direction) => {\n    const newIndex = index + direction\n    if (newIndex < 0 || newIndex >= formData.instructionSteps.length) {\n      return\n    }\n    const steps = [...formData.instructionSteps]\n    const [moved] = steps.splice(index, 1)\n    steps.splice(newIndex, 0, moved)\n    syncInstructionSteps(steps)\n  }\n\n  const addIngredient = () => {\n    setFormData(prev => ({\n      ...prev,\n      ingredients: [...prev.ingredients, { name: '', amount: '', unit: '' }]\n    }))\n  }\n\n  const removeIngredient = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      ingredients: prev.ingredients.filter((_, i) => i !== index)\n    }))\n  }\n\n  const updateIngredient = (index, field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      ingredients: prev.ingredients.map((ingredient, i) =>\n        i === index ? { ...ingredient, [field]: value } : ingredient\n      )\n    }))\n  }\n\n  const handleImageChange = (event) => {\n    const file = event.target.files?.[0]\n    if (!file) {\n      setImageFile(null)\n      setImagePreview(null)\n      setImageLoaded(false)\n      setImageSize(DEFAULT_PREVIEW_SIZE)\n      return\n    }\n\n    if (!file.type?.startsWith('image/')) {\n      setImageFile(null)\n      setImagePreview(null)\n      setImageLoaded(false)\n      setImageSize(DEFAULT_PREVIEW_SIZE)\n      alert('Please select a valid image file.')\n      if (fileInputRef.current) {\n        fileInputRef.current.value = ''\n      }\n      return\n    }\n\n    const maxBytes = 5 * 1024 * 1024 // 5MB\n    if (file.size > maxBytes) {\n      setImageFile(null)\n      setImagePreview(null)\n      setImageLoaded(false)\n      setImageSize(DEFAULT_PREVIEW_SIZE)\n      alert('Image must be 5MB or smaller. Please choose a smaller file.')\n      if (fileInputRef.current) {\n        fileInputRef.current.value = ''\n      }\n      return\n    }\n\n    setImageFile(file)\n    setImageLoaded(false)\n    setImageSize(DEFAULT_PREVIEW_SIZE)\n\n    const reader = new FileReader()\n    reader.onloadend = () => {\n      const result = typeof reader.result === 'string' ? reader.result : null\n      setImagePreview(result)\n      setImageLoaded(false)\n    }\n    reader.onerror = () => {\n      console.error('Failed to read image file for preview')\n      setImageFile(null)\n      setImagePreview(null)\n      setImageLoaded(false)\n    }\n    reader.readAsDataURL(file)\n  }\n\n  const handleRemoveImage = () => {\n    setImageFile(null)\n    setImagePreview(null)\n    setImageLoaded(false)\n    setImageSize(DEFAULT_PREVIEW_SIZE)\n    if (fileInputRef.current) {\n      fileInputRef.current.value = ''\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen pt-20 bg-gray-50 dark:bg-slate-950\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/recipes\" className=\"text-olive-600 hover:text-olive-700 mb-4 inline-flex items-center gap-2 dark:text-olive-400 dark:hover:text-olive-300\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to recipes\n          </Link>\n          <h1 className=\"text-4xl font-bold text-gray-900 dark:text-slate-100 mb-4\">Add New Recipe</h1>\n          <p className=\"text-lg text-gray-600 dark:text-slate-300\">\n            Share your favorite recipe with the community\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-md p-6\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-slate-100 mb-6\">Basic Information</h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-2\">\n                  Recipe Title *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"title\"\n                  value={formData.title}\n                  onChange={handleInputChange}\n                  required\n                  className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                  placeholder=\"Enter recipe title\"\n                />\n              </div>\n\n              <div className=\"md:col-span-2 space-y-3\">\n                <label htmlFor=\"recipe-image-upload\" className=\"block text-sm font-medium text-gray-700 dark:text-slate-200\">\n                  Recipe Image (Optional)\n                </label>\n                <input\n                  ref={fileInputRef}\n                  id=\"recipe-image-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"block w-full text-sm text-gray-900 dark:text-slate-100 border border-gray-300 dark:border-slate-700 rounded-lg cursor-pointer bg-white dark:bg-slate-800 focus:outline-none focus:ring-2 focus:ring-olive-500\"\n                  onChange={handleImageChange}\n                />\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  Upload a clear photo (JPG or PNG). Maximum size 5MB.\n                </p>\n                <div className=\"flex flex-col md:flex-row md:items-center gap-4\">\n                  <div\n                    className=\"relative rounded-xl border border-dashed border-gray-300 dark:border-slate-700 bg-gray-100 dark:bg-slate-800 overflow-hidden flex items-center justify-center\"\n                    style={{\n                      width: imagePreview ? `${imageSize.width}px` : undefined,\n                      height: imagePreview ? `${imageSize.height}px` : undefined,\n                      minWidth: imagePreview ? undefined : '100%',\n                      minHeight: imagePreview ? undefined : '10rem'\n                    }}\n                  >\n                    {imagePreview ? (\n                      <img\n                        src={imagePreview}\n                        alt=\"Recipe preview\"\n                        className=\"h-full w-full object-contain\"\n                        style={{ opacity: imageLoaded ? 1 : 0, transition: 'opacity 200ms ease-in-out' }}\n                        onLoad={(event) => {\n                          const { naturalWidth, naturalHeight } = event.currentTarget\n                          const MAX_WIDTH = 512\n                          const MAX_HEIGHT = 320\n                          const safeWidth = naturalWidth || DEFAULT_PREVIEW_SIZE.width\n                          const safeHeight = naturalHeight || DEFAULT_PREVIEW_SIZE.height\n                          const scale = Math.min(\n                            MAX_WIDTH / safeWidth,\n                            MAX_HEIGHT / safeHeight,\n                            1\n                          )\n                          setImageSize({\n                            width: Math.round(safeWidth * scale),\n                            height: Math.round(safeHeight * scale)\n                          })\n                          setImageLoaded(true)\n                        }}\n                        onError={(event) => {\n                          event.currentTarget.onerror = null\n                          setImageLoaded(false)\n                          setImageSize(DEFAULT_PREVIEW_SIZE)\n                        }}\n                      />\n                    ) : (\n                      <div className=\"flex h-full w-full flex-col items-center justify-center text-center text-gray-400 dark:text-gray-500\">\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          fill=\"none\"\n                          viewBox=\"0 0 24 24\"\n                          strokeWidth={1.5}\n                          stroke=\"currentColor\"\n                          className=\"h-10 w-10 mb-2\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            d=\"M3 16.5V7.125A2.625 2.625 0 015.625 4.5h12.75A2.625 2.625 0 0121 7.125V16.5m-18 0A2.625 2.625 0 015.625 19.125h12.75A2.625 2.625 0 0021 16.5m-18 0l4.72-4.72a1.125 1.125 0 011.59 0L12 14.25l1.69-1.69a1.125 1.125 0 011.59 0L21 18m-9-7.875a1.125 1.125 0 11-2.25 0 1.125 1.125 0 012.25 0z\"\n                          />\n                        </svg>\n                        <span className=\"text-sm\">Image preview appears here</span>\n                        <span className=\"text-xs\">Ideal size 1280x720</span>\n                      </div>\n                    )}\n                  </div>\n                  {imagePreview && (\n                    <div className=\"flex flex-col gap-2\">\n                      <span className=\"text-sm font-medium text-gray-700 dark:text-slate-200\">Preview</span>\n                      <button\n                        type=\"button\"\n                        onClick={handleRemoveImage}\n                        className=\"inline-flex items-center justify-center rounded-md border border-gray-300 dark:border-slate-700 bg-white dark:bg-slate-800 px-3 py-1.5 text-sm font-medium text-gray-700 dark:text-slate-100 shadow-sm hover:bg-gray-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\n                      >\n                        Remove image\n                      </button>\n                    </div>\n                  )}\n                </div>\n                <textarea\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleInputChange}\n                  rows={3}\n                  className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                  placeholder=\"Brief description of your recipe\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-2\">\n                  Preparation Time (minutes) *\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"prepTime\"\n                  value={formData.prepTime}\n                  onChange={handleInputChange}\n                  required\n                  min=\"1\"\n                  className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-2\">\n                  Cooking Time (minutes) *\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"cookTime\"\n                  value={formData.cookTime}\n                  onChange={handleInputChange}\n                  required\n                  min=\"0\"\n                  className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-2\">\n                  Servings *\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"servings\"\n                  value={formData.servings}\n                  onChange={handleInputChange}\n                  required\n                  min=\"1\"\n                  className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                />\n              </div>\n\n              {hasPremiumAccess && (\n                <>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-2\">\n                      Recipe Price (₱) <span className=\"text-gray-500 font-normal\">(Optional)</span>\n                    </label>\n                    <div className=\"relative\">\n                      <span className=\"absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500 dark:text-gray-400\">\n                        ₱\n                      </span>\n                      <input\n                        type=\"number\"\n                        name=\"price\"\n                        value={formData.price}\n                        onChange={handleInputChange}\n                        min=\"0\"\n                        step=\"0.01\"\n                        className=\"w-full pl-8 pr-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                        placeholder=\"0.00\"\n                      />\n                    </div>\n                    <p className=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                      Set the selling price for your recipe in Philippine Peso.\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-2\">\n                      Preview Text <span className=\"text-gray-500 font-normal\">(Optional)</span>\n                    </label>\n                    <textarea\n                      name=\"previewText\"\n                      value={formData.previewText}\n                      onChange={handleInputChange}\n                      rows={3}\n                      maxLength={250}\n                      className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                      placeholder=\"Give non-buyers a quick teaser about your premium recipe\"\n                    />\n                    <p className=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                      Shown to non-premium users. Maximum 250 characters.\n                    </p>\n                  </div>\n                </>\n              )}\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-2\">\n                  Difficulty\n                </label>\n                <select\n                  name=\"difficulty\"\n                  value={formData.difficulty}\n                  onChange={handleInputChange}\n                  className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                >\n                  <option value=\"easy\">Easy</option>\n                  <option value=\"medium\">Medium</option>\n                  <option value=\"hard\">Hard</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-2\">\n                  Category\n                </label>\n                <select\n                  name=\"category\"\n                  value={formData.category}\n                  onChange={handleInputChange}\n                  className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                >\n                  <option value=\"appetizer\">Appetizer</option>\n                  <option value=\"main-course\">Main Course</option>\n                  <option value=\"dessert\">Dessert</option>\n                  <option value=\"beverage\">Beverage</option>\n                  <option value=\"snack\">Snack</option>\n                  <option value=\"breakfast\">Breakfast</option>\n                  <option value=\"salad\">Salad</option>\n                  <option value=\"soup\">Soup</option>\n                  <option value=\"side-dish\">Side Dish</option>\n                  <option value=\"bread\">Bread</option>\n                  <option value=\"sauce\">Sauce</option>\n                  <option value=\"pasta\">Pasta</option>\n                  <option value=\"seafood\">Seafood</option>\n                  <option value=\"vegan\">Vegan</option>\n                  <option value=\"vegetarian\">Vegetarian</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-2\">\n                  Cuisine\n                </label>\n                <select\n                  name=\"cuisine\"\n                  value={formData.cuisine}\n                  onChange={handleInputChange}\n                  className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                >\n                  <option value=\"american\">American</option>\n                  <option value=\"italian\">Italian</option>\n                  <option value=\"chinese\">Chinese</option>\n                  <option value=\"japanese\">Japanese</option>\n                  <option value=\"mexican\">Mexican</option>\n                  <option value=\"indian\">Indian</option>\n                  <option value=\"french\">French</option>\n                  <option value=\"thai\">Thai</option>\n                  <option value=\"spanish\">Spanish</option>\n                  <option value=\"greek\">Greek</option>\n                  <option value=\"korean\">Korean</option>\n                  <option value=\"vietnamese\">Vietnamese</option>\n                  <option value=\"mediterranean\">Mediterranean</option>\n                  <option value=\"middle-eastern\">Middle Eastern</option>\n                  <option value=\"caribbean\">Caribbean</option>\n                  <option value=\"german\">German</option>\n                  <option value=\"brazilian\">Brazilian</option>\n                  <option value=\"moroccan\">Moroccan</option>\n                  <option value=\"ethiopian\">Ethiopian</option>\n                  <option value=\"cajun\">Cajun</option>\n                  <option value=\"filipino\">Filipino</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-md p-6\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-slate-100 mb-6\">Ingredients</h2>\n\n            <div className=\"space-y-4\">\n              {formData.ingredients.map((ingredient, index) => (\n                <div key={index} className=\"flex flex-col gap-4 sm:flex-row sm:items-end\">\n                  <div className=\"flex-1 w-full\">\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-1\">\n                      Ingredient {index + 1} *\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={ingredient.name}\n                      onChange={(e) => updateIngredient(index, 'name', e.target.value)}\n                      required\n                      className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                      placeholder=\"e.g. Chicken breast\"\n                    />\n                  </div>\n\n                  <div className=\"w-full sm:w-24 sm:flex-none\">\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-1\">\n                      Amount\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={ingredient.amount}\n                      onChange={(e) => updateIngredient(index, 'amount', e.target.value)}\n                      min=\"0\"\n                      step=\"0.25\"\n                      className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                      placeholder=\"1\"\n                    />\n                  </div>\n\n                  <div className=\"w-full sm:w-20 sm:flex-none\">\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-1\">\n                      Unit\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={ingredient.unit}\n                      onChange={(e) => updateIngredient(index, 'unit', e.target.value)}\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                      placeholder=\"cups\"\n                    />\n                  </div>\n\n                  {formData.ingredients.length > 1 && (\n                    <button\n                      type=\"button\"\n                      onClick={() => removeIngredient(index)}\n                      className=\"self-start sm:self-end sm:ml-2 p-2 text-red-600 hover:text-red-800\"\n                    >\n                      <X className=\"h-5 w-5\" />\n                    </button>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={addIngredient}\n              className=\"mt-4 flex items-center gap-2 text-olive-600 hover:text-olive-700 dark:text-olive-400 dark:hover:text-olive-300 font-medium\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              Add Ingredient\n            </button>\n          </div>\n\n          <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-md p-6\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-slate-100 mb-6\">Instructions</h2>\n\n            <div className=\"space-y-4\">\n              {formData.instructionSteps.map((step, index) => {\n                const isFirst = index === 0\n                const isLast = index === formData.instructionSteps.length - 1\n\n                return (\n                  <div key={index} className=\"rounded-lg border border-gray-200 dark:border-slate-700 bg-gray-50 dark:bg-slate-800 p-4\">\n                    <div className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between mb-3\">\n                      <span className=\"text-sm font-semibold text-gray-700 dark:text-slate-200\">Step {index + 1}</span>\n                      <div className=\"flex items-center gap-1\">\n                        <button\n                          type=\"button\"\n                          onClick={() => moveInstructionStep(index, -1)}\n                          disabled={isFirst}\n                          className=\"p-2 text-gray-500 hover:text-olive-600 dark:text-gray-400 dark:hover:text-olive-300 disabled:text-gray-300 disabled:cursor-not-allowed\"\n                          title=\"Move step up\"\n                        >\n                          <ArrowUp className=\"h-4 w-4\" />\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => moveInstructionStep(index, 1)}\n                          disabled={isLast}\n                          className=\"p-2 text-gray-500 hover:text-olive-600 dark:text-gray-400 dark:hover:text-olive-300 disabled:text-gray-300 disabled:cursor-not-allowed\"\n                          title=\"Move step down\"\n                        >\n                          <ArrowDown className=\"h-4 w-4\" />\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => removeInstructionStep(index)}\n                          disabled={formData.instructionSteps.length === 1}\n                          className=\"p-2 text-gray-500 hover:text-red-600 dark:text-gray-400 dark:hover:text-red-400 disabled:text-gray-300 disabled:cursor-not-allowed\"\n                          title=\"Remove step\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div>\n                        <label className=\"block text-xs font-semibold text-gray-600 mb-1\">\n                          Step title (optional)\n                        </label>\n                        <input\n                          type=\"text\"\n                          value={step.title}\n                          onChange={(e) => updateInstructionStep(index, 'title', e.target.value)}\n                          className=\"w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-transparent focus:ring-2 focus:ring-olive-500\"\n                          placeholder={`Step ${index + 1} title`}\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-xs font-semibold text-gray-600 mb-1\">\n                          Step details\n                        </label>\n                        <textarea\n                          value={step.description}\n                          onChange={(e) => updateInstructionStep(index, 'description', e.target.value)}\n                          rows={3}\n                          required={!step.title?.trim()}\n                          className=\"w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-transparent focus:ring-2 focus:ring-olive-500\"\n                          placeholder={`Describe step ${index + 1}...`}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n\n              <button\n                type=\"button\"\n                onClick={addInstructionStep}\n                className=\"inline-flex items-center gap-2 text-olive-600 hover:text-olive-700 font-medium\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Add Step\n              </button>\n\n              <p className=\"text-xs text-gray-500\">\n                Steps are saved automatically and sent in order. Use the arrows to reorder or remove steps as needed.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-md p-6\">\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-slate-100\">Nutrition Information</h2>\n              <label className=\"inline-flex items-center gap-2 text-sm text-gray-600 dark:text-slate-300\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.nutrition.isAutoCalculated}\n                  onChange={(event) => handleNutritionToggle('isAutoCalculated', event.target.checked)}\n                  className=\"rounded border-gray-300 text-olive-600 focus:ring-olive-500\"\n                />\n                Auto-calculate nutrition\n              </label>\n            </div>\n\n            {!formData.nutrition.isAutoCalculated && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[\n                  { key: 'calories', label: 'Calories (kcal)' },\n                  { key: 'protein', label: 'Protein (g)' },\n                  { key: 'carbs', label: 'Carbs (g)' },\n                  { key: 'fats', label: 'Fats (g)' },\n                  { key: 'fiber', label: 'Fiber (g)' },\n                  { key: 'sugar', label: 'Sugar (g)' },\n                  { key: 'sodium', label: 'Sodium (mg)' },\n                  { key: 'cholesterol', label: 'Cholesterol (mg)' }\n                ].map(({ key, label }) => (\n                  <div key={key}>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-slate-200 mb-2\">\n                      {label}\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={formData.nutrition[key]}\n                      onChange={(event) => handleNutritionChange(key, event.target.value)}\n                      min=\"0\"\n                      step=\"0.01\"\n                      className=\"w-full px-4 py-2 border border-gray-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-slate-100 focus:ring-2 focus:ring-olive-500 focus:border-transparent\"\n                      placeholder=\"0\"\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {formData.nutrition.isAutoCalculated && (\n              <p className=\"text-sm text-gray-500 dark:text-slate-400\">\n                We&rsquo;ll estimate nutrition automatically using our available data.\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex flex-col-reverse sm:flex-row sm:justify-end gap-3\">\n            <Link\n              href=\"/recipes\"\n              className=\"inline-flex items-center justify-center rounded-lg border border-gray-300 px-6 py-3 text-center text-gray-700 transition-colors hover:bg-gray-50 dark:border-slate-700 dark:text-slate-200 dark:hover:bg-slate-800\"\n            >\n              Cancel\n            </Link>\n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className={`inline-flex items-center justify-center rounded-lg px-6 py-3 text-white transition-colors ${isSubmitting ? 'bg-olive-600/80 cursor-not-allowed opacity-80' : 'bg-olive-600 hover:bg-olive-700'}`}\n            >\n              {isSubmitting ? 'Creating...' : 'Create Recipe'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\recipes\\page.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRecipes'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":139,"suggestions":[{"desc":"Update the dependencies array to be: [filtersInitialized, searchTerm, selectedCategory, selectedCuisine, selectedSource, dietFilter, nutritionFilter, debouncedIngredient, fetchRecipes]","fix":{"range":[3280,3413],"text":"[filtersInitialized, searchTerm, selectedCategory, selectedCuisine, selectedSource, dietFilter, nutritionFilter, debouncedIngredient, fetchRecipes]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":478,"column":11,"nodeType":"JSXOpeningElement","endLine":491,"endColumn":13},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":725,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[28925,28955],"text":"\n                    Search: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[28925,28955],"text":"\n                    Search: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[28925,28955],"text":"\n                    Search: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[28925,28955],"text":"\n                    Search: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":725,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[28967,28987],"text":"&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[28967,28987],"text":"&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[28967,28987],"text":"&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[28967,28987],"text":"&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useAuthModal } from '@/components/AuthProvider';\nimport { useState, useEffect, useRef } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport Link from 'next/link';\nimport { Search, Plus, Clock, Users, Utensils } from 'lucide-react';\nimport RecipePurchaseModal from '@/components/recipes/RecipePurchaseModal';\n\nconst pesoFormatter = new Intl.NumberFormat('en-PH', {\n  style: 'currency',\n  currency: 'PHP'\n});\n\nexport default function Recipes() {\n  const { requireAuth } = useAuthModal();\n  const searchParams = useSearchParams();\n  const [recipes, setRecipes] = useState([])\n  const [categories, setCategories] = useState([])\n  const [cuisines, setCuisines] = useState([])\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedCategory, setSelectedCategory] = useState('')\n  const [selectedCuisine, setSelectedCuisine] = useState('')\n  const [selectedIngredient, setSelectedIngredient] = useState('')\n  const [debouncedIngredient, setDebouncedIngredient] = useState('')\n  const [selectedSource, setSelectedSource] = useState('all')\n  const [dietFilter, setDietFilter] = useState('')\n  const [nutritionFilter, setNutritionFilter] = useState('')\n  const [isLoadingMore, setIsLoadingMore] = useState(false)\n  const [page, setPage] = useState(1)\n  const [hasMore, setHasMore] = useState(true)\n  const [isInitialLoad, setIsInitialLoad] = useState(true)\n  const [filtersInitialized, setFiltersInitialized] = useState(false)\n  const requestIdRef = useRef(0)\n  const [purchaseRecipe, setPurchaseRecipe] = useState(null)\n\n  const sources = [\n    { value: 'all', label: 'All Sources' },\n    { value: 'community', label: 'Community' },\n    { value: 'mealdb', label: 'MealDB' }\n  ]\n\n  const dietOptions = [\n    { value: '', label: 'All Diets' },\n    { value: 'vegetarian', label: 'Vegetarian' },\n    { value: 'vegan', label: 'Vegan' },\n    { value: 'gluten-free', label: 'Gluten Free' },\n    { value: 'keto', label: 'Keto' },\n    { value: 'paleo', label: 'Paleo' },\n    { value: 'low-carb', label: 'Low Carb' }\n  ]\n\n  const nutritionOptions = [\n    { value: '', label: 'All Nutrition' },\n    { value: 'high-protein', label: 'High Protein' },\n    { value: 'low-calorie', label: 'Low Calorie' },\n    { value: 'high-fiber', label: 'High Fiber' },\n    { value: 'low-sugar', label: 'Low Sugar' }\n  ]\n\n  useEffect(() => {\n    fetchInitialData()\n  }, [])\n\n  // Initialize filters from URL parameters\n  useEffect(() => {\n    const cuisine = searchParams.get('cuisine')\n    const category = searchParams.get('category')\n    const query = searchParams.get('query')\n    const source = searchParams.get('source')\n\n    if (cuisine) setSelectedCuisine(cuisine)\n    if (category) setSelectedCategory(category)\n    if (query) setSearchTerm(query)\n    if (source && ['all', 'mealdb'].includes(source)) {\n      setSelectedSource(source)\n    }\n\n    setFiltersInitialized(true)\n  }, [searchParams])\n\n  // Debounced ingredient search effect\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedIngredient(selectedIngredient)\n    }, 500) // Wait 500ms after user stops typing\n\n    return () => clearTimeout(timer)\n  }, [selectedIngredient])\n\n  useEffect(() => {\n    if (!filtersInitialized) {\n      return\n    }\n\n    fetchRecipes()\n  }, [filtersInitialized, searchTerm, selectedCategory, selectedCuisine, selectedSource, dietFilter, nutritionFilter, debouncedIngredient])\n\n  const fetchInitialData = async () => {\n    try {\n      // Fetch categories from MealDB\n      const categoriesResponse = await fetch('/api/mealdb?type=categories')\n      if (categoriesResponse.ok) {\n        const categoriesData = await categoriesResponse.json()\n        setCategories(categoriesData)\n      }\n\n      // Fetch cuisines\n      const cuisinesResponse = await fetch('/api/mealdb?type=cuisines')\n      if (cuisinesResponse.ok) {\n        const cuisinesData = await cuisinesResponse.json()\n        setCuisines(cuisinesData)\n      }\n    } catch (error) {\n      console.error('Error fetching initial data:', error)\n    }\n  }\n\n  const fetchRecipes = async (loadMore = false) => {\n    const requestId = ++requestIdRef.current\n    try {\n      // Set loading states\n      if (loadMore) {\n        setIsLoadingMore(true)\n      }\n\n      const currentPage = loadMore ? page + 1 : 1\n      const itemsPerPage = 12\n\n      const combinedResults = []\n      const seen = new Set()\n\n      console.log('🔍 Fetching recipes with params:', {\n        searchTerm,\n        selectedCategory,\n        selectedCuisine,\n        selectedSource,\n        currentPage,\n        itemsPerPage\n      })\n\n      const formatSourceLabel = (key) => {\n        if (key === 'mealdb') return 'MealDB'\n        if (key === 'community') return 'Community'\n        return key.charAt(0).toUpperCase() + key.slice(1)\n      }\n\n      const addRecipes = (incoming = []) => {\n        incoming.forEach((recipe = {}) => {\n          const rawSourceKey = recipe.sourceKey || recipe.source || 'mealdb'\n          const normalizedSourceKey = rawSourceKey.toString().toLowerCase()\n          const identifier = `${normalizedSourceKey}-${recipe.id}-${recipe.title?.toLowerCase()}`\n          if (seen.has(identifier)) {\n            return\n          }\n          seen.add(identifier)\n\n          const hasImage = typeof recipe.image === 'string' && recipe.image.trim().length > 0\n          const displaySource = formatSourceLabel(normalizedSourceKey)\n          const safeImage = hasImage ? recipe.image : '/placeholder-recipe.jpg'\n\n          const numericReadyInMinutes = Number(recipe.readyInMinutes)\n          const hasReadyInMinutes = Number.isFinite(numericReadyInMinutes) && numericReadyInMinutes > 0\n          const prepMinutes = Number(recipe.prepTime)\n          const cookMinutes = Number(recipe.cookTime)\n          const fallbackTotal = [prepMinutes, cookMinutes]\n            .filter((value) => Number.isFinite(value) && value > 0)\n            .reduce((total, value) => total + value, 0)\n\n          combinedResults.push({\n            ...recipe,\n            image: safeImage,\n            hasImage,\n            source: displaySource,\n            sourceKey: normalizedSourceKey,\n            readyInMinutes: hasReadyInMinutes ? numericReadyInMinutes : (fallbackTotal > 0 ? fallbackTotal : null),\n            servings: recipe.servings || null\n          })\n        })\n      }\n\n      // Fetch community recipes if 'all' or 'community' is selected\n      if (selectedSource === 'community' || selectedSource === 'all') {\n        try {\n          const communityParams = new URLSearchParams({\n            page: currentPage,\n            limit: itemsPerPage\n          })\n          \n          // Add filters if they exist\n          if (searchTerm) communityParams.append('search', searchTerm)\n          if (selectedCategory) communityParams.append('category', selectedCategory)\n          if (selectedCuisine) communityParams.append('cuisine', selectedCuisine)\n          \n          console.log('🌐 Fetching community recipes with params:', communityParams.toString())\n          \n          const communityResponse = await fetch(`/api/recipes?${communityParams.toString()}`)\n          \n          if (!communityResponse.ok) {\n            const errorData = await communityResponse.text()\n            console.error('❌ Error fetching community recipes:', {\n              status: communityResponse.status,\n              statusText: communityResponse.statusText,\n              error: errorData\n            })\n            throw new Error(`Failed to fetch community recipes: ${communityResponse.statusText}`)\n          }\n          \n          const communityData = await communityResponse.json()\n          console.log('📦 Received community recipes:', communityData)\n          \n          if (communityData.recipes && Array.isArray(communityData.recipes)) {\n            console.log(`✅ Found ${communityData.recipes.length} community recipes`)\n            const formattedCommunityRecipes = communityData.recipes.map(recipe => {\n              const formatted = {\n                ...recipe,\n                source: 'community',\n                sourceKey: 'community',\n                // Ensure required fields have default values\n                title: recipe.title || 'Untitled Recipe',\n                image: recipe.image || '/placeholder-recipe.jpg'\n              }\n              console.log('📝 Formatted recipe:', { id: recipe.id, title: recipe.title })\n              return formatted\n            })\n            addRecipes(formattedCommunityRecipes)\n          } else {\n            console.warn('⚠️ No recipes array in community data:', communityData)\n          }\n        } catch (error) {\n          console.error('Error fetching community recipes:', error)\n        }\n      }\n\n      // Fetch external recipes if 'all' or 'mealdb' is selected\n      let externalHasMore = false\n      if (selectedSource === 'mealdb' || selectedSource === 'all') {\n        try {\n          const externalParams = new URLSearchParams()\n          if (searchTerm) externalParams.append('query', searchTerm)\n          if (selectedCategory) externalParams.append('category', selectedCategory)\n          if (selectedCuisine) externalParams.append('cuisine', selectedCuisine)\n          if (debouncedIngredient) externalParams.append('ingredient', debouncedIngredient)\n          if (dietFilter) externalParams.append('diet', dietFilter)\n          if (nutritionFilter) externalParams.append('nutrition', nutritionFilter)\n          externalParams.append('source', 'mealdb')\n          externalParams.append('number', itemsPerPage)\n          externalParams.append('offset', String((currentPage - 1) * itemsPerPage))\n\n          const externalResponse = await fetch(`/api/external/recipes?${externalParams.toString()}`)\n          const externalData = await externalResponse.json()\n\n          if (externalData.error) {\n            console.warn('MealDB API returned error:', externalData.error)\n          } else {\n            addRecipes(externalData.recipes || [])\n            externalHasMore = (externalData.recipes || []).length === itemsPerPage\n          }\n        } catch (error) {\n          console.error('Error fetching external recipes:', error)\n        }\n      }\n\n      // Sort by title if needed\n      if (combinedResults.length > 1) {\n        combinedResults.sort((a, b) => (a.title || '').localeCompare(b.title || ''))\n      }\n\n      console.log('📊 Combined results:', {\n        total: combinedResults.length,\n        recipes: combinedResults.map(r => ({ id: r.id, title: r.title }))\n      })\n\n      if (requestId === requestIdRef.current) {\n        if (loadMore) {\n          setRecipes((prevRecipes) => {\n            const newRecipes = [...prevRecipes, ...combinedResults]\n            console.log('🔄 Updated recipes (load more):', newRecipes.length)\n            return newRecipes\n          })\n        } else {\n          console.log('🆕 Set new recipes:', combinedResults.length)\n          setRecipes(combinedResults)\n        }\n\n        setPage(currentPage)\n        const nextHasMore = externalHasMore\n        setHasMore(nextHasMore)\n\n        if (isInitialLoad) {\n          setIsInitialLoad(false)\n        }\n      } else {\n        console.log('⏭️ Ignoring stale recipe response for request', requestId)\n      }\n    } catch (error) {\n      console.error('Error fetching recipes:', error)\n      if (!loadMore) { // Only show error message on initial load, not on 'load more'\n        // Don't load demo data; instead, show an error message\n        setRecipes([])\n      }\n    } finally {\n      setIsLoadingMore(false)\n    }\n  }\n\n  const loadMoreRecipes = async () => {\n    if (isLoadingMore || !hasMore) return\n    await fetchRecipes(true)\n  }\n\n  const handleOpenPurchase = (recipe) => {\n    if (!recipe) return\n    if (!requireAuth('purchase premium recipes')) {\n      return\n    }\n\n    const priceValue = Number.parseFloat(recipe.price)\n    if (!Number.isFinite(priceValue) || priceValue <= 0) {\n      return\n    }\n\n    setPurchaseRecipe({\n      id: recipe.id,\n      slug: recipe.slug,\n      title: recipe.title,\n      price: priceValue,\n      hasPurchased: Boolean(recipe.hasPurchased)\n    })\n  }\n\n  const handleClosePurchase = () => {\n    setPurchaseRecipe(null)\n  }\n\n  const handlePurchaseSuccess = (result) => {\n    if (!result) {\n      return\n    }\n\n    setRecipes((prev) =>\n      prev.map((item) => {\n        const matchesId = result.recipeId && String(item.id) === String(result.recipeId)\n        const matchesSlug = result.recipeSlug && item.slug && item.slug === result.recipeSlug\n        if (matchesId || matchesSlug) {\n          return {\n            ...item,\n            hasPurchased: true\n          }\n        }\n        return item\n      })\n    )\n\n    setPurchaseRecipe((prev) => (prev ? { ...prev, hasPurchased: true } : prev))\n  }\n\n  const toggleFavorite = async (recipeId) => {\n    // This would typically require user authentication\n    // For now, just update the local state\n    setRecipes(recipes.map(recipe => {\n      if (recipe.id === recipeId) {\n        return {\n          ...recipe,\n          isFavorite: !recipe.isFavorite\n        }\n      }\n      return recipe\n    }))\n  }\n\n  const getNutritionBadge = (recipe) => {\n    if (!recipe.nutrition) return null\n\n    const { calories = 0, protein = 0, carbs = 0, fat = 0 } = recipe.nutrition\n\n    if (protein >= 20) return { type: 'protein', label: 'High Protein', color: 'bg-green-100 text-green-800' }\n    if (calories < 300) return { type: 'calorie', label: 'Low Cal', color: 'bg-blue-100 text-blue-800' }\n    if (fat < 10) return { type: 'low-fat', label: 'Low Fat', color: 'bg-yellow-100 text-yellow-800' }\n    return null\n  }\n\n  const RecipeCard = ({ recipe, onPurchase }) => {\n    const [imageSrc, setImageSrc] = useState(recipe.image || '/placeholder-recipe.jpg')\n    const [imageLoaded, setImageLoaded] = useState(false)\n    const [imageError, setImageError] = useState(false)\n\n    useEffect(() => {\n      let isMounted = true\n      let objectUrl = null\n\n      const resolveImage = async () => {\n        const rawUrl = recipe.image?.toString() || ''\n\n        if (!rawUrl) {\n          if (isMounted) {\n            setImageSrc('/placeholder-recipe.jpg')\n            setImageLoaded(false)\n            setImageError(false)\n          }\n          return\n        }\n\n        if (/^https?:/i.test(rawUrl) || /^data:/i.test(rawUrl)) {\n          if (isMounted) {\n            setImageSrc(rawUrl)\n            setImageLoaded(false)\n            setImageError(false)\n          }\n          return\n        }\n\n        try {\n          const response = await fetch(rawUrl, { cache: 'no-store' })\n          if (!response.ok) {\n            throw new Error(`Failed to fetch recipe image (${response.status})`)\n          }\n          const blob = await response.blob()\n          objectUrl = URL.createObjectURL(blob)\n          if (isMounted) {\n            setImageSrc(objectUrl)\n            setImageLoaded(false)\n            setImageError(false)\n          }\n        } catch (error) {\n          console.error('Unable to resolve recipe image:', error)\n          if (isMounted) {\n            setImageSrc('/placeholder-recipe.jpg')\n            setImageLoaded(false)\n            setImageError(true)\n          }\n          if (objectUrl) {\n            URL.revokeObjectURL(objectUrl)\n            objectUrl = null\n          }\n        }\n      }\n\n      resolveImage()\n\n      return () => {\n        isMounted = false\n        if (objectUrl) {\n          URL.revokeObjectURL(objectUrl)\n        }\n      }\n    }, [recipe.image])\n\n    const nutritionBadge = getNutritionBadge(recipe)\n    const normalizedSourceKey = (recipe.sourceKey || recipe.source || '').toString().toLowerCase()\n    const rawPrice = recipe.price !== null && recipe.price !== undefined ? Number.parseFloat(recipe.price) : NaN\n    const isCommunityRecipe = normalizedSourceKey === 'community'\n    const alreadyPurchased = Boolean(recipe.hasPurchased)\n    const isPremiumRecipe = isCommunityRecipe && Boolean(recipe.isPremium)\n    const hasValidPrice = Number.isFinite(rawPrice) && rawPrice > 0\n    const showPrice = isPremiumRecipe && hasValidPrice\n    const formattedPrice = showPrice ? pesoFormatter.format(rawPrice) : null\n    const requiresPurchase = showPrice && !alreadyPurchased\n\n    const toMinutes = (value) => {\n      if (typeof value === 'number') return value\n      const parsed = Number.parseInt(value, 10)\n      return Number.isFinite(parsed) ? parsed : null\n    }\n\n    const readyMinutes = toMinutes(recipe.readyInMinutes)\n    const prepMinutes = toMinutes(recipe.prepTime)\n    const cookMinutes = toMinutes(recipe.cookTime)\n    const fallbackMinutes = (prepMinutes ?? 0) + (cookMinutes ?? 0)\n    const displayReadyMinutes = readyMinutes ?? (fallbackMinutes > 0 ? fallbackMinutes : null)\n    const isMealdb = normalizedSourceKey === 'mealdb'\n    const showCookingTime = !isMealdb && displayReadyMinutes !== null\n    const showServings = !isMealdb && (recipe.servings || recipe.servings === 0)\n\n    return (\n      <div className=\"bg-white dark:bg-gray-900 rounded-xl shadow-md overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border border-transparent dark:border-gray-800 h-full flex flex-col\">\n        <div className=\"relative w-full flex-shrink-0 overflow-hidden aspect-[4/3]\">\n          <img\n            src={imageSrc}\n            alt={recipe.title}\n            className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-500\"\n            style={{ opacity: imageLoaded ? 1 : 0, transition: 'opacity 200ms ease-in-out' }}\n            onLoad={() => setImageLoaded(true)}\n            onError={() => {\n              if (!imageError) {\n                setImageSrc('/placeholder-recipe.jpg')\n                setImageLoaded(false)\n                setImageError(true)\n              }\n            }}\n          />\n          <div className=\"absolute top-2 right-2 bg-green-600 text-white text-xs font-bold px-2 py-1 rounded-full\">\n            {recipe.source || 'MealDB'}\n          </div>\n        </div>\n        <div className=\"p-5 flex flex-col flex-1\">\n          <h3 className=\"text-lg font-bold mb-2 line-clamp-2 text-olive-900 dark:text-olive-200\">\n            {recipe.title}\n          </h3>\n          <div className=\"flex flex-wrap gap-2 mb-3\">\n            {nutritionBadge && (\n              <span className={`text-xs px-2 py-1 rounded-full ${nutritionBadge.color}`}>\n                {nutritionBadge.label}\n              </span>\n            )}\n            {recipe.dietLabels && recipe.dietLabels.length > 0 && (\n              <span className=\"text-xs bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-200 px-2 py-1 rounded-full\">\n                {recipe.dietLabels[0]}\n              </span>\n            )}\n            {recipe.healthLabels && recipe.healthLabels.length > 0 && (\n              <span className=\"text-xs bg-blue-100 text-blue-800 dark:bg-blue-900/40 dark:text-blue-200 px-2 py-1 rounded-full\">\n                {recipe.healthLabels[0]}\n              </span>\n            )}\n            {recipe.category && (\n              <span className=\"text-xs bg-purple-100 text-purple-800 dark:bg-purple-900/40 dark:text-purple-200 px-2 py-1 rounded-full\">\n                {recipe.category}\n              </span>\n            )}\n            {recipe.cuisine && (\n              <span className=\"text-xs bg-orange-100 text-orange-800 dark:bg-orange-900/40 dark:text-orange-200 px-2 py-1 rounded-full\">\n                {recipe.cuisine}\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center justify-between text-sm text-olive-700 dark:text-olive-200 mb-4 flex-wrap gap-4\">\n            {showCookingTime && (\n              <div className=\"flex items-center\">\n                <Clock className=\"w-4 h-4 mr-1 text-green-600\" />\n                <span>{displayReadyMinutes} min</span>\n              </div>\n            )}\n            {showServings && (\n              <div className=\"flex items-center\">\n                <Users className=\"w-4 h-4 mr-1 text-green-600\" />\n                <span>{recipe.servings || 4} servings</span>\n              </div>\n            )}\n          </div>\n          <div\n            className={`flex items-center mt-auto gap-3 ${showPrice ? 'justify-between' : 'justify-end'}`}\n          >\n            {showPrice && (\n              <div className=\"flex flex-col\">\n                <span className=\"text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400\">\n                  Price\n                </span>\n                <span className=\"text-lg font-semibold text-olive-800 dark:text-olive-200\">\n                  {formattedPrice}\n                </span>\n                {alreadyPurchased && (\n                  <span className=\"text-xs font-medium text-green-600 dark:text-green-300\">\n                    Purchased\n                  </span>\n                )}\n              </div>\n            )}\n            <div className=\"flex items-center gap-2\">\n              {requiresPurchase ? (\n                <button\n                  type=\"button\"\n                  onClick={() => onPurchase?.(recipe)}\n                  className=\"text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300 text-sm font-medium flex items-center group\"\n                >\n                  Preview & Buy\n                  <svg\n                    className=\"w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </button>\n              ) : (\n                <Link\n                  href={`/recipes/${recipe.slug || recipe.id}?source=${encodeURIComponent(recipe.sourceKey || recipe.source?.toLowerCase() || 'mealdb')}`}\n                  className=\"text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300 text-sm font-medium flex items-center group\"\n                >\n                  View Recipe\n                  <svg\n                    className=\"w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"min-h-screen pt-20 bg-soft-50 dark:bg-gray-950\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-olive-800 dark:text-olive-200 mb-4 font-fredoka\">Recipes</h1>\n            <p className=\"text-lg text-olive-700 dark:text-olive-200/80 font-fredoka\">\n              Discover amazing recipes from trusted food APIs\n            </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-md border border-soft-200 dark:border-gray-800 p-6 mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 mb-4\">\n            {/* Search */}\n            <div className=\"relative xl:col-span-2\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-olive-500 h-5 w-5\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search recipes...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"search-input w-full pl-10 pr-4 py-2 border border-soft-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-olive-500 bg-white dark:bg-gray-800 text-olive-800 dark:text-gray-100 placeholder-olive-600 dark:placeholder-gray-400 font-fredoka\"\n              />\n            </div>\n\n            {/* Category Filter */}\n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"filter-input px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100\"\n            >\n              <option value=\"\">All Categories</option>\n              {categories.map((category) => (\n                <option key={category.idCategory} value={category.strCategory}>\n                  {category.strCategory}\n                </option>\n              ))}\n            </select>\n\n            {/* Cuisine Filter */}\n            <select\n              value={selectedCuisine}\n              onChange={(e) => setSelectedCuisine(e.target.value)}\n              className=\"filter-input px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100\"\n            >\n              <option value=\"\">All Cuisines</option>\n              {cuisines.map((cuisine) => (\n                <option key={cuisine.strArea} value={cuisine.strArea}>\n                  {cuisine.strArea}\n                </option>\n              ))}\n            </select>\n\n            {/* Ingredient Filter */}\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                placeholder=\"Search by ingredient...\"\n                value={selectedIngredient}\n                onChange={(e) => setSelectedIngredient(e.target.value)}\n                className=\"filter-input px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent w-full bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100 placeholder-gray-400\"\n              />\n              {selectedIngredient && selectedIngredient !== debouncedIngredient && (\n                <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-xs text-gray-400\">\n                  Searching...\n                </div>\n              )}\n            </div>\n\n            {/* Source Filter */}\n            <select\n              value={selectedSource}\n              onChange={(e) => setSelectedSource(e.target.value)}\n              className=\"filter-input px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100\"\n            >\n              {sources.map((source) => (\n                <option key={source.value} value={source.value}>\n                  {source.label}\n                </option>\n              ))}\n            </select>\n\n            {/* Diet Filter */}\n            <select\n              value={dietFilter}\n              onChange={(e) => setDietFilter(e.target.value)}\n              className=\"filter-input px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100\"\n            >\n              {dietOptions.map((diet) => (\n                <option key={diet.value} value={diet.value}>\n                  {diet.label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Nutrition Filter */}\n          <div className=\"mb-4\">\n            <select\n              value={nutritionFilter}\n              onChange={(e) => setNutritionFilter(e.target.value)}\n              className=\"filter-input px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-olive-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100\"\n            >\n              {nutritionOptions.map((option) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex flex-wrap gap-2 items-center\">\n              <p className=\"text-olive-700 dark:text-olive-200 font-fredoka\">\n                {recipes.length} recipe{recipes.length !== 1 ? 's' : ''} found\n                {selectedSource !== 'all' && ` from ${sources.find(s => s.value === selectedSource)?.label}`}\n              </p>\n\n              {/* Active Filters Display */}\n              <div className=\"flex flex-wrap gap-1 ml-4\">\n                {searchTerm && (\n                  <span className=\"bg-olive-100 text-olive-800 dark:bg-olive-900/40 dark:text-olive-200 px-2 py-1 rounded-full text-xs\">\n                    Search: \"{searchTerm}\"\n                  </span>\n                )}\n                {selectedCategory && (\n                  <span className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/40 dark:text-blue-200 px-2 py-1 rounded-full text-xs\">\n                    Category: {selectedCategory}\n                  </span>\n                )}\n                {selectedCuisine && (\n                  <span className=\"bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-200 px-2 py-1 rounded-full text-xs\">\n                    Cuisine: {selectedCuisine}\n                  </span>\n                )}\n                {debouncedIngredient && (\n                  <span className=\"bg-purple-100 text-purple-800 dark:bg-purple-900/40 dark:text-purple-200 px-2 py-1 rounded-full text-xs\">\n                    Ingredient: {debouncedIngredient}\n                  </span>\n                )}\n                {dietFilter && (\n                  <span className=\"bg-orange-100 text-orange-800 dark:bg-orange-900/40 dark:text-orange-200 px-2 py-1 rounded-full text-xs\">\n                    Diet: {dietOptions.find(d => d.value === dietFilter)?.label}\n                  </span>\n                )}\n                {nutritionFilter && (\n                  <span className=\"bg-pink-100 text-pink-800 dark:bg-pink-900/40 dark:text-pink-200 px-2 py-1 rounded-full text-xs\">\n                    Nutrition: {nutritionOptions.find(n => n.value === nutritionFilter)?.label}\n                  </span>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Link href=\"/cuisines\" className=\"bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200 px-4 py-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors flex items-center gap-2\">\n                <Utensils className=\"h-4 w-4\" />\n                Browse Cuisines\n              </Link>\n              <Link href=\"/recipes/create\" className=\"bg-olive-600 text-white px-4 py-2 rounded-lg hover:bg-olive-700 transition-colors flex items-center gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Recipe\n              </Link>\n            </div>\n          </div>\n        </div>\n\n        {/* Recipes Grid */}\n        {recipes.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <div className=\"text-gray-400 dark:text-gray-500 mb-4\">\n              <Search className=\"h-16 w-16 mx-auto\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-olive-800 dark:text-olive-200 mb-2\">\n              {selectedSource === 'edamam' ? 'Recipes currently unavailable' : 'No recipes found'}\n            </h3>\n            <p className=\"text-olive-600 dark:text-olive-200/80 mb-4\">\n              {selectedSource === 'edamam'\n                ? 'Unable to load recipes. This might be due to API limitations or connectivity issues.'\n                : isInitialLoad\n                  ? 'Unable to load recipes. Please check your internet connection or try again later.'\n                  : 'Try adjusting your search criteria'\n              }\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <Link href=\"/cuisines\" className=\"text-olive-600 hover:text-olive-700 dark:text-olive-200 dark:hover:text-olive-100 font-medium\">\n                Browse cuisines →\n              </Link>\n              <button\n                onClick={() => {\n                  setSearchTerm('')\n                  setSelectedCategory('')\n                  setSelectedCuisine('')\n                  setDietFilter('')\n                  setNutritionFilter('')\n                  setSelectedSource('mealdb')\n                  setSelectedIngredient('')\n                  setDebouncedIngredient('')\n                }}\n                className=\"text-olive-600 hover:text-olive-700 dark:text-olive-200 dark:hover:text-olive-100 font-medium\"\n              >\n                Clear all filters →\n              </button>\n            </div>\n          </div>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-8 auto-rows-[minmax(26rem,_auto)]\">\n              {recipes.map((recipe, index) => (\n                <RecipeCard\n                  key={`${recipe.id}-${index}`}\n                  recipe={recipe}\n                  onPurchase={handleOpenPurchase}\n                />\n              ))}\n            </div>\n\n            {/* Load More Button */}\n            {hasMore && !isInitialLoad && (\n              <div className=\"text-center mt-8\">\n                <button\n                  onClick={loadMoreRecipes}\n                  disabled={isLoadingMore}\n                  className={`px-6 py-3 text-white rounded-lg transition-colors flex items-center justify-center gap-2 font-medium mx-auto ${\n                    isLoadingMore \n                      ? 'bg-olive-500 cursor-not-allowed' \n                      : 'bg-olive-600 hover:bg-olive-700'\n                  }`}\n                >\n                  {isLoadingMore ? (\n                    <>\n                      <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                        <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                        <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                      </svg>\n                      Loading...\n                    </>\n                  ) : (\n                    'Load More Recipes'\n                  )}\n                </button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      </div>\n      {purchaseRecipe && (\n        <RecipePurchaseModal\n          isOpen={Boolean(purchaseRecipe)}\n          onClose={handleClosePurchase}\n          recipeId={purchaseRecipe.slug || purchaseRecipe.id}\n          recipeTitle={purchaseRecipe.title}\n          price={purchaseRecipe.price}\n          onSuccess={handlePurchaseSuccess}\n          requireAuth={requireAuth}\n        />\n      )}\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\subscribe\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\app\\subscription\\success\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\auth.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\AuthProvider.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ConditionalHeader.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\Footer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\Header.js","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":803,"column":21,"nodeType":"JSXOpeningElement","endLine":807,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { useTheme } from 'next-themes';\nimport {\n  Sun,\n  Moon,\n  Menu,\n  X,\n  ChefHat,\n  LogIn,\n  ChevronRight,\n  ArrowRight,\n  MessageCircle,\n  Phone,\n  Video,\n  MoreHorizontal,\n  Minus,\n  Smile,\n  Paperclip,\n  ThumbsUp,\n  Send,\n  Gamepad2,\n  Utensils,\n  User,\n  ChevronDown,\n  ShieldCheck,\n  Crown,\n  Home,\n  Heart,\n  Sparkles,\n  ClipboardList,\n  Info\n} from 'lucide-react';\nimport dynamic from 'next/dynamic';\nimport { useSession, signOut as nextAuthSignOut } from 'next-auth/react';\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { LogOut } from 'lucide-react';\n\n// Dynamically import the MemoryGame component with no SSR\nconst MemoryGame = dynamic(() => import('./games/MemoryGame'), {\n  ssr: false,\n});\n\nconst StickerIcon = ({ className = '' }) => (\n  <svg\n    className={className}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M12 3C7.029 3 3 7.029 3 12s4.029 9 9 9c1.657 0 3-1.343 3-3h3c1.657 0 3-1.343 3-3 0-4.971-4.029-9-9-9z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M9 10h.01M15 10h.01M9 15c.75-.667 1.75-1 3-1s2.25.333 3 1\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nconst GifIcon = ({ className = '' }) => (\n  <svg\n    className={className}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <rect\n      x=\"3\"\n      y=\"5\"\n      width=\"18\"\n      height=\"14\"\n      rx=\"3\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n    />\n    <path\n      d=\"M8 12.5h2v1c0 1.105-.895 2-2 2s-2-.895-2-2v-2c0-1.105.895-2 2-2 .74 0 1.386.402 1.732 1\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M13 9.5v6\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n    />\n    <path\n      d=\"M17 9.5h-2v6\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport default function Header() {\n  // Hooks must be called unconditionally at the top level\n  const { data: session, status, update } = useSession();\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [userMenuOpen, setUserMenuOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(status === 'loading');\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [showMemoryGame, setShowMemoryGame] = useState(false);\n  const [gameOpen, setGameOpen] = useState(false);\n  const [gameScore, setGameScore] = useState(0);\n  const [gameMode, setGameMode] = useState(null);\n  const [showPricingModal, setShowPricingModal] = useState(false);\n  const [hasPremiumAccess, setHasPremiumAccess] = useState(false);\n  const [chatOpen, setChatOpen] = useState(false);\n  const defaultChatConversations = useMemo(\n    () => [\n      {\n        id: 'ava-martinez',\n        name: 'Ava Martinez',\n        email: 'ava@savoryflavors.com',\n        lastActive: '2 min ago',\n        preview: 'Any tips for keeping pesto bright green?',\n        messages: [\n          {\n            id: 'ava-1',\n            senderName: 'Ava Martinez',\n            senderEmail: 'ava@savoryflavors.com',\n            text: 'Hey! Any tips for keeping pesto bright green?',\n            timestamp: '2 min ago'\n          },\n          {\n            id: 'ava-2',\n            senderName: 'You',\n            senderEmail: 'current-user',\n            text: 'Use chilled olive oil and blend in bursts to avoid heat.',\n            timestamp: '1 min ago'\n          }\n        ]\n      },\n      {\n        id: 'liam-chen',\n        name: 'Liam Chen',\n        email: 'liam@savoryflavors.com',\n        lastActive: '5 min ago',\n        preview: 'I posted a new ramen broth technique.',\n        messages: [\n          {\n            id: 'liam-1',\n            senderName: 'Liam Chen',\n            senderEmail: 'liam@savoryflavors.com',\n            text: 'Just shared a new ramen broth technique. Thoughts?',\n            timestamp: '5 min ago'\n          }\n        ]\n      },\n      {\n        id: 'priya-das',\n        name: 'Priya Das',\n        email: 'priya@savoryflavors.com',\n        lastActive: 'Online',\n        preview: 'Can you review my dessert menu draft?',\n        messages: [\n          {\n            id: 'priya-1',\n            senderName: 'Priya Das',\n            senderEmail: 'priya@savoryflavors.com',\n            text: 'Could you review my dessert menu draft when you have a minute?',\n            timestamp: 'Just now'\n          }\n        ]\n      }\n    ],\n    []\n  );\n  const [chatConversations, setChatConversations] = useState(defaultChatConversations);\n  const [activeChatId, setActiveChatId] = useState(defaultChatConversations[0]?.id ?? null);\n  const [chatHeads, setChatHeads] = useState([]);\n  const [chatInput, setChatInput] = useState('');\n  const userMenuRef = useRef(null);\n  const chatMenuRef = useRef(null);\n  const hasAttemptedSessionRefresh = useRef(false);\n  const router = useRouter();\n  const userEmail = session?.user?.email?.toLowerCase();\n  const userRole = session?.user?.role?.toLowerCase();\n  const isAdminUser = userRole === 'admin' || userEmail === 'savoryadmin@example.com';\n  const isPremiumUser = userRole === 'premium';\n\n  // Require authentication function\n  const requireAuth = (feature) => {\n    const confirmLogin = confirm(`Please sign in to ${feature}. Do you want to log in now?`);\n    if (confirmLogin) {\n      router.push(`/auth/login?callbackUrl=${encodeURIComponent(window.location.pathname)}`);\n    }\n  };\n\n  // Handle session state\n  useEffect(() => {\n    let isActive = true;\n\n    const checkSession = async () => {\n      if (status === 'loading') {\n        if (isActive) {\n          setIsLoading(true);\n        }\n        return;\n      }\n\n      if (status === 'authenticated') {\n        if (isActive) {\n          setIsLoading(false);\n        }\n        return;\n      }\n\n      if (status === 'unauthenticated') {\n        if (hasAttemptedSessionRefresh.current) {\n          if (isActive) {\n            setIsLoading(false);\n          }\n          return;\n        }\n\n        hasAttemptedSessionRefresh.current = true;\n        if (isActive) {\n          setIsLoading(true);\n        }\n\n        try {\n          const result = await update();\n          if (result?.error) {\n            console.error('Session refresh failed:', result.error);\n          }\n        } catch (error) {\n          console.error('Session check error:', error);\n        } finally {\n          if (isActive) {\n            setIsLoading(false);\n          }\n        }\n      }\n    };\n\n    checkSession();\n\n    return () => {\n      isActive = false;\n    };\n  }, [status, update]);\n\n  // Set mounted state\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Handle click outside for user menu\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (userMenuRef.current && !userMenuRef.current.contains(event.target)) {\n        setUserMenuOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  useEffect(() => {\n    const handleChatClickOutside = (event) => {\n      if (chatMenuRef.current && !chatMenuRef.current.contains(event.target)) {\n        setChatOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleChatClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleChatClickOutside);\n    };\n  }, []);\n\n  // Toggle theme\n  const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  };\n\n  // Toggle mobile menu\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n\n  const toggleChatDropdown = () => {\n    setChatOpen((prev) => !prev);\n  };\n\n  const handleSelectConversation = (conversationId) => {\n    setActiveChatId(conversationId);\n\n    setChatHeads((prev) => {\n      const exists = prev.some((head) => head.conversationId === conversationId);\n      if (exists) {\n        return prev.map((head) =>\n          head.conversationId === conversationId\n            ? { ...head, minimized: false }\n            : head\n        );\n      }\n\n      const conversation = chatConversations.find((item) => item.id === conversationId);\n      if (!conversation) {\n        return prev;\n      }\n\n      const newHead = {\n        id: `chat-head-${conversationId}`,\n        conversationId,\n        name: conversation.name,\n        preview: conversation.preview,\n        minimized: false\n      };\n\n      return [...prev, newHead];\n    });\n  };\n\n  const handleChatSubmit = (event) => {\n    event.preventDefault();\n\n    if (!chatInput.trim() || !activeChatId) {\n      return;\n    }\n\n    const timeLabel = new Date().toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n\n    const authorName =\n      session?.user?.name?.trim() || session?.user?.email?.split('@')[0] || 'You';\n    const userMessage = {\n      id: `user-${Date.now()}`,\n      senderName: authorName,\n      senderEmail: userEmail || 'current-user',\n      text: chatInput.trim(),\n      timestamp: timeLabel\n    };\n\n    setChatConversations((prev) =>\n      prev.map((conversation) =>\n        conversation.id === activeChatId\n          ? {\n              ...conversation,\n              messages: [...conversation.messages, userMessage],\n              preview: userMessage.text,\n              lastActive: 'Just now'\n            }\n          : conversation\n      )\n    );\n\n    setChatHeads((prev) =>\n      prev.map((head) =>\n        head.conversationId === activeChatId\n          ? {\n              ...head,\n              preview: userMessage.text,\n              minimized: false\n            }\n          : head\n      )\n    );\n    setChatInput('');\n  };\n\n  const handleCloseChatHead = (conversationId) => {\n    setChatHeads((prev) => prev.filter((head) => head.conversationId !== conversationId));\n\n    if (activeChatId === conversationId) {\n      const nextActive = chatConversations.find((conversation) =>\n        conversation.id !== conversationId\n      );\n      setActiveChatId(nextActive?.id ?? null);\n    }\n  };\n\n  const handleToggleChatHead = (conversationId) => {\n    setChatHeads((prev) =>\n      prev.map((head) =>\n        head.conversationId === conversationId\n          ? { ...head, minimized: !head.minimized }\n          : head\n      )\n    );\n  };\n\n  // Check subscription status for premium access\n  useEffect(() => {\n    let isMounted = true;\n\n    const fetchSubscription = async () => {\n      try {\n        const response = await fetch('/api/user/subscription', { cache: 'no-store' });\n        if (!response.ok) {\n          if (isMounted) {\n            setHasPremiumAccess(isPremiumUser);\n          }\n          return;\n        }\n\n        const data = await response.json();\n        const activeSubscription =\n          data?.status === 'active' ||\n          data?.hasSubscription === true ||\n          data?.plan?.name?.toLowerCase().includes('premium');\n\n        if (isMounted) {\n          setHasPremiumAccess(activeSubscription || isPremiumUser);\n        }\n      } catch (error) {\n        console.error('Subscription fetch error:', error);\n        if (isMounted) {\n          setHasPremiumAccess(isPremiumUser);\n        }\n      }\n    };\n\n    if (status === 'authenticated') {\n      fetchSubscription();\n    } else if (isMounted) {\n      setHasPremiumAccess(false);\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [status, isPremiumUser]);\n\n  // Handle FitSavory click\n  const handleFitSavoryClick = (e) => {\n    e.preventDefault();\n    if (status === 'authenticated') {\n      if (hasPremiumAccess || isPremiumUser) {\n        router.push('/fitsavory');\n      } else {\n        setShowPricingModal(true);\n      }\n    } else {\n      requireAuth('access FitSavory features');\n    }\n  };\n\n  // Close mobile menu\n  const closeMobileMenu = () => {\n    setMobileMenuOpen(false);\n  };\n\n  // Handle sign out\n  const handleSignOut = async () => {\n    try {\n      await nextAuthSignOut({ callbackUrl: '/auth/login' });\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // Show loading state only during initial load\n  if (!mounted || (isLoading && !session)) {\n    return (\n      <>\n        <header className=\"fixed top-0 left-0 z-50 w-full bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"container flex h-20 items-center justify-between\">\n            <div className=\"animate-pulse h-8 w-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            <div className=\"animate-pulse h-8 w-20 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n          </div>\n        </header>\n      </>\n    );\n  }\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-50 bg-white dark:bg-gray-900 shadow-sm\">\n      <div className=\"container flex h-20 items-center\">\n        {/* Logo */}\n        <div className=\"flex items-center gap-2 absolute left-4\">\n          <Link \n            href=\"/\" \n            className=\"relative inline-flex items-center justify-center overflow-hidden font-medium transition-all rounded-lg group py-2 px-4 h-11 no-underline hover:no-underline\" \n            onClick={closeMobileMenu}\n          >\n            <ChefHat className=\"h-6 w-6 text-green-600 dark:group-hover:text-white group-hover:text-white transition-colors duration-300 z-10\" />\n            <span className=\"text-2xl md:text-[1.75rem] font-bold bg-gradient-to-r from-green-600 to-green-400 bg-clip-text text-transparent dark:group-hover:text-white group-hover:text-green-700 dark:group-hover:from-white dark:group-hover:to-white group-hover:from-green-700 group-hover:to-green-600 transition-all duration-300 z-10 ml-2\">\n              SavoryFlavors\n            </span>\n            <span className=\"absolute bottom-0 left-0 w-0 h-0 transition-all duration-500 ease-out transform rounded-full bg-green-600 dark:group-hover:bg-green-600 group-hover:bg-green-100 group-hover:w-48 group-hover:h-48 group-hover:-ml-2 group-hover:translate-x-full group-hover:translate-y-full\"></span>\n          </Link>\n        </div>\n\n        {/* Desktop Navigation */}\n        <nav className=\"hidden md:flex items-center justify-center flex-1 space-x-2\">\n          {[\n            { href: \"/\", label: \"Home\" },\n            { href: \"/recipes\", label: \"Recipes\" },\n            { href: \"/cuisines\", label: \"Cuisines\" },\n            { \n              href: \"/fitsavory\", \n              label: \"FitSavory\", \n              isSpecial: true, \n              requiresAuth: true,\n              onClick: handleFitSavoryClick\n            },\n            { href: \"/favorites\", label: \"Favorites\" },\n            { href: \"/community\", label: \"Community\" }\n          ].map((item) => (\n            <div key={item.href}>\n              {item.requiresAuth ? (\n                <button\n                  onClick={(e) => {\n                    if (item.onClick) {\n                      item.onClick(e);\n                    } else if (status === 'authenticated') {\n                      window.location.href = item.href;\n                    } else {\n                      requireAuth('access this feature');\n                    }\n                  }}\n                  className={`\n                    relative inline-flex items-center justify-center overflow-hidden font-medium transition-all rounded-lg group py-2 px-4 h-11\n                    text-[0.95rem] leading-snug mx-0.5\n                    ${item.isSpecial\n                      ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg hover:shadow-green-400/30'\n                      : 'bg-gray-100 dark:bg-gray-800/30 text-gray-700 dark:text-gray-200 hover:text-green-600 dark:hover:text-green-400'}\n                  `}\n                >\n                  <span className={`absolute bottom-0 left-0 w-0 h-0 transition-all duration-500 ease-out transform rounded-full ${item.isSpecial ? 'bg-emerald-600' : 'bg-green-600'} group-hover:w-48 group-hover:h-48 group-hover:-ml-2 group-hover:translate-x-full group-hover:translate-y-full`}></span>\n                  <span className={`relative w-full text-left transition-colors duration-300 ease-in-out font-[500] ${\n                    item.isSpecial\n                      ? 'group-hover:text-white'\n                      : 'group-hover:text-gray-900 dark:group-hover:text-white'\n                  }`}>\n                    {item.label}\n                  </span>\n                </button>\n              ) : (\n                <Link\n                  href={item.href}\n                  className={`\n                    relative inline-flex items-center justify-center overflow-hidden font-medium transition-all rounded-lg group py-2 px-4 h-11\n                    text-[0.95rem] leading-snug mx-0.5\n                    ${item.isSpecial\n                      ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg hover:shadow-green-400/30'\n                      : 'bg-gray-100 dark:bg-gray-800/30 text-gray-700 dark:text-gray-200 hover:text-green-600 dark:hover:text-green-400'}\n                  `}\n                >\n                  <span className={`absolute bottom-0 left-0 w-0 h-0 transition-all duration-500 ease-out transform rounded-full ${item.isSpecial ? 'bg-emerald-600' : 'bg-green-600'} group-hover:w-48 group-hover:h-48 group-hover:-ml-2 group-hover:translate-x-full group-hover:translate-y-full`}></span>\n                  <span className={`relative w-full text-left transition-colors duration-300 ease-in-out font-[500] ${\n                    item.isSpecial\n                      ? 'group-hover:text-white'\n                      : 'group-hover:text-gray-900 dark:group-hover:text-white'\n                  }`}>\n                    {item.label}\n                  </span>\n                </Link>\n              )}\n            </div>\n          ))}\n        </nav>\n\n        <div className=\"flex items-center gap-2 absolute right-4\">\n          {/* Theme Toggle */}\n          <button\n            onClick={toggleTheme}\n            className=\"hidden md:inline-flex p-2 rounded-md hover:bg-accent\"\n            aria-label=\"Toggle theme\"\n          >\n            {mounted ? (\n              theme === 'dark' ? (\n                <Sun className=\"h-5 w-5\" />\n              ) : (\n                <Moon className=\"h-5 w-5\" />\n              )\n            ) : (\n              <div className=\"h-5 w-5\" />\n            )}\n          </button>\n\n          {/* Game Controller Button */}\n          <button\n            className=\"p-2 rounded-md hover:bg-accent relative group\"\n            aria-label=\"Play Memory Game\"\n            onClick={() => setShowMemoryGame(true)}\n          >\n            <Gamepad2 className=\"h-5 w-5 text-gray-700 dark:text-gray-200 group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors\" />\n          </button>\n          \n          {/* Memory Game Modal */}\n          {showMemoryGame && (\n            <MemoryGame onClose={() => setShowMemoryGame(false)} canRecord={status === 'authenticated'} />\n          )}\n\n          {/* Messages Button */}\n          {status === 'authenticated' && (\n            <div className=\"relative\" ref={chatMenuRef}>\n              <button\n                type=\"button\"\n                onClick={toggleChatDropdown}\n                className=\"p-2 rounded-md hover:bg-accent relative group\"\n                aria-label=\"Open messages\"\n                aria-haspopup=\"dialog\"\n                aria-expanded={chatOpen}\n              >\n                <MessageCircle className=\"h-5 w-5 text-gray-700 dark:text-gray-200 group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors\" />\n              </button>\n\n              {chatOpen && (\n                <div className=\"absolute right-0 mt-2 w-80 rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 shadow-xl z-50\">\n                  <div className=\"flex items-center justify-between px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\n                    <div>\n                      <p className=\"text-sm font-semibold text-gray-800 dark:text-gray-100\">\n                        Direct Messages\n                      </p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Chat privately with other SavoryFlavors members\n                      </p>\n                    </div>\n                    <button\n                      type=\"button\"\n                      className=\"p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n                      onClick={() => setChatOpen(false)}\n                      aria-label=\"Close chat\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n\n                  <div className=\"px-3 py-2 border-b border-gray-200 dark:border-gray-800 space-y-1\">\n                    {chatConversations.map((conversation) => {\n                      const isActive = conversation.id === activeChatId;\n\n                      return (\n                        <button\n                          key={conversation.id}\n                          type=\"button\"\n                          onClick={() => handleSelectConversation(conversation.id)}\n                          className={`w-full rounded-lg px-3 py-2 text-left transition-colors ${\n                            isActive\n                              ? 'bg-green-600 text-white shadow-sm'\n                              : 'hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-800 dark:text-gray-100'\n                          }`}\n                        >\n                          <div className=\"flex items-center justify-between text-xs\">\n                            <span className={`font-semibold ${isActive ? 'text-white' : 'text-gray-900 dark:text-gray-100'}`}>\n                              {conversation.name}\n                            </span>\n                            <span className={`ml-2 ${isActive ? 'text-white/80' : 'text-gray-500 dark:text-gray-400'}`}>\n                              {conversation.lastActive}\n                            </span>\n                          </div>\n                          <p className={`mt-1 text-xs ${isActive ? 'text-white/70' : 'text-gray-500 dark:text-gray-400'}`}>\n                            {conversation.lastActive}\n                          </p>\n                        </button>\n                      );\n                    })}\n\n                    {!chatConversations.length && (\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center py-2\">\n                        No conversations yet.\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"max-h-48 overflow-y-auto px-4 py-3 space-y-3 bg-gray-50 dark:bg-gray-800/50\">\n                    {chatConversations.length === 0 && (\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\n                        Start a conversation to see messages here.\n                      </p>\n                    )}\n\n                    {chatConversations.length > 0 && !activeChatId && (\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\n                        Select a conversation to view messages.\n                      </p>\n                    )}\n\n                    {chatConversations.length > 0 && activeChatId && (\n                      (chatConversations.find((conversation) => conversation.id === activeChatId)?.messages || []).map((message) => {\n                        const senderEmail = message.senderEmail?.toLowerCase();\n                        const isOwnMessage = senderEmail\n                          ? senderEmail === userEmail\n                          : message.senderName?.toLowerCase() === 'you';\n\n                        return (\n                          <div\n                            key={message.id}\n                            className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}\n                          >\n                            <div\n                              className={`max-w-[230px] rounded-2xl px-3 py-2 text-sm shadow-sm ${\n                                isOwnMessage\n                                  ? 'bg-green-600 text-white'\n                                  : 'bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-100 border border-gray-200 dark:border-gray-700'\n                              }`}\n                            >\n                              <span\n                                className={`text-[11px] font-semibold ${\n                                  isOwnMessage ? 'text-white/80' : 'text-green-600 dark:text-green-300'\n                                }`}\n                              >\n                                {isOwnMessage\n                                  ? 'You'\n                                  : message.senderName || message.senderEmail || 'Guest'}\n                              </span>\n                              <p className=\"mt-1 whitespace-pre-wrap\">{message.text}</p>\n                              <span\n                                className={`mt-2 block text-[10px] ${\n                                  isOwnMessage\n                                    ? 'text-white/70'\n                                    : 'text-gray-500 dark:text-gray-400'\n                                }`}\n                              >\n                                {message.timestamp}\n                              </span>\n                            </div>\n                          </div>\n                        );\n                      })\n                    )}\n                  </div>\n\n                  <form onSubmit={handleChatSubmit} className=\"p-3 border-t border-gray-200 dark:border-gray-700\">\n                    <div className=\"flex items-center gap-2\">\n                      <input\n                        type=\"text\"\n                        value={chatInput}\n                        onChange={(event) => setChatInput(event.target.value)}\n                        className=\"flex-1 rounded-md border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-900 text-sm text-gray-900 dark:text-gray-100 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500\"\n                        placeholder={activeChatId ? 'Write a message...' : 'Select a conversation...'}\n                        disabled={!activeChatId}\n                      />\n                      <button\n                        type=\"submit\"\n                        className=\"inline-flex items-center justify-center rounded-md bg-green-600 hover:bg-green-700 text-white p-2 transition-colors disabled:opacity-50\"\n                        disabled={!chatInput.trim() || !activeChatId}\n                        aria-label=\"Send message\"\n                      >\n                        <Send className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Subscribe Button */}\n          <Link\n            href=\"/subscribe\"\n            className=\"hidden md:inline-flex items-center gap-2 px-3 py-2 rounded-md bg-olive-600 hover:bg-olive-700 text-white text-sm font-medium transition-colors\"\n          >\n            <Crown className=\"w-4 h-4\" />\n            Subscribe\n          </Link>\n\n          {/* Mobile Menu Button */}\n          <button\n            className=\"p-2 rounded-full md:hidden hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200\"\n            onClick={toggleMobileMenu}\n            aria-label=\"Toggle menu\"\n          >\n            {mobileMenuOpen ? (\n              <X className=\"h-6 w-6 text-gray-700 dark:text-gray-200\" />\n            ) : (\n              <Menu className=\"h-6 w-6 text-gray-700 dark:text-gray-200\" />\n            )}\n          </button>\n\n          {/* Desktop User Menu */}\n          <div className=\"hidden md:flex items-center gap-2\">\n            {isLoading ? (\n              <div className=\"h-8 w-20 bg-gray-200 dark:bg-gray-700 rounded-md animate-pulse\"></div>\n            ) : status === 'authenticated' ? (\n              <div className=\"relative\" ref={userMenuRef}>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setUserMenuOpen(!userMenuOpen);\n                  }}\n                  className=\"flex items-center gap-2 px-3 py-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                  aria-haspopup=\"menu\"\n                  aria-expanded={userMenuOpen}\n                >\n                  {session?.user?.image ? (\n                    <img \n                      src={session.user.image} \n                      alt=\"Profile\" \n                      className=\"w-6 h-6 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-6 h-6 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-xs font-medium text-gray-600 dark:text-gray-300\">\n                      {session?.user?.name?.charAt(0) || 'U'}\n                    </div>\n                  )}\n                  <ChevronDown className={`h-4 w-4 text-gray-500 transition-transform ${userMenuOpen ? 'transform rotate-180' : ''}`} />\n                </button>\n                {userMenuOpen && (\n                  <div \n                    className=\"absolute right-0 mt-1 w-48 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg py-1 z-50\"\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    <Link\n                      href=\"/profile\"\n                      className=\"flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                      onClick={() => setUserMenuOpen(false)}\n                    >\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Profile\n                    </Link>\n                    {isAdminUser && (\n                      <Link\n                        href=\"/admin\"\n                        className=\"flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                        onClick={() => setUserMenuOpen(false)}\n                      >\n                        <ShieldCheck className=\"w-4 h-4 mr-2\" />\n                        Admin Dashboard\n                      </Link>\n                    )}\n                    <button\n                      onClick={async (e) => {\n                        e.stopPropagation();\n                        setUserMenuOpen(false);\n                        try {\n                          await nextAuthSignOut({ \n                            redirect: true,\n                            callbackUrl: '/auth/login' \n                          });\n                          // Force a full page reload to ensure all session data is cleared\n                          router.refresh();\n                        } catch (error) {\n                          console.error('Error during sign out:', error);\n                          window.location.href = '/auth/login';\n                        }\n                      }}\n                      className=\"w-full flex items-center px-4 py-2 text-sm text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Sign Out\n                    </button>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <Link\n                href=\"/auth/login\"\n                className=\"inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 hover:text-green-600 dark:hover:text-green-400 transition-colors\"\n              >\n                <LogIn className=\"w-4 h-4 mr-1\" />\n                Login\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Menu */}\n      <div\n        className={`fixed inset-0 z-50 bg-black/50 backdrop-blur-sm transition-all duration-300 ease-in-out md:hidden ${\n          mobileMenuOpen ? 'opacity-100 visible' : 'opacity-0 invisible'\n        }`}\n        onClick={closeMobileMenu}\n      >\n        <div\n          className={`fixed right-0 top-0 h-full w-4/5 max-w-sm bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-700 shadow-2xl transform transition-transform duration-300 ease-in-out ${\n            mobileMenuOpen ? 'translate-x-0' : 'translate-x-full'\n          }`}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <div className=\"flex flex-col h-full p-6 overflow-y-auto\">\n            <div className=\"flex items-center justify-between mb-10\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 rounded-full bg-green-100 dark:bg-green-900/30\">\n                  <ChefHat className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                </div>\n                <span className=\"text-2xl font-bold bg-gradient-to-r from-green-600 to-green-400 bg-clip-text text-transparent\">\n                  SavoryFlavors\n                </span>\n              </div>\n              <button\n                onClick={closeMobileMenu}\n                className=\"p-2 -mr-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\n                aria-label=\"Close menu\"\n              >\n                <X className=\"h-6 w-6\" />\n              </button>\n            </div>\n\n            <nav className=\"flex-1 space-y-2\">\n              {[\n                { href: \"/\", label: \"Home\", icon: Home },\n                { href: \"/recipes\", label: \"Recipes\", icon: ClipboardList },\n                { href: \"/cuisines\", label: \"Cuisines\", icon: ChefHat },\n                { href: \"/favorites\", label: \"Favorites\", icon: Heart, requiresAuth: true },\n                { href: \"/community\", label: \"Community\", icon: MessageCircle },\n                { href: \"/pricing\", label: \"Plans & Pricing\", icon: Crown },\n                { href: \"/about\", label: \"About\", icon: Info },\n                {\n                  href: \"/fitsavory\",\n                  label: \"FitSavory\",\n                  icon: Sparkles,\n                  isSpecial: true,\n                  requiresAuth: true,\n                  onClick: (e) => {\n                    e.preventDefault();\n                    closeMobileMenu();\n                    if (status === 'authenticated') {\n                      if (hasPremiumAccess || isPremiumUser) {\n                        router.push('/fitsavory');\n                      } else {\n                        setShowPricingModal(true);\n                      }\n                    } else {\n                      requireAuth('access FitSavory features');\n                    }\n                  }\n                }\n              ].map((item) => {\n                const Icon = item.icon ?? ArrowRight;\n\n                const sharedProps = {\n                  className: `\n                        relative inline-flex w-full items-center gap-3 overflow-hidden rounded-xl border border-transparent bg-gray-100/80 py-3 px-5 text-left text-base font-medium text-gray-700 transition-all duration-200 hover:bg-green-600 hover:text-white dark:bg-gray-800/40 dark:text-gray-200 dark:hover:bg-green-500/80 dark:hover:text-white\n                        ${item.isSpecial ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-md hover:from-green-600 hover:to-emerald-600 dark:from-emerald-500 dark:to-green-500' : ''}\n                      `,\n                  children: (\n                    <span className=\"relative flex items-center gap-3\">\n                      <span className={`inline-flex h-9 w-9 shrink-0 items-center justify-center rounded-lg ${item.isSpecial ? 'bg-white/20 text-white' : 'bg-white text-green-600 dark:bg-gray-900 dark:text-green-400'}`}>\n                        <Icon className=\"h-5 w-5\" />\n                      </span>\n                      <span className=\"flex-1\">{item.label}</span>\n                      <ChevronRight className=\"h-4 w-4 opacity-60\" />\n                    </span>\n                  )\n                };\n\n                if (item.requiresAuth) {\n                  return (\n                    <div key={item.href}>\n                      <button\n                        onClick={(e) => {\n                          if (item.onClick) {\n                            item.onClick(e);\n                          } else if (status === 'authenticated') {\n                            closeMobileMenu();\n                            router.push(item.href);\n                          } else {\n                            requireAuth('access this feature');\n                            closeMobileMenu();\n                          }\n                        }}\n                        className={sharedProps.className}\n                      >\n                        {sharedProps.children}\n                      </button>\n                    </div>\n                  );\n                }\n\n                return (\n                  <div key={item.href}>\n                    <Link\n                      href={item.href}\n                      onClick={closeMobileMenu}\n                      className={sharedProps.className}\n                    >\n                      {sharedProps.children}\n                    </Link>\n                  </div>\n                );\n              })}\n            </nav>\n\n            <div className=\"pt-6 mt-auto space-y-3 border-t border-gray-200 dark:border-gray-800\">\n              {session ? (\n                <>\n                  <Link\n                    href=\"/profile\"\n                    onClick={closeMobileMenu}\n                    className=\"inline-flex w-full items-center justify-center rounded-lg border border-gray-300 px-4 py-3 text-sm font-semibold text-gray-700 transition-colors hover:bg-gray-50 dark:border-gray-700 dark:text-gray-200 dark:hover:bg-gray-800\"\n                  >\n                    View Profile\n                  </Link>\n                  <button\n                    onClick={() => {\n                      closeMobileMenu();\n                      handleSignOut();\n                    }}\n                    className=\"w-full py-3 px-4 text-center text-base font-semibold text-white bg-red-500 hover:bg-red-600 rounded-lg transition-colors\"\n                  >\n                    Sign Out\n                  </button>\n                </>\n              ) : (\n                <>\n                  <Link\n                    href=\"/auth/login\"\n                    onClick={closeMobileMenu}\n                    className=\"inline-flex w-full items-center justify-center gap-2 rounded-lg border border-olive-500 px-4 py-3 text-sm font-semibold text-olive-600 transition-colors hover:bg-olive-50 dark:border-olive-400 dark:text-olive-300 dark:hover:bg-olive-500/20\"\n                  >\n                    <LogIn className=\"h-4 w-4\" />\n                    Sign In\n                  </Link>\n                  <button\n                    onClick={() => {\n                      window.location.href = '/';\n                      closeMobileMenu();\n                    }}\n                    className=\"w-full py-3 px-4 text-center text-base font-semibold text-white bg-olive-600 hover:bg-olive-700 rounded-lg transition-colors\"\n                  >\n                    <Utensils className=\"w-4 h-4 inline mr-2\" />\n                    Continue as Guest\n                  </button>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Chat Heads (Desktop) */}\n      {status === 'authenticated' && chatHeads.length > 0 && (\n        <div className=\"hidden md:flex fixed bottom-4 right-4 z-[60] items-end gap-4\">\n          <div className=\"flex flex-row-reverse items-end gap-3\">\n            {chatHeads\n              .filter((head) => !head.minimized)\n              .map((head) => {\n                const conversation = chatConversations.find(\n                  (item) => item.id === head.conversationId\n                );\n                const messages = conversation?.messages ?? [];\n                const initials = head.name\n                  ?.split(' ')\n                  .filter(Boolean)\n                  .map((part) => part[0])\n                  .join('')\n                  .slice(0, 2)\n                  .toUpperCase() || 'U';\n\n                return (\n                  <div\n                    key={head.id}\n                    className=\"w-80 bg-[#242526] border border-[#3a3b3c] rounded-xl shadow-2xl overflow-hidden text-white\"\n                  >\n                    <div className=\"flex items-center gap-3 px-3 py-2 bg-[#3a3b3c]\">\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          setActiveChatId(head.conversationId);\n                          handleToggleChatHead(head.conversationId);\n                        }}\n                        className=\"flex items-center gap-3 flex-1 text-left\"\n                      >\n                        <div className=\"relative\">\n                          <div className=\"w-9 h-9 rounded-full bg-[#8b5cf6] text-white flex items-center justify-center text-sm font-semibold\">\n                            {initials}\n                          </div>\n                          <span className=\"absolute -bottom-0.5 -right-0.5 block h-3 w-3 rounded-full border-2 border-[#3a3b3c] bg-green-500\"></span>\n                        </div>\n                        <div className=\"flex flex-col\">\n                          <span className=\"text-sm font-semibold\">{head.name}</span>\n                          <span className=\"text-xs text-[#b0b3b8]\">Active now</span>\n                        </div>\n                      </button>\n                      <div className=\"flex items-center gap-1 text-[#b0b3b8]\">\n                        <button\n                          type=\"button\"\n                          className=\"p-1.5 rounded-full hover:bg-[#4e4f50]\"\n                          aria-label=\"Start voice call\"\n                        >\n                          <Phone className=\"h-4 w-4\" />\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"p-1.5 rounded-full hover:bg-[#4e4f50]\"\n                          aria-label=\"Start video call\"\n                        >\n                          <Video className=\"h-4 w-4\" />\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"p-1.5 rounded-full hover:bg-[#4e4f50]\"\n                          aria-label=\"More options\"\n                        >\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </button>\n                        <span className=\"w-px h-5 bg-[#4e4f50] mx-1\"></span>\n                        <button\n                          type=\"button\"\n                          onClick={() => handleToggleChatHead(head.conversationId)}\n                          className=\"p-1.5 rounded-full hover:bg-[#4e4f50]\"\n                          aria-label=\"Minimize chat\"\n                        >\n                          <Minus className=\"h-4 w-4\" />\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => handleCloseChatHead(head.conversationId)}\n                          className=\"p-1.5 rounded-full hover:bg-[#4e4f50]\"\n                          aria-label=\"Close chat\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex flex-col h-80\">\n                      <div className=\"flex-1 overflow-y-auto px-3 py-4 space-y-3 bg-[#18191a] relative\">\n                        {messages.length === 0 && (\n                          <p className=\"text-xs text-[#b0b3b8] text-center\">No messages yet.</p>\n                        )}\n\n                        {messages.map((message) => {\n                          const senderEmail = message.senderEmail?.toLowerCase();\n                          const isOwnMessage = senderEmail\n                            ? senderEmail === userEmail\n                            : message.senderName?.toLowerCase() === 'you';\n\n                          return (\n                            <div\n                              key={message.id}\n                              className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}\n                            >\n                              <div className=\"flex items-end gap-2\">\n                                {!isOwnMessage && (\n                                  <div className=\"w-7 h-7 rounded-full bg-[#8b5cf6] text-white flex items-center justify-center text-[10px] font-semibold\">\n                                    {initials}\n                                  </div>\n                                )}\n                                <div\n                                  className={`max-w-[220px] rounded-2xl px-3 py-2 text-sm shadow-sm ${\n                                    isOwnMessage\n                                      ? 'bg-[#2374e1] text-white rounded-br-sm'\n                                      : 'bg-[#3a3b3c] text-white rounded-bl-sm'\n                                  }`}\n                                >\n                                  <p className=\"whitespace-pre-wrap leading-5\">{message.text}</p>\n                                  <span\n                                    className={`mt-1 block text-[10px] ${\n                                      isOwnMessage\n                                        ? 'text-white/70 text-right'\n                                        : 'text-[#b0b3b8]'\n                                    }`}\n                                  >\n                                    {message.timestamp}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n\n                      <form\n                        onSubmit={(event) => {\n                          const originalActive = activeChatId;\n                          setActiveChatId(head.conversationId);\n                          handleChatSubmit(event);\n                          setActiveChatId(originalActive);\n                        }}\n                        className=\"px-3 py-2 border-t border-[#3a3b3c] bg-[#242526]\"\n                      >\n                        <div className=\"flex items-center gap-2 bg-[#3a3b3c] rounded-full px-3 py-1.5\">\n                          <button\n                            type=\"button\"\n                            className=\"text-[#b0b3b8] hover:text-white\"\n                            aria-label=\"Open stickers\"\n                          >\n                            <StickerIcon className=\"h-4 w-4\" />\n                          </button>\n                          <button\n                            type=\"button\"\n                            className=\"text-[#b0b3b8] hover:text-white\"\n                            aria-label=\"Send GIF\"\n                          >\n                            <GifIcon className=\"h-4 w-4\" />\n                          </button>\n                          <button\n                            type=\"button\"\n                            className=\"text-[#b0b3b8] hover:text-white\"\n                            aria-label=\"Attach file\"\n                          >\n                            <Paperclip className=\"h-4 w-4\" />\n                          </button>\n                          <button\n                            type=\"button\"\n                            className=\"text-[#b0b3b8] hover:text-white\"\n                            aria-label=\"Add emoji\"\n                          >\n                            <Smile className=\"h-4 w-4\" />\n                          </button>\n                          <input\n                            type=\"text\"\n                            value={activeChatId === head.conversationId ? chatInput : ''}\n                            onChange={(event) => {\n                              setActiveChatId(head.conversationId);\n                              setChatInput(event.target.value);\n                            }}\n                            className=\"flex-1 bg-transparent border-none text-sm text-white focus:outline-none\"\n                            placeholder={`Message ${head.name.split(' ')[0]}...`}\n                          />\n                          <button\n                            type=\"submit\"\n                            className={`inline-flex items-center justify-center rounded-full bg-[#2374e1] hover:bg-[#1b64c9] text-white p-2 transition-colors ${\n                              (activeChatId === head.conversationId ? chatInput.trim() : '')\n                                ? ''\n                                : 'opacity-50 cursor-not-allowed'\n                            }`}\n                            disabled={!(activeChatId === head.conversationId ? chatInput.trim() : '')}\n                            aria-label=\"Send message\"\n                          >\n                            <Send className=\"h-4 w-4\" />\n                          </button>\n                          <button\n                            type=\"button\"\n                            className=\"text-[#2374e1] hover:text-white\"\n                            aria-label=\"Send thumbs up\"\n                          >\n                            <ThumbsUp className=\"h-5 w-5\" />\n                          </button>\n                        </div>\n                      </form>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n\n          <div className=\"flex flex-col-reverse items-center gap-2 pr-1\">\n            {chatHeads\n              .filter((head) => head.minimized)\n              .map((head) => {\n                const conversation = chatConversations.find(\n                  (item) => item.id === head.conversationId\n                );\n                const hasUnread = Boolean(\n                  conversation?.preview && conversation.preview !== head.preview\n                );\n                const initials = head.name\n                  ?.split(' ')\n                  .filter(Boolean)\n                  .map((part) => part[0])\n                  .join('')\n                  .slice(0, 2)\n                  .toUpperCase() || 'U';\n\n                return (\n                  <div key={head.id} className=\"relative flex flex-col items-center\">\n                    <button\n                      type=\"button\"\n                      title={head.name}\n                      onClick={() => {\n                        setActiveChatId(head.conversationId);\n                        handleToggleChatHead(head.conversationId);\n                      }}\n                      className=\"w-14 h-14 rounded-full bg-green-600 text-white shadow-lg border-2 border-white dark:border-gray-900 flex items-center justify-center transition-transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-green-400\"\n                      aria-label={`Open chat with ${head.name}`}\n                    >\n                      <span className=\"text-base font-semibold\">{initials}</span>\n                    </button>\n                    <span className=\"mt-1 text-xs text-gray-600 dark:text-gray-300 text-center max-w-[88px] truncate\">\n                      {head.name.split(' ')[0] || head.name}\n                    </span>\n                    {hasUnread && (\n                      <span className=\"absolute -bottom-1 right-2 inline-flex items-center justify-center px-1.5 py-0.5 text-[10px] font-semibold leading-none text-white bg-red-500 rounded-full\">\n                        New\n                      </span>\n                    )}\n                    <button\n                      type=\"button\"\n                      onClick={() => handleCloseChatHead(head.conversationId)}\n                      className=\"absolute -top-1 -right-1 w-5 h-5 rounded-full bg-gray-200/90 text-gray-700 flex items-center justify-center text-[10px] shadow hover:bg-gray-300 dark:bg-gray-800 dark:text-gray-100\"\n                      aria-label={`Close chat with ${head.name}`}\n                    >\n                      ×\n                    </button>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n      )}\n\n      {/* Pricing Modal */}\n      {showPricingModal && (\n        <div className=\"fixed inset-0 z-[100] overflow-y-auto\" aria-labelledby=\"pricing-modal-title\" role=\"dialog\" aria-modal=\"true\">\n          <div className=\"flex min-h-screen items-center justify-center p-4 text-center sm:block sm:p-0\">\n            <div \n              className=\"fixed inset-0 bg-gray-500/75 transition-opacity\" \n              aria-hidden=\"true\" \n              onClick={() => setShowPricingModal(false)}\n            ></div>\n            \n            <div className=\"inline-block w-full max-w-6xl transform overflow-hidden rounded-2xl bg-white dark:bg-gray-800 text-left align-middle shadow-xl transition-all sm:my-8 sm:w-full\">\n              <div className=\"relative\">\n                <button\n                  type=\"button\"\n                  className=\"absolute right-4 top-4 rounded-full p-1.5 text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  onClick={() => setShowPricingModal(false)}\n                >\n                  <X className=\"h-5 w-5\" />\n                  <span className=\"sr-only\">Close</span>\n                </button>\n                \n                <div className=\"p-6 sm:p-8\">\n                  <div className=\"text-center mb-10\">\n                    <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                      Choose Your Plan\n                    </h2>\n                    <p className=\"mt-3 text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n                      Unlock all features and start cooking smarter with FitSavory. Select the plan that works best for you.\n                    </p>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    {/* Basic Plan */}\n                    <div className=\"rounded-xl border border-gray-200 dark:border-gray-700 p-6 flex flex-col h-full\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Basic</h3>\n                        <p className=\"text-gray-600 dark:text-gray-300 mb-4\">Essential features for home cooks</p>\n                        <div className=\"flex items-baseline mb-6\">\n                          <span className=\"text-3xl font-bold text-gray-900 dark:text-white\">₱0</span>\n                          <span className=\"ml-1 text-gray-500 dark:text-gray-400\">/month</span>\n                        </div>\n                        <ul className=\"space-y-3 mb-6\">\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Browse all public recipes</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Post in community</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Create and share recipes</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Basic support via email</span>\n                          </li>\n                        </ul>\n                      </div>\n                      <button\n                        onClick={() => {\n                          setShowPricingModal(false);\n                          router.push('/fitsavory?trial=true');\n                        }}\n                        className=\"w-full mt-auto py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"\n                      >\n                        Start Free\n                      </button>\n                    </div>\n                    \n                    {/* Premium Monthly */}\n                    <div className=\"rounded-xl border-2 border-olive-600 bg-olive-100/80 dark:bg-gray-800 p-6 flex flex-col h-full transform scale-105 relative\">\n                      <div className=\"absolute top-0 right-0 bg-olive-700 text-white text-xs font-bold px-3 py-1 rounded-bl-lg rounded-tr-lg\">\n                        POPULAR\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold text-gray-800 dark:text-white mb-2\">Premium</h3>\n                        <p className=\"text-gray-700 dark:text-gray-300 mb-4\">Unlock all features including recipe monetization</p>\n                        <div className=\"flex items-baseline mb-6\">\n                          <span className=\"text-3xl font-bold text-gray-800 dark:text-white\">₱199</span>\n                          <span className=\"ml-1 text-gray-700 dark:text-gray-300\">/month</span>\n                        </div>\n                        <ul className=\"space-y-3 mb-6\">\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">All Basic features</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Access to FitSavory</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Save unlimited favorite recipes</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Sell your own recipes</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Priority 24/7 support</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Ad-free experience</span>\n                          </li>\n                        </ul>\n                      </div>\n                      <button\n                        onClick={() => {\n                          setShowPricingModal(false);\n                          router.push('/subscribe?plan=premium_monthly');\n                        }}\n                        className=\"w-full mt-auto py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-olive-600 hover:bg-olive-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-olive-500\"\n                      >\n                        Get Started\n                      </button>\n                    </div>\n                    \n                    {/* Premium Yearly */}\n                    <div className=\"rounded-xl border-2 border-amber-500 bg-amber-50 dark:bg-amber-900/20 p-6 flex flex-col h-full\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Premium Yearly</h3>\n                            <p className=\"text-gray-600 dark:text-gray-300 mb-4\">Best value - Get 2 months free</p>\n                          </div>\n                          <span className=\"inline-flex items-center rounded-full bg-amber-100 px-3 py-1 text-xs font-medium text-amber-800 dark:bg-amber-800/30 dark:text-amber-200\">\n                            BEST VALUE\n                          </span>\n                        </div>\n                        <div className=\"flex items-baseline mb-6\">\n                          <span className=\"text-3xl font-bold text-gray-900 dark:text-white\">₱1,990</span>\n                          <span className=\"ml-1 text-gray-600 dark:text-gray-400\">/year</span>\n                        </div>\n                        <div className=\"mb-4\">\n                          <span className=\"inline-block px-2 py-1 text-xs font-semibold text-amber-800 bg-amber-100 rounded-full dark:bg-amber-900/30 dark:text-amber-200\">\n                            Save 17% (₱398)\n                          </span>\n                          <p className=\"text-sm text-amber-700 dark:text-amber-300 mt-1\">\n                            Only ₱166/month\n                          </p>\n                        </div>\n                        <ul className=\"space-y-3 mb-6\">\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">All Premium Monthly features</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Save ₱398 vs monthly</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Priority customer support</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Early access to new features</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Exclusive content</span>\n                          </li>\n                          <li className=\"flex items-start\">\n                            <svg className=\"h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <span className=\"text-gray-800 dark:text-gray-200\">Yearly member badge</span>\n                          </li>\n                        </ul>\n                      </div>\n                      <button\n                        onClick={() => {\n                          setShowPricingModal(false);\n                          router.push('/subscribe?plan=premium_yearly');\n                        }}\n                        className=\"w-full mt-auto py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-amber-600 hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500\"\n                      >\n                        Get Best Value\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-10 text-center text-sm text-gray-500 dark:text-gray-400\">\n                    <p>Cancel anytime. No questions asked. 30-day money-back guarantee.</p>\n                    <p className=\"mt-2\">Need help deciding? <a href=\"#\" className=\"text-olive-600 hover:text-olive-800 dark:text-olive-400 dark:hover:text-olive-300 font-medium\">Contact our support team</a></p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\Layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\SignUpModal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\games\\MemoryGame.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'time'. Either exclude it or remove the dependency array.","line":256,"column":6,"nodeType":"ArrayExpression","endLine":256,"endColumn":71,"suggestions":[{"desc":"Update the dependencies array to be: [disabled, flippedIndices, cards, isRunning, checkForMatch]","fix":{"range":[8573,8638],"text":"[disabled, flippedIndices, cards, isRunning, checkForMatch]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { X, Clock, Zap, CheckCircle, Trophy, Award, ChefHat } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\n// Food emojis for different difficulty levels\nconst FOOD_EMOJIS = {\n  easy: ['🍕', '🍔', '🍟', '🌭', '🍿', '🍳', '🍗', '🍝', '🥨', '🥞', '🍱', '🍜'], // 12 unique emojis = 24 cards (6x4 grid)\n  medium: ['🍕', '🍔', '🍟', '🌭', '🍿', '🍳', '🍗', '🍝', '🥨', '🥞', '🍱', '🍜', '🍙', '🍘', '🍥', '🍡', '🍢', '🍣'], // 18 unique emojis = 36 cards (6x6 grid)\n  hard: ['🍕', '🍔', '🍟', '🌭', '🍿', '🍳', '🍗', '🍝', '🥨', '🥞', '🍱', '🍜', '🍙', '🍘', '🍥', '🍡', '🍢', '🍣', '🍤', '🍧', '🍨', '🍦', '🍰', '🎂', '🍮', '🍯', '🍬', '🍭', '🍫', '🍿', '🥟', '🥙'], // 32 unique emojis = 64 cards (8x8 grid)\n};\n\nconst MemoryGame = ({ onClose, canRecord = false }) => {\n  const [cards, setCards] = useState([]);\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [solvedEmojis, setSolvedEmojis] = useState([]);\n  const [moves, setMoves] = useState(0);\n  const [attempts, setAttempts] = useState(0);\n  const [gameComplete, setGameComplete] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [showMainMenu, setShowMainMenu] = useState(true);\n  const [showDifficultySelection, setShowDifficultySelection] = useState(false);\n  const [selectedDifficulty, setSelectedDifficulty] = useState('medium');\n  const [showLeaderboard, setShowLeaderboard] = useState(false);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [playerName, setPlayerName] = useState('');\n  const [showNameInput, setShowNameInput] = useState(false);\n  const timerRef = useRef(null);\n  const flipTimeout = useRef(null);\n\n  // Create a new shuffled deck of cards based on difficulty\n  const createShuffledDeck = useCallback((difficulty = selectedDifficulty) => {\n    // Get emojis for the selected difficulty\n    const emojis = FOOD_EMOJIS[difficulty] || FOOD_EMOJIS.medium;\n\n    // Create pairs of emojis and shuffle them\n    const emojiPairs = [...emojis, ...emojis]; // This creates 2 of each emoji\n    const shuffled = [...emojiPairs]\n      .sort(() => Math.random() - 0.5)\n      .map((emoji, index) => ({\n        id: index,\n        emoji,\n        flipped: false,\n        matched: false\n      }));\n\n    return shuffled;\n  }, [selectedDifficulty]);\n\n  // Load leaderboard from localStorage on component mount\n  useEffect(() => {\n    try {\n      const savedLeaderboard = localStorage.getItem('memoryGameLeaderboard');\n      if (savedLeaderboard) {\n        const parsedLeaderboard = JSON.parse(savedLeaderboard);\n        if (Array.isArray(parsedLeaderboard)) {\n          setLeaderboard(parsedLeaderboard);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading leaderboard:', error);\n      setLeaderboard([]);\n    }\n  }, []);\n\n  // Save score to leaderboard\n  const saveScore = useCallback((name, moves, time) => {\n    try {\n      const newScore = { name, moves, time, date: new Date().toISOString() };\n      const updatedLeaderboard = [...leaderboard, newScore]\n        .sort((a, b) => {\n          // Sort by moves first, then by time\n          if (a.moves === b.moves) {\n            return a.time - b.time;\n          }\n          return a.moves - b.moves;\n        })\n        .slice(0, 10); // Keep only top 10 scores\n\n      setLeaderboard(updatedLeaderboard);\n      localStorage.setItem('memoryGameLeaderboard', JSON.stringify(updatedLeaderboard));\n    } catch (error) {\n      console.error('Error saving score:', error);\n    }\n  }, [leaderboard]);\n\n  // Format time as MM:SS\n  const formatTime = (seconds) => {\n    return `${Math.floor(seconds / 60)}:${(seconds % 60).toString().padStart(2, '0')}`;\n  };\n\n  // Initialize the game based on difficulty\n  const initializeGame = useCallback((difficulty = selectedDifficulty) => {\n    // Clear any existing timeouts\n    if (flipTimeout.current) {\n      clearTimeout(flipTimeout.current);\n      flipTimeout.current = null;\n    }\n\n    // Stop any running timer\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n\n    // Reset game state\n    setTime(0);\n    setAttempts(0);\n    setMoves(0);\n    setSolvedEmojis([]);\n    setGameComplete(false);\n    setFlippedIndices([]);\n    setDisabled(true);\n\n    // Create and set initial cards (all face up for preview)\n    const initialCards = createShuffledDeck(difficulty).map(card => ({\n      ...card,\n      flipped: true // Start with all cards face up\n    }));\n\n    setCards(initialCards);\n\n    // After 2 seconds, flip all cards face down and enable the game\n    flipTimeout.current = setTimeout(() => {\n      setCards(prevCards =>\n        prevCards.map(card => ({\n          ...card,\n          flipped: false\n        }))\n      );\n      setDisabled(false);\n    }, 2000);\n\n  }, [createShuffledDeck, selectedDifficulty]);\n\n  // Handle game completion\n  const handleGameComplete = useCallback(() => {\n    setIsRunning(false);\n    setGameComplete(true);\n    // Only prompt for name/score submission if recording is allowed\n    setShowNameInput(!!canRecord);\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  }, [canRecord]);\n\n  // Submit score to leaderboard\n  const handleSubmitScore = (e) => {\n    e.preventDefault();\n    // If recording is disabled (guest), do nothing\n    if (!canRecord) return;\n    if (playerName.trim()) {\n      saveScore(playerName.trim(), moves, time);\n      setShowNameInput(false);\n    }\n  };\n\n  // Check if the selected cards match\n  const checkForMatch = useCallback(() => {\n    if (flippedIndices.length !== 2) return;\n\n    const [firstIndex, secondIndex] = flippedIndices;\n    const firstCard = cards[firstIndex];\n    const secondCard = cards[secondIndex];\n\n    // Always increment moves counter when checking a pair\n    setMoves(prev => prev + 1);\n    setDisabled(true);\n\n    // If cards match\n    if (firstCard.emoji === secondCard.emoji) {\n      // Mark cards as matched\n      setCards(prevCards =>\n        prevCards.map((card, idx) =>\n          idx === firstIndex || idx === secondIndex\n            ? { ...card, matched: true, flipped: true }\n            : card\n        )\n      );\n\n      // Add to solved emojis\n      setSolvedEmojis(prev => {\n        const newSolved = [...prev, firstCard.emoji];\n\n        // Check if game is complete\n        const currentEmojis = FOOD_EMOJIS[selectedDifficulty] || FOOD_EMOJIS.medium;\n        // Calculate pairs: each unique emoji creates one pair\n        const totalPairs = currentEmojis.length;\n        if (newSolved.length === totalPairs) {\n          handleGameComplete();\n        }\n\n        return newSolved;\n      });\n\n      // Reset flipped indices and enable interaction\n      setFlippedIndices([]);\n      setDisabled(false);\n    } else {\n      // No match - increment attempts and flip cards back after 1 second\n      setAttempts(prev => prev + 1);\n\n      // Set a timeout to flip the cards back after 1 second\n      flipTimeout.current = setTimeout(() => {\n        setCards(prevCards =>\n          prevCards.map((card, idx) =>\n            idx === firstIndex || idx === secondIndex\n              ? { ...card, flipped: false }\n              : card\n          )\n        );\n        setFlippedIndices([]);\n        setDisabled(false);\n      }, 1000);\n    }\n  }, [flippedIndices, cards, selectedDifficulty, handleGameComplete]);\n\n  // Handle card click\n  const handleCardClick = useCallback((index) => {\n    // Don't allow clicking if:\n    // - Game is disabled (during animations)\n    // - Card is already flipped or matched\n    // - Already have two cards flipped\n    if (disabled || cards[index].flipped || cards[index].matched) {\n      return;\n    }\n    \n    // Start timer on first move\n    if (!isRunning && flippedIndices.length === 0) {\n      setIsRunning(true);\n      const startTime = Date.now();\n      timerRef.current = setInterval(() => {\n        setTime(Math.floor((Date.now() - startTime) / 1000));\n      }, 1000);\n    }\n    \n    // Flip the card\n    const newFlipped = [...flippedIndices, index];\n    setFlippedIndices(newFlipped);\n    \n    // Update the card state to show it's flipped\n    setCards(prevCards => \n      prevCards.map((card, idx) => \n        idx === index ? { ...card, flipped: true } : card\n      )\n    );\n    \n    // If this is the second card, check for a match\n    if (newFlipped.length === 2) {\n      checkForMatch();\n    }\n  }, [disabled, flippedIndices, cards, isRunning, time, checkForMatch]);\n\n  // Initialize game on mount\n  useEffect(() => {\n    initializeGame();\n    \n    // Cleanup function\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n      if (flipTimeout.current) clearTimeout(flipTimeout.current);\n    };\n  }, [initializeGame]);\n  \n  // Update flipped cards when flippedIndices change\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      checkForMatch();\n    }\n  }, [flippedIndices, checkForMatch]);\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm p-2 sm:p-4\">\n      <div className=\"relative bg-white dark:bg-gray-900 rounded-xl sm:rounded-2xl p-3 sm:p-6 w-full max-w-7xl max-h-[95vh] sm:max-h-[95vh] overflow-y-auto shadow-2xl border border-gray-200 dark:border-gray-700\">\n\n        {/* Main Menu */}\n        <AnimatePresence mode=\"wait\">\n          {showMainMenu && (\n            <motion.div\n              key=\"main-menu\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n              className=\"text-center\"\n            >\n              <div className=\"mb-8\">\n                <ChefHat className=\"w-16 h-16 text-green-600 dark:text-green-400 mx-auto mb-4\" />\n                <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Memory Game</h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">Test your memory with delicious food emojis!</p>\n              </div>\n\n              <div className=\"space-y-4 max-w-md mx-auto\">\n                <button\n                  onClick={() => {\n                    setShowMainMenu(false);\n                    setShowDifficultySelection(true);\n                  }}\n                  className=\"w-full py-4 px-6 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-semibold rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105 flex items-center justify-center gap-3\"\n                >\n                  <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.445.832L12 11.202a1 1 0 000-1.664L9.555 7.168z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Play Game\n                </button>\n\n                <button\n                  onClick={() => setShowLeaderboard(true)}\n                  className=\"w-full py-4 px-6 bg-gradient-to-r from-yellow-500 to-amber-500 hover:from-yellow-600 hover:to-amber-600 text-white font-semibold rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105 flex items-center justify-center gap-3\"\n                >\n                  <Trophy className=\"w-6 h-6\" />\n                  Leaderboard\n                </button>\n\n                <button\n                  onClick={onClose}\n                  className=\"w-full py-4 px-6 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 font-semibold rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105 flex items-center justify-center gap-3\"\n                >\n                  <X className=\"w-6 h-6\" />\n                  Exit Game\n                </button>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Difficulty Selection */}\n        <AnimatePresence mode=\"wait\">\n          {showDifficultySelection && (\n            <motion.div\n              key=\"difficulty-selection\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n              className=\"text-center\"\n            >\n              <div className=\"mb-8\">\n                <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Choose Difficulty</h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">Select your challenge level</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4 max-w-2xl mx-auto mb-6\">\n                {/* Easy */}\n                <button\n                  onClick={() => {\n                    setSelectedDifficulty('easy');\n                    setShowDifficultySelection(false);\n                    setShowMainMenu(false);\n                    // Use setTimeout to ensure state updates are processed\n                    setTimeout(() => initializeGame('easy'), 0);\n                  }}\n                  className={`p-6 rounded-xl border-2 transition-all duration-200 ${\n                    selectedDifficulty === 'easy'\n                      ? 'border-green-500 bg-green-50 dark:bg-green-900/20'\n                      : 'border-gray-200 dark:border-gray-700 hover:border-green-300 dark:hover:border-green-600'\n                  }`}\n                >\n                  <div className=\"text-4xl mb-3\">🌟</div>\n                  <h4 className=\"text-lg font-bold text-gray-900 dark:text-white mb-2\">Easy</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">12 pairs (24 cards)</p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">6×4 grid • Perfect for beginners</p>\n                </button>\n\n                {/* Medium */}\n                <button\n                  onClick={() => {\n                    setSelectedDifficulty('medium');\n                    setShowDifficultySelection(false);\n                    setShowMainMenu(false);\n                    setTimeout(() => initializeGame('medium'), 0);\n                  }}\n                  className={`p-6 rounded-xl border-2 transition-all duration-200 ${\n                    selectedDifficulty === 'medium'\n                      ? 'border-green-500 bg-green-50 dark:bg-green-900/20'\n                      : 'border-gray-200 dark:border-gray-700 hover:border-green-300 dark:hover:border-green-600'\n                  }`}\n                >\n                  <div className=\"text-4xl mb-3\">⚡</div>\n                  <h4 className=\"text-lg font-bold text-gray-900 dark:text-white mb-2\">Medium</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">18 pairs (36 cards)</p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">6×6 grid • Classic challenge</p>\n                </button>\n\n                {/* Hard */}\n                <button\n                  onClick={() => {\n                    setSelectedDifficulty('hard');\n                    setShowDifficultySelection(false);\n                    setShowMainMenu(false);\n                    setTimeout(() => initializeGame('hard'), 0);\n                  }}\n                  className={`p-6 rounded-xl border-2 transition-all duration-200 ${\n                    selectedDifficulty === 'hard'\n                      ? 'border-green-500 bg-green-50 dark:bg-green-900/20'\n                      : 'border-gray-200 dark:border-gray-700 hover:border-green-300 dark:hover:border-green-600'\n                  }`}\n                >\n                  <div className=\"text-4xl mb-3\">🔥</div>\n                  <h4 className=\"text-lg font-bold text-gray-900 dark:text-white mb-2\">Hard</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">32 pairs (64 cards)</p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">8×8 grid • Ultimate challenge</p>\n                </button>\n              </div>\n\n              <button\n                onClick={() => {\n                  setShowDifficultySelection(false);\n                  setShowMainMenu(true);\n                }}\n                className=\"px-6 py-3 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white font-medium transition-colors flex items-center gap-2 mx-auto\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                </svg>\n                Back to Menu\n              </button>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Game UI - Only show when not in menu */}\n        {!showMainMenu && !showDifficultySelection && (\n          <div className=\"flex flex-col lg:flex-row gap-4 lg:gap-8 w-full max-w-none\">\n            {/* Mobile: Game Stats - Top (shown only on mobile) */}\n            <div className=\"lg:hidden grid grid-cols-2 gap-3 mb-4\">\n              <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-3 rounded-lg\">\n                <div className=\"text-xs text-gray-400 dark:text-gray-400\">Time</div>\n                <div className=\"flex items-center gap-1 text-lg font-semibold text-white\">\n                  <Clock className=\"w-4 h-4\" />\n                  {`${Math.floor(time / 60)}:${(time % 60).toString().padStart(2, '0')}`}\n                </div>\n              </div>\n              <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-3 rounded-lg\">\n                <div className=\"text-xs text-gray-400 dark:text-gray-400\">Moves</div>\n                <div className=\"flex items-center gap-1 text-lg font-semibold text-white\">\n                  <Zap className=\"w-4 h-4 text-yellow-400\" />\n                  {moves}\n                </div>\n              </div>\n              <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-3 rounded-lg\">\n                <div className=\"text-xs text-gray-400 dark:text-gray-400\">Matched</div>\n                <div className=\"flex items-center gap-1 text-lg font-semibold text-white\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  {solvedEmojis.length} / {selectedDifficulty === 'easy' ? 12 : selectedDifficulty === 'medium' ? 18 : 32}\n                </div>\n              </div>\n              <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-3 rounded-lg\">\n                <div className=\"text-xs text-gray-400 dark:text-gray-400\">Accuracy</div>\n                <div className=\"text-lg font-semibold text-white\">\n                  {attempts > 0 ? Math.round((solvedEmojis.length / attempts) * 100) : 0}%\n                </div>\n              </div>\n            </div>\n\n            {/* Left Sidebar - Game Controls (hidden on mobile, shown as collapsible on tablet) */}\n            <div className=\"hidden lg:flex flex-col gap-4 min-w-[220px]\">\n              <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-4 rounded-lg\">\n                <h3 className=\"text-sm font-semibold text-white mb-3\">Game Controls</h3>\n                <div className=\"flex flex-col gap-2\">\n                  <button\n                    onClick={() => {\n                      setGameComplete(false);\n                      setShowMainMenu(true);\n                    }}\n                    className=\"px-4 py-2.5 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2 shadow-md hover:shadow-lg\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                    </svg>\n                    Main Menu\n                  </button>\n                  <button\n                    onClick={() => {\n                      setCards([]);\n                      setFlippedIndices([]);\n                      setSolvedEmojis([]);\n                      setMoves(0);\n                      setAttempts(0);\n                      setGameComplete(false);\n                      setTime(0);\n                      setIsRunning(false);\n                      setShowNameInput(false);\n                      initializeGame(selectedDifficulty);\n                    }}\n                    className=\"px-4 py-2.5 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 shadow-md hover:shadow-lg\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                    </svg>\n                    Reset Game\n                  </button>\n                  <button\n                    onClick={onClose}\n                    className=\"px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors\"\n                  >\n                    Close Game\n                  </button>\n                </div>\n              </div>\n\n              {/* Game Counter */}\n              <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-4 rounded-lg\">\n                <h3 className=\"text-sm font-semibold text-white mb-3\">Game Stats</h3>\n                <div className=\"text-sm font-medium text-gray-600 dark:text-gray-300\">\n                  <div className=\"text-green-600 dark:text-green-400 font-bold text-lg\">{moves}</div>\n                  <div className=\"text-xs text-gray-400 dark:text-gray-400\">moves</div>\n                </div>\n                <div className=\"text-sm font-medium text-gray-600 dark:text-gray-300 mt-3\">\n                  <div className=\"text-green-600 dark:text-green-400 font-bold text-lg\">{solvedEmojis.length} / {selectedDifficulty === 'easy' ? 12 : selectedDifficulty === 'medium' ? 18 : 32}</div>\n                  <div className=\"text-xs text-gray-400 dark:text-gray-400\">pairs matched</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Center - Game Board */}\n            <div className=\"flex-1 min-w-0\">\n              {/* Desktop: Game Stats - Top (hidden on mobile) */}\n              <div className=\"hidden lg:grid grid-cols-4 gap-4 mb-6\">\n                <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-3 rounded-lg\">\n                  <div className=\"text-xs text-gray-400 dark:text-gray-400\">Time</div>\n                  <div className=\"flex items-center gap-1 text-lg font-semibold text-white\">\n                    <Clock className=\"w-4 h-4\" />\n                    {`${Math.floor(time / 60)}:${(time % 60).toString().padStart(2, '0')}`}\n                  </div>\n                </div>\n                <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-3 rounded-lg\">\n                  <div className=\"text-xs text-gray-400 dark:text-gray-400\">Moves</div>\n                  <div className=\"flex items-center gap-1 text-lg font-semibold text-white\">\n                    <Zap className=\"w-4 h-4 text-yellow-400\" />\n                    {moves}\n                  </div>\n                </div>\n                <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-3 rounded-lg\">\n                  <div className=\"text-xs text-gray-400 dark:text-gray-400\">Matched</div>\n                  <div className=\"flex items-center gap-1 text-lg font-semibold text-white\">\n                    <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                    {solvedEmojis.length} / {selectedDifficulty === 'easy' ? 12 : selectedDifficulty === 'medium' ? 18 : 32}\n                  </div>\n                </div>\n                <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-3 rounded-lg\">\n                  <div className=\"text-xs text-gray-400 dark:text-gray-400\">Accuracy</div>\n                  <div className=\"text-lg font-semibold text-white\">\n                    {attempts > 0 ? Math.round((solvedEmojis.length / attempts) * 100) : 0}%\n                  </div>\n                </div>\n              </div>\n\n              {/* Mobile: Game Controls - Collapsible */}\n              <div className=\"lg:hidden mb-4\">\n                <details className=\"group\">\n                  <summary className=\"flex cursor-pointer items-center justify-between bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-3 rounded-lg text-white\">\n                    <span className=\"text-sm font-semibold\">Game Controls</span>\n                    <svg className=\"h-4 w-4 transition-transform group-open:rotate-180\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                    </svg>\n                  </summary>\n                  <div className=\"mt-2 p-3 bg-white/5 dark:bg-gray-800/30 backdrop-blur-sm rounded-lg space-y-2\">\n                    <button\n                      onClick={() => {\n                        setGameComplete(false);\n                        setShowMainMenu(true);\n                      }}\n                      className=\"w-full px-4 py-2.5 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2 shadow-md hover:shadow-lg\"\n                    >\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                      </svg>\n                      Main Menu\n                    </button>\n                    <button\n                      onClick={() => {\n                        setCards([]);\n                        setFlippedIndices([]);\n                        setSolvedEmojis([]);\n                        setMoves(0);\n                        setAttempts(0);\n                        setGameComplete(false);\n                        setTime(0);\n                        setIsRunning(false);\n                        setShowNameInput(false);\n                        initializeGame(selectedDifficulty);\n                      }}\n                      className=\"w-full px-4 py-2.5 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 shadow-md hover:shadow-lg\"\n                    >\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                      </svg>\n                      Reset Game\n                    </button>\n                    <button\n                      onClick={onClose}\n                      className=\"w-full px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors\"\n                    >\n                      Close Game\n                    </button>\n                  </div>\n                </details>\n              </div>\n\n              {/* Game Board - Fixed width container */}\n              <div className=\"w-[600px] max-w-full mx-auto my-3 sm:my-4\">\n                <div \n                  className={`grid gap-1.5 sm:gap-2 w-full`}\n                  style={{\n                    display: 'grid',\n                    gridTemplateColumns: `repeat(${\n                      selectedDifficulty === 'easy' ? 6 : \n                      selectedDifficulty === 'medium' ? 6 : 8\n                    }, minmax(0, 1fr))`,\n                    gridTemplateRows: `repeat(${\n                      selectedDifficulty === 'easy' ? 4 : \n                      selectedDifficulty === 'medium' ? 6 : 8\n                    }, minmax(0, 1fr))`,\n                    aspectRatio: selectedDifficulty === 'easy' ? '6/4' : '1/1',\n                  width: '100%',\n                  height: '100%'\n                }}\n              >\n                {cards.map((card, index) => (\n                  <AnimatePresence key={card.id}>\n                    <motion.div\n                      layout\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{\n                        opacity: 1,\n                        scale: 1,\n                        transition: { duration: 0.3 }\n                      }}\n                      exit={{\n                        opacity: 0,\n                        scale: 0.8,\n                        transition: { duration: 0.2 }\n                      }}\n                      onClick={() => handleCardClick(index)}\n                      className={`\n                        relative cursor-pointer aspect-square rounded-lg overflow-hidden transition-all duration-150 hover:scale-105 touch-manipulation\n                        ${card.matched ? 'opacity-0' : 'opacity-100'}\n                        w-full h-full min-h-[40px] sm:min-h-[45px] md:min-h-[50px] lg:min-h-[55px]\n                      `}\n                    >\n                      {/* Card Back (Chef Hat Logo) */}\n                      <motion.div\n                        className=\"absolute inset-0 flex items-center justify-center rounded-lg bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/30 dark:to-green-800/30 border-2 border-green-100 dark:border-green-800/50\"\n                        initial={false}\n                        animate={{\n                          rotateY: card.flipped ? 180 : 0,\n                          opacity: card.flipped ? 0 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        <ChefHat className=\"w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 text-green-600 dark:text-green-400\" />\n                      </motion.div>\n\n                      {/* Card Front (Emoji) */}\n                      <motion.div\n                        className=\"absolute inset-0 flex items-center justify-center rounded-lg bg-white dark:bg-gray-800\"\n                        initial={false}\n                        animate={{\n                          rotateY: card.flipped ? 0 : 180,\n                          opacity: card.flipped ? 1 : 0\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        <span className=\"text-xl sm:text-2xl md:text-3xl lg:text-4xl select-none\">{card.emoji}</span>\n                      </motion.div>\n                    </motion.div>\n                  </AnimatePresence>\n                ))}\n              </div>\n            </div>\n            </div>\n\n            {/* Right Sidebar - Additional Stats (hidden on mobile and tablet) */}\n            <div className=\"hidden xl:flex flex-col gap-4 min-w-[220px]\">\n              <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-4 rounded-lg\">\n                <h3 className=\"text-sm font-semibold text-white mb-3\">Performance</h3>\n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"text-xs text-gray-400 dark:text-gray-400\">Accuracy</div>\n                    <div className=\"text-lg font-semibold text-white\">\n                      {attempts > 0 ? Math.round((solvedEmojis.length / attempts) * 100) : 0}%\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-xs text-gray-400 dark:text-gray-400\">Attempts</div>\n                    <div className=\"text-lg font-semibold text-white\">{attempts}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-xs text-gray-400 dark:text-gray-400\">Time Elapsed</div>\n                    <div className=\"text-lg font-semibold text-white\">\n                      {`${Math.floor(time / 60)}:${(time % 60).toString().padStart(2, '0')}`}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Game Title */}\n              <div className=\"bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm p-4 rounded-lg\">\n                <div className=\"text-center\">\n                  <ChefHat className=\"w-8 h-8 text-green-400 mx-auto mb-2\" />\n                  <h3 className=\"text-lg font-bold text-white\">Memory Game</h3>\n                  <p className=\"text-xs text-gray-300 mt-1\">Food Emoji Challenge</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Name Input Modal - Shows when game is completed */}\n        <AnimatePresence>\n          {showNameInput && (\n            <motion.div\n              className=\"fixed inset-0 z-[100] flex items-center justify-center bg-black/80 backdrop-blur-sm p-4\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              onClick={() => setShowNameInput(false)}\n            >\n              <motion.div\n                className=\"bg-white dark:bg-gray-900 rounded-xl p-4 sm:p-6 w-full max-w-md shadow-2xl border border-gray-200 dark:border-gray-700\"\n                initial={{ scale: 0.9, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                exit={{ scale: 0.9, opacity: 0 }}\n                transition={{ type: 'spring', damping: 25, stiffness: 500 }}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <div className=\"text-center mb-4 sm:mb-6\">\n                  <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                    <Trophy className=\"w-6 h-6 sm:w-8 sm:h-8 text-green-600 dark:text-green-400\" />\n                  </div>\n                  <h3 className=\"text-lg sm:text-xl font-bold text-gray-900 dark:text-white mb-2\">🎉 Congratulations!</h3>\n                  <p className=\"text-sm sm:text-base text-gray-600 dark:text-gray-300\">You completed the game!</p>\n                </div>\n\n                <div className=\"mb-4 sm:mb-6\">\n                  <div className=\"grid grid-cols-2 gap-3 sm:gap-4 mb-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-green-600 dark:text-green-400\">{moves}</div>\n                      <div className=\"text-xs sm:text-sm text-gray-500 dark:text-gray-400\">Moves</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-xl sm:text-2xl font-bold text-blue-600 dark:text-blue-400\">{formatTime(time)}</div>\n                      <div className=\"text-xs sm:text-sm text-gray-500 dark:text-gray-400\">Time</div>\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-base sm:text-lg font-semibold text-gray-900 dark:text-white\">\n                      {attempts > 0 ? Math.round((solvedEmojis.length / attempts) * 100) : 0}% Accuracy\n                    </div>\n                  </div>\n                </div>\n\n                <form onSubmit={handleSubmitScore} className=\"space-y-4\">\n                  <div>\n                    <label htmlFor=\"playerName\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                      Enter your name for the leaderboard:\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"playerName\"\n                      value={playerName}\n                      onChange={(e) => setPlayerName(e.target.value)}\n                      className=\"w-full px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n                      placeholder=\"Your name...\"\n                      autoFocus\n                      maxLength={20}\n                    />\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-3\">\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowNameInput(false)}\n                      className=\"flex-1 px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors font-medium\"\n                    >\n                      Skip\n                    </button>\n                    <button\n                      type=\"submit\"\n                      disabled={!playerName.trim()}\n                      className=\"flex-1 px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base bg-green-600 hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white rounded-lg transition-colors font-medium\"\n                    >\n                      Submit Score\n                    </button>\n                  </div>\n                </form>\n              </motion.div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Leaderboard Modal - Shows when leaderboard button is clicked */}\n        <AnimatePresence>\n          {showLeaderboard && showMainMenu && (\n            <motion.div\n              className=\"fixed inset-0 z-[100] flex items-center justify-center bg-black/80 backdrop-blur-sm p-4\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              onClick={() => setShowLeaderboard(false)}\n            >\n              <motion.div\n                className=\"bg-white dark:bg-gray-900 rounded-xl p-4 sm:p-6 w-full max-w-sm sm:max-w-md max-h-[85vh] shadow-2xl border border-gray-200 dark:border-gray-700\"\n                initial={{ scale: 0.9, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                exit={{ scale: 0.9, opacity: 0 }}\n                transition={{ type: 'spring', damping: 25, stiffness: 500 }}\n                onClick={(e) => e.stopPropagation()}\n              >\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg sm:text-xl font-bold text-gray-900 dark:text-white flex items-center gap-2\">\n                    <Trophy className=\"w-5 h-5 sm:w-6 sm:h-6 text-yellow-400\" />\n                    Top Scores\n                  </h3>\n                  <button\n                    onClick={() => setShowLeaderboard(false)}\n                    className=\"p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                    aria-label=\"Close leaderboard\"\n                  >\n                    <X className=\"h-4 w-4 sm:h-5 sm:w-5 text-gray-500 dark:text-gray-400\" />\n                  </button>\n                </div>\n\n                <div className=\"max-h-80 sm:max-h-96 overflow-y-auto\">\n                  {leaderboard.length > 0 ? (\n                    <div className=\"space-y-2 sm:space-y-3\">\n                      {leaderboard.map((entry, index) => (\n                        <div\n                          key={`${entry.name}-${entry.date}`}\n                          className=\"flex items-center justify-between p-2 sm:p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-100 dark:border-gray-700/50\"\n                        >\n                          <div className=\"flex items-center gap-2 sm:gap-3\">\n                            <div className={`w-6 h-6 sm:w-7 sm:h-7 rounded-full flex items-center justify-center text-xs sm:text-sm font-bold ${\n                              index === 0 ? 'bg-yellow-400 text-yellow-900' :\n                              index === 1 ? 'bg-gray-300 text-gray-700' :\n                              index === 2 ? 'bg-amber-600 text-amber-100' :\n                              'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'\n                            }`}>\n                              {index + 1}\n                            </div>\n                            <span className=\"font-medium text-gray-900 dark:text-white text-sm sm:text-base truncate max-w-[120px] sm:max-w-none\">{entry.name}</span>\n                          </div>\n                          <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300 text-right\">\n                            <div className=\"font-medium\">{entry.moves} moves</div>\n                            <div className=\"text-gray-500 dark:text-gray-400\">{formatTime(entry.time)}</div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-6 sm:py-8 text-gray-500 dark:text-gray-400\">\n                      <Trophy className=\"w-10 h-10 sm:w-12 sm:h-12 mx-auto mb-3 text-gray-300 dark:text-gray-600\" />\n                      <p className=\"text-base sm:text-lg font-medium\">No scores yet</p>\n                      <p className=\"text-xs sm:text-sm\">Complete a game to appear on the leaderboard!</p>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"mt-4 sm:mt-6 pt-3 sm:pt-4 border-t border-gray-100 dark:border-gray-800\">\n                  <p className=\"text-xs sm:text-sm text-gray-500 dark:text-gray-400 text-center\">\n                    {leaderboard.length > 0\n                      ? `Showing ${Math.min(leaderboard.length, 10)} of ${leaderboard.length} top scores`\n                      : 'Be the first to set a high score!'\n                    }\n                  </p>\n                </div>\n              </motion.div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryGame;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\Button.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\Button.stories.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":6,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":36,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { buttonVariants } from '@/lib/buttonStyles';\nimport Button from './Button';\nimport { Heart, ArrowRight, Star, Bookmark, Share2, Plus, Trash2, Edit } from 'lucide-react';\n\nexport default {\n  title: 'Components/UI/Button',\n  component: Button,\n  argTypes: {\n    variant: {\n      control: {\n        type: 'select',\n        options: Object.keys(buttonVariants).filter(key => \n          typeof buttonVariants[key] === 'object' && 'base' in buttonVariants[key]\n        ),\n      },\n    },\n    size: {\n      control: {\n        type: 'select',\n        options: ['sm', 'md', 'lg', 'xl'],\n      },\n    },\n    disabled: { control: 'boolean' },\n    fullWidth: { control: 'boolean' },\n    asChild: { control: 'boolean' },\n  },\n  args: {\n    children: 'Button',\n    variant: 'primary',\n    size: 'md',\n    disabled: false,\n    fullWidth: false,\n    asChild: false,\n  },\n};\n\nconst Template = (args) => <Button {...args} />;\n\nexport const Default = Template.bind({});\n\n// Show all variants in a grid\nexport const Variants = () => (\n  <div className=\"space-y-8\">\n    <div>\n      <h3 className=\"text-lg font-medium mb-4\">Primary Variants</h3>\n      <div className=\"flex flex-wrap gap-4 items-center\">\n        <Button variant=\"primary\">Primary</Button>\n        <Button variant=\"secondary\">Secondary</Button>\n        <Button variant=\"outline\">Outline</Button>\n        <Button variant=\"ghost\">Ghost</Button>\n        <Button variant=\"link\">Link</Button>\n        <Button variant=\"danger\">Danger</Button>\n        <Button variant=\"cta\">Call to Action</Button>\n      </div>\n    </div>\n\n    <div>\n      <h3 className=\"text-lg font-medium mb-4\">Social Buttons</h3>\n      <div className=\"flex flex-wrap gap-4 items-center\">\n        <Button variant=\"facebook\">Continue with Facebook</Button>\n        <Button variant=\"google\">Sign in with Google</Button>\n      </div>\n    </div>\n\n    <div>\n      <h3 className=\"text-lg font-medium mb-4\">Recipe Actions</h3>\n      <div className=\"flex flex-wrap gap-4 items-center\">\n        <Button variant=\"save\">\n          <Bookmark className=\"w-4 h-4 mr-2\" />\n          Save Recipe\n        </Button>\n        <Button variant=\"outline\">\n          <Share2 className=\"w-4 h-4 mr-2\" />\n          Share\n        </Button>\n        <Button variant=\"ghost\">\n          <Edit className=\"w-4 h-4 mr-2\" />\n          Edit\n        </Button>\n        <Button variant=\"ghost\" className=\"text-red-600 hover:bg-red-50\">\n          <Trash2 className=\"w-4 h-4 mr-2\" />\n          Delete\n        </Button>\n      </div>\n    </div>\n  </div>\n);\n\nexport const Sizes = () => (\n  <div className=\"flex flex-wrap items-center gap-4\">\n    <Button size=\"sm\">Small</Button>\n    <Button size=\"md\">Medium</Button>\n    <Button size=\"lg\">Large</Button>\n    <Button size=\"xl\">Extra Large</Button>\n  </div>\n);\n\nexport const WithIcons = () => (\n  <div className=\"space-y-4\">\n    <div className=\"flex flex-wrap gap-4\">\n      <Button leftIcon={Heart} variant=\"ghost\" className=\"text-red-500\">\n        Add to Favorites\n      </Button>\n      <Button rightIcon={ArrowRight} variant=\"primary\">\n        Continue\n      </Button>\n      <Button leftIcon={Plus} variant=\"secondary\">\n        Add Recipe\n      </Button>\n    </div>\n    <div className=\"flex flex-wrap gap-4\">\n      <Button leftIcon={Star} variant=\"ghost\" className=\"text-amber-500\">\n        Rate this recipe\n      </Button>\n      <Button rightIcon={ArrowRight} variant=\"link\">\n        View all recipes\n      </Button>\n    </div>\n  </div>\n);\n\nexport const FullWidth = () => (\n  <div className=\"space-y-4 max-w-md\">\n    <Button fullWidth>Full Width Button</Button>\n    <Button variant=\"outline\" fullWidth>\n      Another Full Width Button\n    </Button>\n  </div>\n);\n\nexport const Disabled = () => (\n  <div className=\"flex flex-wrap gap-4\">\n    <Button disabled>Primary Disabled</Button>\n    <Button variant=\"secondary\" disabled>\n      Secondary Disabled\n    </Button>\n    <Button variant=\"outline\" disabled>\n      Outline Disabled\n    </Button>\n    <Button variant=\"ghost\" disabled>\n      Ghost Disabled\n    </Button>\n    <Button variant=\"link\" disabled>\n      Link Disabled\n    </Button>\n  </div>\n);\n\n// Custom button with custom hover effect\nexport const CustomButton = () => (\n  <Button\n    className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold\"\n    hoverEffect={{\n      base: 'group',\n      hover: 'hover:from-pink-600 hover:to-purple-600 hover:shadow-lg',\n      focus: 'focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50',\n      child: 'bg-white/20',\n    }}\n  >\n    Custom Gradient Button\n  </Button>\n);\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\config\\app.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\context\\FavoritesContext.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\context\\RecipeContext.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\hooks\\useSubscriptionModal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\actions\\admin.actions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\api\\calorieninjas.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\api\\edamam.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\api\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\api\\mealdb.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\audit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\auditLogger.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\auth-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\barcodeAPI.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\buttonStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\dashboard-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\db-init.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\db.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\mealNutrition.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\nutritionAPI.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign instance to a variable before exporting as module default","line":124,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":124,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\n\n// Nutrition API Integration\nclass NutritionAPI {\n  constructor() {\n    this.calorieNinjasKey = process.env.CALORIENINJAS_API_KEY;\n  }\n\n  // CalorieNinjas API Integration\n  async getNutritionInfo(query) {\n    if (!this.calorieNinjasKey) {\n      throw new Error('CalorieNinjas API key not configured');\n    }\n\n    try {\n      const response = await axios.get(`${process.env.CALORIENINJAS_API_BASE}/nutrition`, {\n        params: { query },\n        headers: {\n          'X-Api-Key': this.calorieNinjasKey\n        }\n      });\n\n      if (response.data.items && response.data.items.length > 0) {\n        const item = response.data.items[0];\n        return {\n          name: item.name,\n          category: 'Food',\n          calories: item.calories,\n          protein: item.protein_g || 0,\n          carbs: item.carbohydrates_total_g || 0,\n          fat: item.fat_total_g || 0,\n          fiber: item.fiber_g || 0,\n          sugar: item.sugar_g || 0,\n          sodium: item.sodium_mg || 0,\n          potassium: item.potassium_mg || 0,\n          servingSize: item.serving_size_g || 100,\n          servingUnit: 'g',\n          source: 'calorieninjas'\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('CalorieNinjas error:', error.message);\n      return null;\n    }\n  }\n\n  // Combined Food Search (tries all APIs)\n  async searchFoodsCombined(query, limit = 5) {\n    const results = [];\n\n    try {\n      // Remove duplicates and limit\n      const uniqueResults = results\n        .filter((food, index, self) =>\n          index === self.findIndex(f => f.name.toLowerCase() === food.name.toLowerCase())\n        )\n        .slice(0, limit);\n\n      return uniqueResults;\n    } catch (error) {\n      console.error('Combined search error:', error.message);\n      return [];\n    }\n  }\n\n  // Get Nutrition Info (tries all APIs)\n  async getNutritionInfoCombined(foodName) {\n    try {\n      // Try CalorieNinjas first (most accurate for nutrition)\n      let nutrition = await this.getNutritionInfo(foodName);\n      if (nutrition) return nutrition;\n\n      return null;\n    } catch (error) {\n      console.error('Combined nutrition lookup error:', error.message);\n      return null;\n    }\n  }\n\n  // Calculate nutrition for custom serving size\n  calculateServingNutrition(nutrition, originalServing, newServing, unit = 'g') {\n    if (!nutrition || originalServing <= 0) return nutrition;\n\n    const ratio = newServing / originalServing;\n\n    return {\n      ...nutrition,\n      calories: Math.round(nutrition.calories * ratio),\n      protein: parseFloat((nutrition.protein * ratio).toFixed(2)),\n      carbs: parseFloat((nutrition.carbs * ratio).toFixed(2)),\n      fat: parseFloat((nutrition.fat * ratio).toFixed(2)),\n      fiber: parseFloat((nutrition.fiber * ratio).toFixed(2)),\n      sugar: parseFloat((nutrition.sugar * ratio).toFixed(2)),\n      sodium: Math.round(nutrition.sodium * ratio),\n      potassium: Math.round(nutrition.potassium * ratio)\n    };\n  }\n\n  // Parse common food measurements\n  parseMeasurement(measurement) {\n    const conversions = {\n      'cup': 240, 'cups': 240,\n      'tbsp': 15, 'tablespoon': 15, 'tablespoons': 15,\n      'tsp': 5, 'teaspoon': 5, 'teaspoons': 5,\n      'oz': 28.35, 'ounce': 28.35, 'ounces': 28.35,\n      'lb': 453.59, 'pound': 453.59, 'pounds': 453.59,\n      'g': 1, 'gram': 1, 'grams': 1,\n      'kg': 1000, 'kilogram': 1000, 'kilograms': 1000,\n      'ml': 1, 'milliliter': 1, 'milliliters': 1,\n      'l': 1000, 'liter': 1000, 'liters': 1000\n    };\n\n    const lowerMeasurement = measurement.toLowerCase();\n    for (const [key, value] of Object.entries(conversions)) {\n      if (lowerMeasurement.includes(key)) {\n        return value;\n      }\n    }\n    return 100; // Default to 100g if unit not recognized\n  }\n}\n\nexport default new NutritionAPI();\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\recipeAPI.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign instance to a variable before exporting as module default","line":1084,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":1084,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios'\nimport config from '../config/app'\nimport { query, queryOne } from '@/lib/db'\n\nclass RecipeAPI {\n  constructor() {\n    this.calorieNinjasKey = config.api.calorieNinjas.key\n    this.calorieNinjasBase = config.api.calorieNinjas.baseURL\n    this.mealdbBase = config.api.mealdb.baseURL\n    this.fatsecretConfig = config.api.fatsecret || {}\n    this.fatsecretToken = null\n    this.fatsecretTokenExpiry = 0\n  }\n\n  hasFatSecretCredentials() {\n    return Boolean(\n      this.fatsecretConfig?.clientId &&\n      this.fatsecretConfig?.clientSecret &&\n      this.fatsecretConfig?.authURL &&\n      this.fatsecretConfig?.baseURL\n    )\n  }\n\n  async getFatSecretAccessToken(forceRefresh = false) {\n    if (!this.hasFatSecretCredentials()) {\n      return null\n    }\n\n    const now = Date.now()\n    if (!forceRefresh && this.fatsecretToken && now < this.fatsecretTokenExpiry - 60_000) {\n      return this.fatsecretToken\n    }\n\n    try {\n      const params = new URLSearchParams()\n      params.append('grant_type', 'client_credentials')\n      params.append('scope', this.fatsecretConfig.scope || 'basic')\n\n      const response = await axios.post(this.fatsecretConfig.authURL, params.toString(), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        auth: {\n          username: this.fatsecretConfig.clientId,\n          password: this.fatsecretConfig.clientSecret\n        }\n      })\n\n      const accessToken = response.data?.access_token\n      const expiresIn = Number.parseInt(response.data?.expires_in, 10) || 0\n\n      if (!accessToken) {\n        console.warn('⚠️ FatSecret token request succeeded but no access token returned')\n        return null\n      }\n\n      this.fatsecretToken = accessToken\n      this.fatsecretTokenExpiry = Date.now() + expiresIn * 1000\n      return this.fatsecretToken\n    } catch (error) {\n      console.error('❌ Error fetching FatSecret access token:', error?.response?.data || error?.message || error)\n      return null\n    }\n  }\n\n  async fatSecretRequest(params = {}, { retry = true } = {}) {\n    if (!this.hasFatSecretCredentials()) {\n      return null\n    }\n\n    const token = await this.getFatSecretAccessToken(retry === false)\n    if (!token) {\n      return null\n    }\n\n    try {\n      const response = await axios.get(this.fatsecretConfig.baseURL, {\n        params: {\n          format: 'json',\n          ...params\n        },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })\n      return response.data\n    } catch (error) {\n      const status = error?.response?.status\n      console.error('❌ Error calling FatSecret API:', error?.response?.data || error?.message || error)\n\n      if (status === 401 && retry) {\n        console.warn('🔄 FatSecret token may be expired, refreshing and retrying request')\n        await this.getFatSecretAccessToken(true)\n        return this.fatSecretRequest(params, { retry: false })\n      }\n\n      return null\n    }\n  }\n\n  async searchFoodsFatSecret(searchExpression, maxResults = 5) {\n    if (!searchExpression || !this.hasFatSecretCredentials()) {\n      return []\n    }\n\n    const data = await this.fatSecretRequest({\n      method: 'foods.search',\n      search_expression: searchExpression,\n      max_results: maxResults,\n      page_number: 0\n    })\n\n    const foods = data?.foods?.food\n    if (!foods) {\n      return []\n    }\n\n    return Array.isArray(foods) ? foods : [foods]\n  }\n\n  async getFoodDetailsFatSecret(foodId) {\n    if (!foodId || !this.hasFatSecretCredentials()) {\n      return null\n    }\n\n    const data = await this.fatSecretRequest({\n      method: 'food.get.v2',\n      food_id: foodId\n    })\n\n    return data?.food || null\n  }\n\n  extractNutritionFromFatSecretFood(food) {\n    if (!food?.servings?.serving) {\n      return null\n    }\n\n    const serving = Array.isArray(food.servings.serving) ? food.servings.serving[0] : food.servings.serving\n    if (!serving) {\n      return null\n    }\n\n    const calories = toNumberOrNull(serving.calories)\n    const protein = toNumberOrNull(serving.protein)\n    const fat = toNumberOrNull(serving.fat)\n    const carbs = toNumberOrNull(serving.carbohydrate)\n    const fiber = toNumberOrNull(serving.fiber)\n    const sugar = toNumberOrNull(serving.sugar)\n\n    if ([calories, protein, fat, carbs, fiber, sugar].every((value) => value === null)) {\n      return null\n    }\n\n    return {\n      calories: calories ?? undefined,\n      protein: protein ?? undefined,\n      fat: fat ?? undefined,\n      carbs: carbs ?? undefined,\n      fiber: fiber ?? undefined,\n      sugar: sugar ?? undefined\n    }\n  }\n\n  async getNutritionFatSecretByQuery(query) {\n    if (!query || !this.hasFatSecretCredentials()) {\n      return null\n    }\n\n    const foods = await this.searchFoodsFatSecret(query, 3)\n    if (!foods.length) {\n      return null\n    }\n\n    for (const food of foods) {\n      try {\n        const details = await this.getFoodDetailsFatSecret(food.food_id)\n        const nutrition = this.extractNutritionFromFatSecretFood(details)\n        if (nutrition) {\n          return nutrition\n        }\n      } catch (error) {\n        console.warn('⚠️ Failed to extract nutrition from FatSecret food:', error?.message || error)\n      }\n    }\n\n    return null\n  }\n\n  async getNutritionForRecipeFatSecret(recipe) {\n    if (!recipe || !this.hasFatSecretCredentials()) {\n      return null\n    }\n\n    const baseQuery = recipe.title || recipe.name\n    const ingredientSnippet = Array.isArray(recipe.ingredients)\n      ? recipe.ingredients\n          .slice(0, 3)\n          .map((ingredient) => ingredient.name || ingredient)\n          .filter(Boolean)\n          .join(' ')\n      : ''\n\n    const queries = [\n      baseQuery,\n      ingredientSnippet ? `${baseQuery} ${ingredientSnippet}` : null,\n      ingredientSnippet || null\n    ].filter(Boolean)\n\n    for (const query of queries) {\n      const nutrition = await this.getNutritionFatSecretByQuery(query)\n      if (nutrition) {\n        return nutrition\n      }\n    }\n\n    return null\n  }\n\n  async enrichRecipesWithNutritionFatSecret(recipes = []) {\n    if (!Array.isArray(recipes) || !recipes.length || !this.hasFatSecretCredentials()) {\n      return recipes\n    }\n\n    for (const recipe of recipes) {\n      try {\n        const hasNutrition = recipe?.nutrition && Number.isFinite(recipe.nutrition?.calories) && recipe.nutrition.calories > 0\n        if (hasNutrition) {\n          continue\n        }\n\n        let nutrition = await this.getNutritionForRecipeFatSecret(recipe)\n\n        if (!nutrition && Array.isArray(recipe.ingredients) && recipe.ingredients.length) {\n          const ingredientQuery = this.buildNutritionQueryFromIngredients(recipe.ingredients)\n          if (ingredientQuery) {\n            const ninjasNutrition = await this.getNutritionInfo(ingredientQuery)\n            if (ninjasNutrition) {\n              nutrition = ninjasNutrition\n            } else {\n              const basicEstimate = this.getBasicNutritionEstimate(ingredientQuery)\n              if (basicEstimate) {\n                nutrition = basicEstimate\n              }\n            }\n          }\n        }\n\n        if (nutrition) {\n          const current = recipe.nutrition || {}\n          recipe.nutrition = {\n            calories: nutrition.calories ?? current.calories ?? 0,\n            protein: nutrition.protein ?? current.protein ?? 0,\n            fat: nutrition.fat ?? current.fat ?? 0,\n            carbs: nutrition.carbs ?? current.carbs ?? 0,\n            fiber: nutrition.fiber ?? current.fiber ?? 0,\n            sugar: nutrition.sugar ?? current.sugar ?? 0\n          }\n        }\n      } catch (error) {\n        console.warn('⚠️ Failed to enrich recipe with FatSecret nutrition:', error?.message || error)\n      }\n    }\n\n    return recipes\n  }\n\n  buildNutritionQueryFromIngredients(ingredients = []) {\n    if (!Array.isArray(ingredients) || !ingredients.length) {\n      return ''\n    }\n\n    return ingredients\n      .map((ingredient) => {\n        if (!ingredient) return ''\n        if (typeof ingredient === 'string') {\n          return ingredient.trim()\n        }\n\n        const parts = []\n        const amount = ingredient.amount || ingredient.quantity || ingredient.value\n        const measure = ingredient.measure || ingredient.unit\n        const name = ingredient.name || ingredient.ingredient || ingredient.title\n\n        if (amount) parts.push(String(amount).trim())\n        if (measure) parts.push(String(measure).trim())\n        if (name) parts.push(String(name).trim())\n\n        if (!parts.length && ingredient.original) {\n          return ingredient.original.trim()\n        }\n\n        return parts.join(' ').trim()\n      })\n      .filter(Boolean)\n      .join(', ')\n  }\n\n  // CalorieNinjas API Methods\n  async getNutritionInfo(query) {\n    try {\n      if (!this.calorieNinjasKey) {\n        console.warn('⚠️ CalorieNinjas API key not configured, skipping nutrition lookup')\n        return null\n      }\n\n      console.log('🔍 Getting nutrition info for:', query)\n\n      const response = await axios.get(`${this.calorieNinjasBase}/nutrition`, {\n        params: { query },\n        headers: {\n          'X-Api-Key': this.calorieNinjasKey\n        }\n      })\n\n      if (response.data?.items && response.data.items.length > 0) {\n        const nutrition = response.data.items[0]\n        console.log('✅ Nutrition info found:', {\n          name: nutrition.name,\n          calories: nutrition.calories,\n          protein: nutrition.protein_g,\n          carbs: nutrition.carbohydrates_total_g,\n          fat: nutrition.fat_total_g\n        })\n\n        // Transform to match our expected format\n        return {\n          calories: Math.round(nutrition.calories || 0),\n          protein: Math.round(nutrition.protein_g || 0),\n          fat: Math.round(nutrition.fat_total_g || 0),\n          carbs: Math.round(nutrition.carbohydrates_total_g || 0),\n          fiber: Math.round(nutrition.fiber_g || 0),\n          sugar: Math.round(nutrition.sugar_g || 0)\n        }\n      } else {\n        console.warn('⚠️ No nutrition data found for:', query)\n        return null\n      }\n    } catch (error) {\n      console.error('❌ Error fetching nutrition info from CalorieNinjas:', error.response?.data || error.message)\n\n      // If CalorieNinjas fails, try to return basic nutrition estimates\n      if (query && query.length > 0) {\n        console.log('🔄 Providing basic nutrition estimates for:', query)\n        return this.getBasicNutritionEstimate(query)\n      }\n\n      return null\n    }\n  }\n\n  // Fallback method to provide basic nutrition estimates when APIs fail\n  getBasicNutritionEstimate(ingredients) {\n    console.log('🔄 Calculating basic nutrition estimates for:', ingredients)\n\n    // Basic estimates per ingredient type\n    const estimates = {\n      chicken: { calories: 165, protein: 31, fat: 3.6, carbs: 0, fiber: 0 },\n      beef: { calories: 250, protein: 26, fat: 15, carbs: 0, fiber: 0 },\n      fish: { calories: 206, protein: 22, fat: 12, carbs: 0, fiber: 0 },\n      rice: { calories: 130, protein: 2.7, fat: 0.3, carbs: 28, fiber: 0.4 },\n      pasta: { calories: 131, protein: 5, fat: 1, carbs: 25, fiber: 1.5 },\n      bread: { calories: 265, protein: 9, fat: 3, carbs: 49, fiber: 2.7 },\n      potato: { calories: 77, protein: 2, fat: 0.1, carbs: 17, fiber: 2.2 },\n      tomato: { calories: 18, protein: 0.9, fat: 0.2, carbs: 3.9, fiber: 1.2 },\n      onion: { calories: 40, protein: 1.1, fat: 0.1, carbs: 9.3, fiber: 1.7 },\n      garlic: { calories: 149, protein: 6.4, fat: 0.5, carbs: 33, fiber: 2.1 },\n      cheese: { calories: 113, protein: 7, fat: 9, carbs: 1, fiber: 0 },\n      milk: { calories: 42, protein: 3.4, fat: 1, carbs: 5, fiber: 0 },\n      egg: { calories: 155, protein: 13, fat: 11, carbs: 1.1, fiber: 0 },\n      oil: { calories: 884, protein: 0, fat: 100, carbs: 0, fiber: 0 },\n      butter: { calories: 717, protein: 0.9, fat: 81, carbs: 0.1, fiber: 0 },\n      sugar: { calories: 387, protein: 0, fat: 0, carbs: 100, fiber: 0 },\n      salt: { calories: 0, protein: 0, fat: 0, carbs: 0, fiber: 0 },\n      flour: { calories: 364, protein: 10, fat: 1, carbs: 76, fiber: 2.7 },\n      default: { calories: 50, protein: 1, fat: 0.5, carbs: 10, fiber: 1 }\n    }\n\n    const ingredientList = ingredients.toLowerCase().split(',').map(i => i.trim())\n    let totalNutrition = { calories: 0, protein: 0, fat: 0, carbs: 0, fiber: 0 }\n\n    ingredientList.forEach(ingredient => {\n      let found = false\n      for (const [key, nutrition] of Object.entries(estimates)) {\n        if (ingredient.includes(key)) {\n          totalNutrition.calories += nutrition.calories\n          totalNutrition.protein += nutrition.protein\n          totalNutrition.fat += nutrition.fat\n          totalNutrition.carbs += nutrition.carbs\n          totalNutrition.fiber += nutrition.fiber\n          found = true\n          break\n        }\n      }\n\n      if (!found) {\n        // Use default values for unknown ingredients\n        totalNutrition.calories += estimates.default.calories\n        totalNutrition.protein += estimates.default.protein\n        totalNutrition.fat += estimates.default.fat\n        totalNutrition.carbs += estimates.default.carbs\n        totalNutrition.fiber += estimates.default.fiber\n      }\n    })\n\n    console.log('✅ Basic nutrition estimates calculated:', totalNutrition)\n    return totalNutrition\n  }\n\n  async getRecipesByCategoryMealDB(category) {\n    try {\n      const response = await axios.get(`${this.mealdbBase}/filter.php`, {\n        params: { c: category }\n      })\n\n      if (response.data?.meals) {\n        // Get full recipe details for each meal\n        const detailedRecipes = await Promise.all(\n          response.data.meals.slice(0, 12).map(async (meal) => {\n            try {\n              const detailResponse = await axios.get(`${this.mealdbBase}/lookup.php`, {\n                params: { i: meal.idMeal }\n              })\n              return detailResponse.data?.meals?.[0]\n                ? this.transformMealDBRecipe(detailResponse.data.meals[0])\n                : null\n            } catch (error) {\n              console.error(`Could not get details for meal ${meal.idMeal}:`, error)\n              return null\n            }\n          })\n        )\n        return detailedRecipes.filter(recipe => recipe !== null)\n      }\n      return []\n    } catch (error) {\n      console.error('Error fetching recipes by category from MealDB:', error)\n      throw error\n    }\n  }\n\n  async getRecipesByAreaMealDB(area) {\n    try {\n      const response = await axios.get(`${this.mealdbBase}/filter.php`, {\n        params: { a: area }\n      })\n\n      if (response.data?.meals) {\n        // Get full recipe details for each meal\n        const detailedRecipes = await Promise.all(\n          response.data.meals.slice(0, 12).map(async (meal) => {\n            try {\n              const detailResponse = await axios.get(`${this.mealdbBase}/lookup.php`, {\n                params: { i: meal.idMeal }\n              })\n              return detailResponse.data?.meals?.[0]\n                ? this.transformMealDBRecipe(detailResponse.data.meals[0])\n                : null\n            } catch (error) {\n              console.error(`Could not get details for meal ${meal.idMeal}:`, error)\n              return null\n            }\n          })\n        )\n        return detailedRecipes.filter(recipe => recipe !== null)\n      }\n      return []\n    } catch (error) {\n      console.error('Error fetching recipes by area from MealDB:', error)\n      throw error\n    }\n  }\n\n  async getMealsByAreaRawMealDB(area) {\n    try {\n      const response = await axios.get(`${this.mealdbBase}/filter.php`, {\n        params: { a: area }\n      })\n      return response.data?.meals || []\n    } catch (error) {\n      console.error('Error fetching meals by area (raw) from MealDB:', error)\n      throw error\n    }\n  }\n  async getRecipeByIdMealDB(id) {\n    try {\n      const response = await axios.get(`${this.mealdbBase}/lookup.php`, {\n        params: { i: id }\n      })\n\n      if (!response.data.meals || response.data.meals.length === 0) {\n        throw new Error(`No recipe found with ID: ${id}`)\n      }\n\n      return this.transformMealDBRecipe(response.data.meals[0])\n    } catch (error) {\n      console.error('Error fetching recipe by ID from MealDB:', error)\n      throw error\n    }\n  }\n\n  async getRandomRecipesMealDB(count = 10) {\n    try {\n      // MealDB random endpoint only returns 1 recipe per call, so we need to make multiple calls\n      const promises = Array.from({ length: count }, () =>\n        axios.get(`${this.mealdbBase}/random.php`)\n      )\n\n      const responses = await Promise.allSettled(promises)\n      const recipes = []\n\n      responses.forEach(response => {\n        if (response.status === 'fulfilled' && response.value.data?.meals) {\n          recipes.push(...response.value.data.meals.map(meal => this.transformMealDBRecipe(meal)))\n        }\n      })\n\n      // Remove duplicates using a more robust method\n      const uniqueRecipes = []\n      const seen = new Set()\n\n      recipes.forEach(recipe => {\n        const identifier = `${recipe.source}-${recipe.id}-${recipe.title?.toLowerCase()}`\n        if (!seen.has(identifier)) {\n          seen.add(identifier)\n          uniqueRecipes.push(recipe)\n        } else {\n          console.log('🔄 MealDB random: Removing duplicate recipe:', recipe.title)\n        }\n      })\n\n      const enriched = await this.enrichRecipesWithNutritionFatSecret(uniqueRecipes)\n      return enriched.slice(0, count)\n    } catch (error) {\n      console.error('Error fetching random recipes from MealDB:', error)\n      throw error\n    }\n  }\n\n  async getCategoriesMealDB() {\n    try {\n      const response = await axios.get(`${this.mealdbBase}/categories.php`)\n      return response.data?.categories || []\n    } catch (error) {\n      console.error('Error fetching categories from MealDB:', error)\n      throw error\n    }\n  }\n\n  async getAreasMealDB() {\n    try {\n      const response = await axios.get(`${this.mealdbBase}/list.php`, {\n        params: { a: 'list' }\n      })\n      return response.data?.meals || []\n    } catch (error) {\n      console.error('Error fetching areas from MealDB:', error)\n      throw error\n    }\n  }\n\n  async getIngredientsMealDB() {\n    try {\n      const response = await axios.get(`${this.mealdbBase}/list.php`, {\n        params: { i: 'list' }\n      })\n      return response.data?.meals || []\n    } catch (error) {\n      console.error('Error fetching ingredients from MealDB:', error)\n      throw error\n    }\n  }\n\n  async searchByIngredientMealDB(ingredient) {\n    try {\n      const response = await axios.get(`${this.mealdbBase}/filter.php`, {\n        params: { i: ingredient }\n      })\n\n      if (response.data?.meals) {\n        // Get full recipe details for each meal\n        const detailedRecipes = await Promise.all(\n          response.data.meals.slice(0, 12).map(async (meal) => {\n            try {\n              const detailResponse = await axios.get(`${this.mealdbBase}/lookup.php`, {\n                params: { i: meal.idMeal }\n              })\n              return detailResponse.data?.meals?.[0]\n                ? this.transformMealDBRecipe(detailResponse.data.meals[0])\n                : null\n            } catch (error) {\n              console.error(`Could not get details for meal ${meal.idMeal}:`, error)\n              return null\n            }\n          })\n        )\n        return detailedRecipes.filter(recipe => recipe !== null)\n      }\n      return []\n    } catch (error) {\n      console.error('Error searching by ingredient from MealDB:', error)\n      throw error\n    }\n  }\n\n  async searchRecipesByNameMealDB(name) {\n    try {\n      const response = await axios.get(`${this.mealdbBase}/search.php`, {\n        params: { s: name }\n      })\n\n      if (response.data?.meals) {\n        // Get full recipe details for each meal\n        const detailedRecipes = await Promise.all(\n          response.data.meals.slice(0, 10).map(async (meal) => {\n            try {\n              const detailResponse = await axios.get(`${this.mealdbBase}/lookup.php`, {\n                params: { i: meal.idMeal }\n              })\n              return detailResponse.data?.meals?.[0]\n                ? this.transformMealDBRecipe(detailResponse.data.meals[0])\n                : null\n            } catch (error) {\n              console.error(`Could not get details for meal ${meal.idMeal}:`, error)\n              return null\n            }\n          })\n        )\n        return detailedRecipes.filter(recipe => recipe !== null)\n      }\n      return []\n    } catch (error) {\n      console.error('Error searching recipes by name from MealDB:', error)\n      throw error\n    }\n  }\n\n  async getPopularRecipesMealDB(count = 10) {\n    try {\n      // Get random recipes as popular (MealDB doesn't have a popularity endpoint)\n      return await this.getRandomRecipesMealDB(count)\n    } catch (error) {\n      console.error('Error fetching popular recipes from MealDB:', error)\n      throw error\n    }\n  }\n\n  // Transform functions to standardize recipe data\n  transformMealDBRecipe(meal) {\n    // Extract and clean instructions\n    let instructions = meal.strInstructions || ''\n    if (instructions) {\n      // Clean up the instructions - remove extra whitespace and normalize line breaks\n      instructions = instructions\n        .replace(/\\r\\n/g, '\\n') // Normalize line breaks\n        .replace(/\\n\\s*\\n/g, '\\n') // Remove empty lines\n        .trim()\n\n      // Split into steps if it looks like a numbered list\n      if (instructions.match(/^\\d+\\./m)) {\n        instructions = instructions\n          .split(/\\n/)\n          .map(line => line.replace(/^\\d+\\.\\s*/, '').trim())\n          .filter(line => line.length > 0)\n          .join('\\n')\n      }\n    }\n\n    // Extract ingredients with measures\n    const ingredients = this.extractIngredients(meal)\n\n    console.log('🔄 Transforming MealDB recipe:', {\n      id: meal.idMeal,\n      title: meal.strMeal,\n      hasInstructions: !!instructions && instructions.length > 0,\n      instructionsLength: instructions.length,\n      ingredientsCount: ingredients.length,\n      category: meal.strCategory,\n      cuisine: meal.strArea\n    })\n\n    const baseRecipe = {\n      id: meal.idMeal,\n      title: meal.strMeal,\n      category: meal.strCategory,\n      cuisine: meal.strArea,\n      instructions: instructions || 'No detailed instructions available for this recipe.',\n      image: meal.strMealThumb,\n      tags: meal.strTags?.split(',').map(tag => tag.trim()).filter(tag => tag) || [],\n      video: meal.strYoutube,\n      ingredients: ingredients,\n      source: 'MealDB',\n      originalId: meal.idMeal,\n      nutrition: {\n        calories: 0,\n        protein: 0,\n        fat: 0,\n        carbs: 0,\n        fiber: 0\n      }\n    }\n\n    return baseRecipe\n  }\n\n  transformSpoonacularRecipe(recipe) {\n    return {\n      id: recipe.id,\n      title: recipe.title,\n      image: recipe.image,\n      category: recipe.dishTypes?.[0] || 'Main Course',\n      cuisine: recipe.cuisines?.[0] || 'International',\n      instructions: recipe.instructions || recipe.summary,\n      ingredients: recipe.extendedIngredients?.map(ing => ({\n        id: ing.id,\n        name: ing.name,\n        measure: ing.measures?.us?.amount + ' ' + ing.measures?.us?.unitShort || ing.amount + ' ' + ing.unit,\n        original: ing.original\n      })) || [],\n      nutrition: recipe.nutrition?.nutrients ? {\n        calories: Math.round(recipe.nutrition.nutrients.find(n => n.name === 'Calories')?.amount || 0),\n        protein: Math.round(recipe.nutrition.nutrients.find(n => n.name === 'Protein')?.amount || 0),\n        fat: Math.round(recipe.nutrition.nutrients.find(n => n.name === 'Fat')?.amount || 0),\n        carbs: Math.round(recipe.nutrition.nutrients.find(n => n.name === 'Carbohydrates')?.amount || 0),\n        fiber: Math.round(recipe.nutrition.nutrients.find(n => n.name === 'Fiber')?.amount || 0)\n      } : null,\n      readyInMinutes: recipe.readyInMinutes,\n      servings: recipe.servings,\n      healthScore: recipe.healthScore,\n      pricePerServing: recipe.pricePerServing,\n      diets: recipe.diets,\n      occasions: recipe.occasions,\n      source: 'Spoonacular',\n      originalId: recipe.id\n    }\n  }\n\n  getCountryFlag(countryName) {\n    const flagMap = {\n      'African': '🇿🇦',\n      'American': '🇺🇸',\n      'British': '🇬🇧',\n      'Cajun': '🇺🇸',\n      'Caribbean': '🇯🇲',\n      'Chinese': '🇨🇳',\n      'Eastern European': '🇷🇺',\n      'European': '🇪🇺',\n      'French': '🇫🇷',\n      'German': '🇩🇪',\n      'Greek': '🇬🇷',\n      'Indian': '🇮🇳',\n      'Irish': '🇮🇪',\n      'Italian': '🇮🇹',\n      'Japanese': '🇯🇵',\n      'Jewish': '🇮🇱',\n      'Korean': '🇰🇷',\n      'Latin American': '🇲🇽',\n      'Mediterranean': '🇮🇹',\n      'Mexican': '🇲🇽',\n      'Middle Eastern': '🇸🇦',\n      'Nordic': '🇸🇪',\n      'Southern': '🇺🇸',\n      'Spanish': '🇪🇸',\n      'Thai': '🇹🇭',\n      'Vietnamese': '🇻🇳'\n    }\n\n    return flagMap[countryName] || '🌍'\n  }\n\n  extractIngredients(meal) {\n    const ingredients = []\n\n    for (let i = 1; i <= 20; i++) {\n      const ingredient = meal[`strIngredient${i}`]\n      const measure = meal[`strMeasure${i}`]\n\n      if (ingredient && ingredient.trim() && ingredient.toLowerCase() !== 'null' && ingredient.toLowerCase() !== 'undefined') {\n        const cleanIngredient = ingredient.trim()\n        const cleanMeasure = measure?.trim() || ''\n\n        ingredients.push({\n          id: i,\n          name: cleanIngredient,\n          measure: cleanMeasure,\n          original: `${cleanMeasure} ${cleanIngredient}`.trim()\n        })\n      }\n    }\n\n    console.log('🔄 Extracted ingredients:', {\n      count: ingredients.length,\n      ingredients: ingredients.map(ing => ing.original)\n    })\n\n    return ingredients\n  }\n\n  // Utility method to get combined recipe data\n  async getRecipeWithNutrition(id, source = 'mealdb') {\n    try {\n      let recipe\n\n      console.log(`🔍 Getting recipe with ID: ${id} from source: ${source}`)\n\n      if (source === 'community') {\n        recipe = await this.getCommunityRecipeById(id)\n        if (!recipe) {\n          console.warn('⚠️ Community recipe not found:', id)\n          return null\n        }\n        console.log('✅ Found community recipe:', recipe.title)\n        return recipe\n      }\n\n      if (source === 'mealdb') {\n        try {\n          // First try to get by ID directly\n          recipe = await this.getRecipeByIdMealDB(id)\n          console.log('✅ Found MealDB recipe by ID:', recipe.title)\n        } catch (error) {\n          console.warn('⚠️ Could not fetch MealDB recipe by ID:', error.message)\n\n          // If that fails, try searching by name (extract from ID)\n          try {\n            const searchTerm = id.replace(/[^a-zA-Z0-9\\s]/g, ' ').trim()\n            console.log('🔍 Searching MealDB by name:', searchTerm)\n\n            const searchResults = await this.searchRecipesByNameMealDB(searchTerm)\n            if (searchResults.length > 0) {\n              recipe = searchResults[0] // Take the first result\n              console.log('✅ Found MealDB recipe by search:', recipe.title)\n            } else {\n              console.warn('⚠️ No MealDB recipes found by search')\n              return null\n            }\n          } catch (searchError) {\n            console.warn('⚠️ MealDB search also failed:', searchError.message)\n            return null\n          }\n        }\n      } else {\n        console.warn('⚠️ Unsupported source:', source)\n        return null\n      }\n\n      // For MealDB recipes, try to get nutrition info using ingredients\n      if (source === 'mealdb' && recipe?.ingredients && recipe.ingredients.length > 0) {\n        try {\n          console.log('🔍 Getting nutrition info for MealDB recipe...')\n\n          // Use CalorieNinjas API to get nutrition info\n          const ingredientQuery = recipe.ingredients\n            .slice(0, 5) // Limit to first 5 ingredients to avoid API limits\n            .map(ing => ing.name)\n            .join(', ')\n\n          console.log('🔍 Querying nutrition for ingredients:', ingredientQuery)\n\n          const nutrition = await this.getNutritionInfo(ingredientQuery)\n          if (nutrition) {\n            recipe.nutrition = nutrition\n            console.log('✅ Added nutrition data to MealDB recipe')\n          } else {\n            console.warn('⚠️ No nutrition data returned from CalorieNinjas')\n          }\n        } catch (error) {\n          console.warn('⚠️ Could not fetch nutrition info for MealDB recipe:', error.message)\n        }\n      }\n\n      console.log('✅ Recipe with nutrition ready:', {\n        id: recipe.id,\n        title: recipe.title,\n        source: recipe.source,\n        hasInstructions: !!recipe.instructions,\n        hasIngredients: !!recipe.ingredients?.length,\n        hasNutrition: !!recipe.nutrition,\n        nutritionCalories: recipe.nutrition?.calories || 'N/A'\n      })\n\n      return recipe\n    } catch (error) {\n      console.error('❌ Error getting recipe with nutrition:', error)\n      return null\n    }\n  }\n  async getCommunityRecipeById(rawId) {\n    try {\n      const numericId = Number.parseInt(rawId, 10)\n      const fallbackNumericId = Number.isNaN(numericId) ? -1 : numericId\n\n      const recipe = await queryOne(\n        `SELECT\n           r.id,\n           r.slug,\n           r.title,\n           r.description,\n           r.image,\n           r.prep_time,\n           r.cook_time,\n           r.servings,\n           r.difficulty,\n           r.category,\n           r.cuisine,\n           r.status,\n           r.approval_status,\n           r.is_public,\n           r.is_premium,\n           r.price,\n           r.preview_text,\n           r.user_id,\n           r.created_at,\n           r.updated_at\n         FROM recipes r\n         WHERE r.slug = ? OR r.id = ?`,\n        [rawId, fallbackNumericId]\n      )\n      console.log('🔍 Community lookup result:', { rawId, fallbackNumericId, recipe })\n      if (!recipe) {\n        return null\n      }\n\n      let ingredients = []\n      try {\n        ingredients = await query(\n          `SELECT\n             ri.name,\n             ri.amount,\n             ri.unit,\n             ri.notes,\n             ri.position\n           FROM recipe_ingredients ri\n           WHERE ri.recipe_id = ?\n           ORDER BY ri.position ASC`,\n          [recipe.id]\n        )\n      } catch (error) {\n        console.warn('⚠️ Unable to load recipe ingredients, returning empty list.', {\n          recipeId: recipe.id,\n          error: error.message\n        })\n        ingredients = []\n      }\n\n      let steps = []\n      try {\n        steps = await query(\n          `SELECT\n             instr.step_number,\n             instr.instruction\n           FROM instructions instr\n           WHERE instr.recipe_id = ?\n           ORDER BY instr.step_number ASC`,\n          [recipe.id]\n        )\n      } catch (error) {\n        console.warn('⚠️ Unable to load recipe instructions, returning empty list.', {\n          recipeId: recipe.id,\n          error: error.message\n        })\n        steps = []\n      }\n\n      let nutritionRow = null\n      try {\n        nutritionRow = await queryOne(\n          `SELECT\n             calories,\n             protein,\n             carbs,\n             fats,\n             fiber,\n             sugar,\n             sodium,\n             cholesterol,\n             is_auto_calculated\n           FROM nutritional_info\n           WHERE recipe_id = ?\n           ORDER BY updated_at DESC\n           LIMIT 1`,\n          [recipe.id]\n        )\n      } catch (error) {\n        console.warn('⚠️ Unable to load nutrition info, defaulting to zeros.', {\n          recipeId: recipe.id,\n          error: error.message\n        })\n      }\n\n      const parseNutritionValue = (value) => {\n        if (value === null || value === undefined) {\n          return 0\n        }\n        const parsed = Number.parseFloat(value)\n        return Number.isFinite(parsed) ? parsed : 0\n      }\n\n      const nutrition = nutritionRow\n        ? {\n            calories: parseNutritionValue(nutritionRow.calories),\n            protein: parseNutritionValue(nutritionRow.protein),\n            fat: parseNutritionValue(nutritionRow.fats),\n            carbs: parseNutritionValue(nutritionRow.carbs),\n            fiber: parseNutritionValue(nutritionRow.fiber),\n            sugar: parseNutritionValue(nutritionRow.sugar),\n            sodium: parseNutritionValue(nutritionRow.sodium),\n            cholesterol: parseNutritionValue(nutritionRow.cholesterol),\n            isAutoCalculated: Boolean(nutritionRow.is_auto_calculated)\n          }\n        : {\n            calories: 0,\n            protein: 0,\n            fat: 0,\n            carbs: 0,\n            fiber: 0,\n            sugar: 0,\n            sodium: 0,\n            cholesterol: 0,\n            isAutoCalculated: false\n          }\n\n      const combinedInstructions =\n        steps.length > 0\n          ? steps\n              .sort((a, b) => (a.step_number ?? 0) - (b.step_number ?? 0))\n              .map((step) => step.instruction || '')\n              .filter((instruction) => instruction && instruction.trim().length > 0)\n              .join('\\n\\n')\n          : recipe.instructions || ''\n\n      const readyInMinutes =\n        (recipe.prep_time ?? 0) + (recipe.cook_time ?? 0) > 0\n          ? (recipe.prep_time ?? 0) + (recipe.cook_time ?? 0)\n          : null\n\n      return {\n        id: recipe.slug || recipe.id,\n        databaseId: recipe.id,\n        slug: recipe.slug,\n        title: recipe.title,\n        description: recipe.description,\n        image: recipe.image,\n        instructions: combinedInstructions,\n        ingredients: ingredients.map((ingredient) => ({\n          name: ingredient.name,\n          amount: ingredient.amount !== null ? Number(ingredient.amount) : null,\n          unit: ingredient.unit,\n          notes: ingredient.notes,\n          position: ingredient.position\n        })),\n        prepTime: recipe.prep_time,\n        cookTime: recipe.cook_time,\n        readyInMinutes,\n        servings: recipe.servings,\n        difficulty: recipe.difficulty,\n        category: recipe.category,\n        cuisine: recipe.cuisine,\n        approvalStatus: recipe.approval_status,\n        status: recipe.status,\n        isPublic: recipe.is_public === 1,\n        isPremium: recipe.is_premium === 1 || recipe.is_premium === true,\n        price: recipe.price !== null && recipe.price !== undefined ? Number.parseFloat(recipe.price) : null,\n        previewText: recipe.preview_text,\n        ownerId: recipe.user_id,\n        source: 'community',\n        sourceKey: 'community',\n        submittedAt: recipe.created_at,\n        createdAt: recipe.created_at,\n        updatedAt: recipe.updated_at,\n        nutrition\n      }\n    } catch (error) {\n      console.error('❌ Failed to load community recipe from database.', {\n        rawId,\n        message: error.message,\n        code: error.code\n      })\n      return null\n    }\n  }\n}\n\nexport default new RecipeAPI()\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\subscription.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\middleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\src\\middleware\\admin.middleware.old.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\tailwind.config.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":2,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":180,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/** @type {import('tailwindcss').Config} */\nexport default {\n  darkMode: ['class'],\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/features/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/lib/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/styles/**/*.{js,ts,jsx,tsx,mdx}',\n    './node_modules/@tremor/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        olive: {\n          50: '#f7f9f0',\n          100: '#e8f2d8',\n          200: '#d4e4b8',\n          300: '#bed597',\n          400: '#a8c776',\n          500: '#92b955',\n          600: '#6B8E23',\n          700: '#5a7320',\n          800: '#4e5f24',\n          900: '#3e4d1d',\n          950: '#1f260f',\n        },\n        matte: {\n          50: '#fafcf7',\n          100: '#f0f5e8',\n          200: '#e4edd3',\n          300: '#d7e4bd',\n          400: '#cbdaa8',\n          500: '#bed092',\n          600: '#9ACD32',\n          700: '#8ab02c',\n          800: '#739125',\n          900: '#5d731f',\n          950: '#2e380f',\n        },\n        soft: {\n          50: '#f8f9f5',\n          100: '#eef1e6',\n          200: '#e1e7d2',\n          300: '#d3ddb9',\n          400: '#c6d3a1',\n          500: '#b8c988',\n          600: '#AAB99A',\n          700: '#9aa08b',\n          800: '#848776',\n          900: '#6e6f61',\n          950: '#37382f',\n        },\n        light: {\n          50: '#f8f9f6',\n          100: '#eef0e8',\n          200: '#e2e6d5',\n          300: '#d5dcc1',\n          400: '#c8d2ad',\n          500: '#bbc899',\n          600: '#C1D2AF',\n          700: '#adb196',\n          800: '#96987a',\n          900: '#7f8065',\n          950: '#404032',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        chart: {\n          1: 'hsl(var(--chart-1))',\n          2: 'hsl(var(--chart-2))',\n          3: 'hsl(var(--chart-3))',\n          4: 'hsl(var(--chart-4))',\n          5: 'hsl(var(--chart-5))',\n        }\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: 0 },\n        },\n        'fade-in': {\n          '0%': { opacity: 0 },\n          '100%': { opacity: 1 },\n        },\n        'slide-up': {\n          '0%': { transform: 'translateY(20px)', opacity: 0 },\n          '100%': { transform: 'translateY(0)', opacity: 1 },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n        'fade-in': 'fade-in 0.3s ease-out',\n        'slide-up': 'slide-up 0.3s ease-out',\n      },\n      fontFamily: {\n        sans: ['var(--font-sans)', 'sans-serif'],\n        heading: ['var(--font-heading)', 'sans-serif'],\n        poppins: ['var(--font-poppins)', 'sans-serif'],\n        fredoka: ['var(--font-fredoka)', 'Fredoka', 'sans-serif'],\n        kalam: ['var(--font-kalam)', 'Kalam', 'cursive'],\n        merienda: ['var(--font-merienda)', 'Merienda', 'cursive'],\n        inter: ['var(--font-inter)', 'Inter', 'sans-serif'],\n      },\n      boxShadow: {\n        'card': '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',\n        'card-hover': '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',\n        'dropdown': '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',\n        'modal': '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',\n      },\n      transitionTimingFunction: {\n        'in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',\n        'in': 'cubic-bezier(0.4, 0, 1, 1)',\n        'out': 'cubic-bezier(0, 0, 0.2, 1)',\n      }\n    },\n  },\n  plugins: [\n    require('tailwindcss-animate'),\n    require('@tailwindcss/typography'),\n    require('@tailwindcss/forms')({\n      strategy: 'class',\n    }),\n  ],\n  future: {\n    hoverOnlyWhenSupported: true,\n  },\n  corePlugins: {\n    preflight: true,\n  },\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\test-api-routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\test-db-connection.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\test-edamam-api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\test-edamam-detail.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\test-edamam-integration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\test-edamam-simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\test-edamam-url.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\test-food-apis.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\test-mealdb-deduplication.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\test-mealdb-integration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\matth\\OneDrive\\Desktop\\SAVORY-FLAVORS-BACKUPPLAN-main\\xampp-mysql-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]